<?xml version="1.0" encoding="UTF-8"?>
<tree type="Call tree comparison" threadSelection="All threads" threadStatus="Runnable" aggregation="Methods" differenceCalculation="Total call times">
  <node leaf="false" class="ProjectRunner" methodName="main" methodSignature="([Ljava/lang/String;)V" timeDelta="12403" timeBase="996446" countDelta="0" countBase="1">
    <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="main" methodSignature="([Ljava/lang/String;)V" timeDelta="13369" timeBase="955397" countDelta="0" countBase="1">
      <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="registerMBean" methodSignature="()V" timeDelta="10971" timeBase="69293" countDelta="0" countBase="1">
        <node leaf="true" class="java.lang.management.ManagementFactory" methodName="getPlatformMBeanServer" methodSignature="()Ljavax/management/MBeanServer;" timeDelta="10290" timeBase="63250" countDelta="0" countBase="1"/>
        <node leaf="true" class="javax.management.MBeanServer" methodName="registerMBean" methodSignature="(Ljava/lang/Object;Ljavax/management/ObjectName;)Ljavax/management/ObjectInstance;" timeDelta="673" timeBase="5999" countDelta="0" countBase="1"/>
        <node leaf="true" class="javax.management.ObjectName" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-4" timeBase="19" countDelta="0" countBase="1"/>
      </node>
      <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="init" methodSignature="([Ljava/lang/String;)I" timeDelta="2660" timeBase="592528" countDelta="0" countBase="1">
        <node leaf="true" class="javax.swing.JFrame" methodName="setVisible" methodSignature="(Z)V" timeDelta="11557" timeBase="89836" countDelta="0" countBase="1"/>
        <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="mas" methodSignature="()Ljason/mas2j/MAS2JProject;" timeDelta="4108" timeBase="23934" countDelta="0" countBase="1">
          <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="agents" methodSignature="()V" timeDelta="2870" timeBase="10459" countDelta="0" countBase="1">
            <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="agent" methodSignature="()V" timeDelta="2869" timeBase="10413" countDelta="0" countBase="1">
              <node leaf="false" class="jason.mas2j.AgentParameters" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2212" timeBase="8072" countDelta="0" countBase="1">
                <node leaf="false" class="jason.mas2j.AgentParameters" methodName="setupDefault" methodSignature="()V" timeDelta="2203" timeBase="8050" countDelta="0" countBase="1">
                  <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="6" timeBase="12" countDelta="0" countBase="2"/>
                  <node leaf="false" class="jason.mas2j.ClassParameters" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="3" timeBase="7" countDelta="0" countBase="2">
                    <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                  </node>
                </node>
                <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="3" timeBase="3" countDelta="0" countBase="1"/>
              </node>
              <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="jj_consume_token" methodSignature="(I)Ljason/mas2j/parser/Token;" timeDelta="6" timeBase="35" countDelta="0" countBase="3">
                <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="5" timeBase="32" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="2" timeBase="12" countDelta="0" countBase="1">
                    <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(J)I" timeDelta="1" timeBase="12" countDelta="0" countBase="1">
                      <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJ)I" timeDelta="2" timeBase="10" countDelta="0" countBase="1"/>
                    </node>
                  </node>
                  <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                  <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="1" timeBase="6" countDelta="0" countBase="1">
                    <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="1">
                      <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                    </node>
                    <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                  </node>
                  <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-5" timeBase="10" countDelta="0" countBase="8"/>
                </node>
              </node>
              <node leaf="false" class="jason.mas2j.AgentParameters" methodName="setOptions" methodSignature="(Ljava/util/Map;)V" timeDelta="5" timeBase="28" countDelta="0" countBase="1">
                <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="3" timeBase="15" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.util.Map" methodName="keySet" methodSignature="()Ljava/util/Set;" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.util.Set" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="1" timeBase="5" countDelta="0" countBase="1"/>
              </node>
              <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="ASoptions" methodSignature="()Ljava/util/Map;" timeDelta="2" timeBase="4" countDelta="0" countBase="1">
                <node leaf="true" class="java.util.HashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
              </node>
              <node leaf="false" class="jason.mas2j.AgentParameters" methodName="setSource" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="62" countDelta="0" countBase="1">
                <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                <node leaf="true" class="java.net.URI" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-2" timeBase="28" countDelta="0" countBase="1"/>
              </node>
              <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="classDef" methodSignature="()Ljason/mas2j/ClassParameters;" timeDelta="1" timeBase="43" countDelta="0" countBase="1">
                <node leaf="true" class="jason.mas2j.parser.mas2j" methodName="jj_consume_token" methodSignature="(I)Ljason/mas2j/parser/Token;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="38" countDelta="0" countBase="2">
                  <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="1" timeBase="38" countDelta="0" countBase="2">
                    <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="1" timeBase="7" countDelta="0" countBase="2">
                      <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                      <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                    </node>
                    <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="23" countDelta="0" countBase="2"/>
                    <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                  </node>
                </node>
              </node>
              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="5" countDelta="0" countBase="2"/>
              <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="34" countDelta="0" countBase="1">
                <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="-1" timeBase="33" countDelta="0" countBase="1">
                  <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="2" timeBase="2" countDelta="0" countBase="2"/>
                  <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="24" countDelta="0" countBase="1"/>
                </node>
              </node>
            </node>
            <node leaf="false" class="jason.mas2j.MAS2JProject" methodName="initAgMap" methodSignature="()V" timeDelta="1" timeBase="1" countDelta="0" countBase="1">
              <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
            </node>
          </node>
          <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="jj_consume_token" methodSignature="(I)Ljason/mas2j/parser/Token;" timeDelta="331" timeBase="2643" countDelta="0" countBase="4">
            <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="321" timeBase="2628" countDelta="0" countBase="3">
              <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="209" timeBase="2376" countDelta="0" countBase="10">
                <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="199" timeBase="2357" countDelta="0" countBase="10">
                  <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="FillBuff" methodSignature="()V" timeDelta="3" timeBase="94" countDelta="0" countBase="1">
                    <node leaf="true" class="java.io.Reader" methodName="read" methodSignature="([CII)I" timeDelta="3" timeBase="92" countDelta="0" countBase="1"/>
                  </node>
                  <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="8"/>
                </node>
              </node>
              <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="89" timeBase="182" countDelta="0" countBase="4">
                <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="73" timeBase="124" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="59" timeBase="46" countDelta="0" countBase="29">
                    <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="14" timeBase="17" countDelta="0" countBase="58"/>
                  </node>
                  <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjAddStates" methodSignature="(II)V" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                  <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjCheckNAddStates" methodSignature="(II)V" timeDelta="1" timeBase="3" countDelta="0" countBase="2">
                    <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="6"/>
                  </node>
                </node>
                <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(J)I" timeDelta="9" timeBase="52" countDelta="0" countBase="2">
                  <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJ)I" timeDelta="5" timeBase="47" countDelta="0" countBase="2">
                    <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjStartNfa_0" methodSignature="(IJ)I" timeDelta="-1" timeBase="36" countDelta="0" countBase="1">
                      <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-3" timeBase="33" countDelta="0" countBase="1">
                        <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="2" timeBase="4" countDelta="0" countBase="16"/>
                        <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="7" countDelta="0" countBase="8">
                          <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="0" countDelta="8" countBase="0"/>
                        </node>
                      </node>
                    </node>
                  </node>
                  <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="2" countDelta="0" countBase="2">
                    <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                  </node>
                </node>
                <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
              </node>
              <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="11" timeBase="40" countDelta="0" countBase="3">
                <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="4" timeBase="8" countDelta="0" countBase="1">
                  <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="1" timeBase="5" countDelta="0" countBase="1"/>
                </node>
                <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                <node leaf="false" class="jason.mas2j.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/mas2j/parser/Token;" timeDelta="2" timeBase="9" countDelta="0" countBase="3">
                  <node leaf="true" class="jason.mas2j.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="2" timeBase="4" countDelta="0" countBase="3"/>
                </node>
                <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
              </node>
              <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="3" timeBase="0" countDelta="6" countBase="0"/>
            </node>
          </node>
          <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="sourcepath" methodSignature="()V" timeDelta="283" timeBase="3460" countDelta="0" countBase="1">
            <node leaf="false" class="jason.mas2j.MAS2JProject" methodName="addSourcePath" methodSignature="(Ljava/lang/String;)V" timeDelta="293" timeBase="3337" countDelta="0" countBase="1">
              <node leaf="false" class="jason.runtime.SourcePath" methodName="addPath" methodSignature="(Ljava/lang/String;)V" timeDelta="292" timeBase="3335" countDelta="0" countBase="1">
                <node leaf="true" class="java.lang.String" methodName="replaceAll" methodSignature="(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;" timeDelta="282" timeBase="3300" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.util.List" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="4" timeBase="5" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="3" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="2" countDelta="0" countBase="2"/>
                <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                <node leaf="true" class="java.lang.String" methodName="substring" methodSignature="(II)Ljava/lang/String;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.lang.String" methodName="startsWith" methodSignature="(Ljava/lang/String;)Z" timeDelta="-2" timeBase="3" countDelta="0" countBase="7"/>
              </node>
            </node>
            <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="11" timeBase="29" countDelta="0" countBase="1">
              <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="10" timeBase="28" countDelta="0" countBase="1">
                <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="7" timeBase="20" countDelta="0" countBase="3">
                  <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="2" timeBase="14" countDelta="0" countBase="3">
                    <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-2" timeBase="5" countDelta="0" countBase="3"/>
                  </node>
                </node>
                <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="2" timeBase="4" countDelta="0" countBase="1">
                  <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                  <node leaf="false" class="jason.mas2j.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/mas2j/parser/Token;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                    <node leaf="true" class="jason.mas2j.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                  </node>
                </node>
              </node>
            </node>
            <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="jj_consume_token" methodSignature="(I)Ljason/mas2j/parser/Token;" timeDelta="-19" timeBase="85" countDelta="0" countBase="4">
              <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="-20" timeBase="84" countDelta="0" countBase="3">
                <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="4" timeBase="10" countDelta="0" countBase="3">
                  <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="4" timeBase="2" countDelta="0" countBase="3"/>
                  <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="3"/>
                  <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                  <node leaf="false" class="jason.mas2j.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/mas2j/parser/Token;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3">
                    <node leaf="true" class="jason.mas2j.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                  </node>
                </node>
                <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-23" timeBase="60" countDelta="0" countBase="3">
                  <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                  <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-22" timeBase="57" countDelta="0" countBase="1">
                    <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjCheckNAddStates" methodSignature="(II)V" timeDelta="-5" timeBase="23" countDelta="0" countBase="13">
                      <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-5" timeBase="11" countDelta="0" countBase="39"/>
                    </node>
                    <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-7" timeBase="18" countDelta="0" countBase="13">
                      <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-3" timeBase="7" countDelta="0" countBase="13"/>
                    </node>
                  </node>
                </node>
              </node>
            </node>
          </node>
          <node leaf="false" class="jason.mas2j.MAS2JProject" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="158" timeBase="1568" countDelta="0" countBase="1">
            <node leaf="false" class="jason.mas2j.ClassParameters" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="5" timeBase="14" countDelta="0" countBase="1">
              <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
            </node>
            <node leaf="false" class="jason.runtime.SourcePath" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="1">
              <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
            </node>
            <node leaf="true" class="java.util.HashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
          </node>
          <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="infra" methodSignature="()V" timeDelta="13" timeBase="143" countDelta="0" countBase="1">
            <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="7" timeBase="60" countDelta="0" countBase="1">
              <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="6" timeBase="59" countDelta="0" countBase="1">
                <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="6" timeBase="43" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(J)I" timeDelta="6" timeBase="42" countDelta="0" countBase="1">
                    <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJ)I" timeDelta="7" timeBase="40" countDelta="0" countBase="1">
                      <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa3_0" methodSignature="(JJ)I" timeDelta="5" timeBase="37" countDelta="0" countBase="1">
                        <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa4_0" methodSignature="(JJ)I" timeDelta="4" timeBase="34" countDelta="0" countBase="1">
                          <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="3" timeBase="2" countDelta="0" countBase="1">
                            <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="2" timeBase="1" countDelta="0" countBase="1"/>
                          </node>
                          <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa5_0" methodSignature="(JJ)I" timeDelta="1" timeBase="28" countDelta="0" countBase="1">
                            <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                          </node>
                        </node>
                      </node>
                      <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                    </node>
                  </node>
                </node>
                <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="9" countDelta="0" countBase="9">
                  <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="4" countDelta="0" countBase="9">
                    <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-2" timeBase="2" countDelta="-9" countBase="9"/>
                  </node>
                </node>
                <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
              </node>
            </node>
            <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="classDef" methodSignature="()Ljason/mas2j/ClassParameters;" timeDelta="6" timeBase="69" countDelta="0" countBase="1">
              <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="3" timeBase="59" countDelta="0" countBase="2">
                <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="2" timeBase="58" countDelta="0" countBase="2">
                  <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="4" timeBase="37" countDelta="0" countBase="2">
                    <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="1" timeBase="16" countDelta="0" countBase="1">
                      <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="3" timeBase="1" countDelta="0" countBase="10"/>
                      <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjCheckNAddStates" methodSignature="(II)V" timeDelta="1" timeBase="1" countDelta="0" countBase="1">
                        <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                      </node>
                      <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-5" timeBase="9" countDelta="0" countBase="11">
                        <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-5" timeBase="5" countDelta="-11" countBase="11"/>
                      </node>
                    </node>
                    <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(J)I" timeDelta="1" timeBase="19" countDelta="0" countBase="1">
                      <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJ)I" timeDelta="2" timeBase="17" countDelta="0" countBase="1">
                        <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa3_0" methodSignature="(JJ)I" timeDelta="2" timeBase="16" countDelta="0" countBase="1">
                          <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa4_0" methodSignature="(JJ)I" timeDelta="1" timeBase="15" countDelta="0" countBase="1">
                            <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa5_0" methodSignature="(JJ)I" timeDelta="2" timeBase="13" countDelta="0" countBase="1">
                              <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="3" timeBase="2" countDelta="0" countBase="1">
                                <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                              </node>
                              <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa6_0" methodSignature="(JJ)I" timeDelta="1" timeBase="9" countDelta="0" countBase="1">
                                <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa7_0" methodSignature="(JJ)I" timeDelta="1" timeBase="8" countDelta="0" countBase="1">
                                  <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjMoveStringLiteralDfa8_0" methodSignature="(JJ)I" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                                </node>
                              </node>
                            </node>
                            <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                          </node>
                          <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                        </node>
                      </node>
                      <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                    </node>
                  </node>
                  <node leaf="false" class="jason.mas2j.parser.mas2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/mas2j/parser/Token;" timeDelta="1" timeBase="8" countDelta="0" countBase="2">
                    <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                    <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                  </node>
                  <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                </node>
              </node>
              <node leaf="true" class="jason.mas2j.parser.mas2j" methodName="jj_consume_token" methodSignature="(I)Ljason/mas2j/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
            </node>
            <node leaf="true" class="jason.mas2j.MAS2JProject" methodName="setInfrastructure" methodSignature="(Ljason/mas2j/ClassParameters;)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
          </node>
          <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="environment" methodSignature="()V" timeDelta="1" timeBase="168" countDelta="0" countBase="1">
            <node leaf="true" class="jason.mas2j.MAS2JProject" methodName="setEnvClass" methodSignature="(Ljason/mas2j/ClassParameters;)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
          </node>
          <node leaf="true" class="jason.mas2j.MAS2JProject" methodName="setSocName" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
          <node leaf="false" class="jason.mas2j.MAS2JProject" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-3" timeBase="103" countDelta="0" countBase="1">
            <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="2" timeBase="77" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="-4" timeBase="15" countDelta="0" countBase="1"/>
          </node>
        </node>
        <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;)V" timeDelta="1299" timeBase="9593" countDelta="0" countBase="1">
          <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;Ljava/lang/String;)V" timeDelta="1298" timeBase="9588" countDelta="0" countBase="1">
            <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;Ljava/lang/String;II)V" timeDelta="14" timeBase="70" countDelta="0" countBase="1">
              <node leaf="false" class="jason.mas2j.parser.SimpleCharStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;Ljava/lang/String;III)V" timeDelta="9" timeBase="62" countDelta="0" countBase="1">
                <node leaf="true" class="jason.mas2j.parser.SimpleCharStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/Reader;III)V" timeDelta="4" timeBase="34" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.io.InputStreamReader" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;)V" timeDelta="4" timeBase="24" countDelta="0" countBase="1"/>
              </node>
            </node>
            <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="2" timeBase="33" countDelta="0" countBase="1"/>
            <node leaf="true" class="jason.mas2j.parser.Token" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="8" countDelta="0" countBase="1"/>
            <node leaf="true" class="jason.mas2j.parser.mas2jTokenManager" methodName="&lt;init&gt;" methodSignature="(Ljason/mas2j/parser/SimpleCharStream;)V" timeDelta="1" timeBase="11" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
          </node>
        </node>
        <node leaf="false" class="jason.asSyntax.directives.DirectiveProcessor" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="1098" timeBase="13677" countDelta="0" countBase="1">
          <node leaf="false" class="jason.asSyntax.directives.DirectiveProcessor" methodName="registerDirective" methodSignature="(Ljava/lang/String;Ljava/lang/Class;)V" timeDelta="20" timeBase="61" countDelta="0" countBase="12">
            <node leaf="true" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="6" timeBase="24" countDelta="0" countBase="12"/>
          </node>
          <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="10" timeBase="52" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="3" timeBase="8" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.util.HashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
        </node>
        <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="createButtons" methodSignature="()V" timeDelta="227" timeBase="10896" countDelta="0" countBase="1">
          <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="createStopButton" methodSignature="()V" timeDelta="467" timeBase="1498" countDelta="0" countBase="1">
            <node leaf="true" class="javax.swing.JButton" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;Ljavax/swing/Icon;)V" timeDelta="154" timeBase="655" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.Class" methodName="getResource" methodSignature="(Ljava/lang/String;)Ljava/net/URL;" timeDelta="120" timeBase="154" countDelta="0" countBase="1"/>
            <node leaf="true" class="javax.swing.ImageIcon" methodName="&lt;init&gt;" methodSignature="(Ljava/net/URL;)V" timeDelta="25" timeBase="77" countDelta="0" countBase="1"/>
            <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="addButton" methodSignature="(Ljavax/swing/JButton;)V" timeDelta="24" timeBase="78" countDelta="0" countBase="1">
              <node leaf="true" class="javax.swing.JPanel" methodName="revalidate" methodSignature="()V" timeDelta="17" timeBase="32" countDelta="0" countBase="1"/>
              <node leaf="true" class="javax.swing.JPanel" methodName="add" methodSignature="(Ljava/awt/Component;)Ljava/awt/Component;" timeDelta="7" timeBase="46" countDelta="0" countBase="1"/>
            </node>
            <node leaf="true" class="javax.swing.JButton" methodName="addActionListener" methodSignature="(Ljava/awt/event/ActionListener;)V" timeDelta="2" timeBase="7" countDelta="0" countBase="1"/>
            <node leaf="true" class="jason.infra.centralised.RunCentralisedMAS$6" methodName="&lt;init&gt;" methodSignature="(Ljason/infra/centralised/RunCentralisedMAS;)V" timeDelta="1" timeBase="8" countDelta="0" countBase="1"/>
            <node leaf="true" class="jason.runtime.MASConsoleGUI" methodName="get" methodSignature="()Ljason/runtime/MASConsoleGUI;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
          </node>
          <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="createPauseButton" methodSignature="()V" timeDelta="367" timeBase="953" countDelta="0" countBase="1">
            <node leaf="true" class="javax.swing.JButton" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;Ljavax/swing/Icon;)V" timeDelta="62" timeBase="136" countDelta="0" countBase="1"/>
            <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="addButton" methodSignature="(Ljavax/swing/JButton;)V" timeDelta="42" timeBase="73" countDelta="0" countBase="1">
              <node leaf="true" class="javax.swing.JPanel" methodName="add" methodSignature="(Ljava/awt/Component;)Ljava/awt/Component;" timeDelta="26" timeBase="49" countDelta="0" countBase="1"/>
              <node leaf="true" class="javax.swing.JPanel" methodName="revalidate" methodSignature="()V" timeDelta="15" timeBase="22" countDelta="0" countBase="1"/>
            </node>
            <node leaf="true" class="java.lang.Class" methodName="getResource" methodSignature="(Ljava/lang/String;)Ljava/net/URL;" timeDelta="18" timeBase="142" countDelta="0" countBase="1"/>
            <node leaf="true" class="javax.swing.ImageIcon" methodName="&lt;init&gt;" methodSignature="(Ljava/net/URL;)V" timeDelta="15" timeBase="51" countDelta="0" countBase="1"/>
            <node leaf="true" class="jason.infra.centralised.RunCentralisedMAS$5" methodName="&lt;init&gt;" methodSignature="(Ljason/infra/centralised/RunCentralisedMAS;Ljavax/swing/JButton;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="1"/>
            <node leaf="true" class="jason.runtime.MASConsoleGUI" methodName="get" methodSignature="()Ljason/runtime/MASConsoleGUI;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
            <node leaf="true" class="javax.swing.JButton" methodName="addActionListener" methodSignature="(Ljava/awt/event/ActionListener;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
          </node>
          <node leaf="true" class="javax.swing.JButton" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;Ljavax/swing/Icon;)V" timeDelta="295" timeBase="570" countDelta="0" countBase="4"/>
          <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="createNewReplAgButton" methodSignature="()V" timeDelta="279" timeBase="1669" countDelta="0" countBase="1">
            <node leaf="true" class="javax.swing.JButton" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;Ljavax/swing/Icon;)V" timeDelta="29" timeBase="129" countDelta="0" countBase="1"/>
            <node leaf="true" class="javax.swing.ImageIcon" methodName="&lt;init&gt;" methodSignature="(Ljava/net/URL;)V" timeDelta="9" timeBase="34" countDelta="0" countBase="1"/>
            <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="addButton" methodSignature="(Ljavax/swing/JButton;)V" timeDelta="6" timeBase="75" countDelta="0" countBase="1">
              <node leaf="true" class="javax.swing.JPanel" methodName="revalidate" methodSignature="()V" timeDelta="5" timeBase="25" countDelta="0" countBase="1"/>
              <node leaf="true" class="javax.swing.JPanel" methodName="add" methodSignature="(Ljava/awt/Component;)Ljava/awt/Component;" timeDelta="2" timeBase="48" countDelta="0" countBase="1"/>
            </node>
            <node leaf="true" class="jason.infra.centralised.RunCentralisedMAS$7" methodName="&lt;init&gt;" methodSignature="(Ljason/infra/centralised/RunCentralisedMAS;Ljavax/swing/JButton;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="1"/>
            <node leaf="true" class="javax.swing.JButton" methodName="addActionListener" methodSignature="(Ljava/awt/event/ActionListener;)V" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.Class" methodName="getResource" methodSignature="(Ljava/lang/String;)Ljava/net/URL;" timeDelta="-5" timeBase="272" countDelta="0" countBase="1"/>
          </node>
          <node leaf="true" class="javax.swing.ImageIcon" methodName="&lt;init&gt;" methodSignature="(Ljava/net/URL;)V" timeDelta="97" timeBase="219" countDelta="0" countBase="4"/>
          <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="addButton" methodSignature="(Ljavax/swing/JButton;)V" timeDelta="95" timeBase="303" countDelta="0" countBase="4">
            <node leaf="true" class="javax.swing.JPanel" methodName="add" methodSignature="(Ljava/awt/Component;)Ljava/awt/Component;" timeDelta="66" timeBase="198" countDelta="0" countBase="4"/>
            <node leaf="true" class="javax.swing.JPanel" methodName="revalidate" methodSignature="()V" timeDelta="27" timeBase="98" countDelta="0" countBase="4"/>
          </node>
          <node leaf="true" class="javax.swing.JButton" methodName="addActionListener" methodSignature="(Ljava/awt/event/ActionListener;)V" timeDelta="2" timeBase="17" countDelta="0" countBase="4"/>
          <node leaf="true" class="jason.infra.centralised.RunCentralisedMAS$1" methodName="&lt;init&gt;" methodSignature="(Ljason/infra/centralised/RunCentralisedMAS;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="1"/>
          <node leaf="true" class="jason.infra.centralised.RunCentralisedMAS$2" methodName="&lt;init&gt;" methodSignature="(Ljason/infra/centralised/RunCentralisedMAS;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="1"/>
          <node leaf="true" class="jason.infra.centralised.RunCentralisedMAS$3" methodName="&lt;init&gt;" methodSignature="(Ljason/infra/centralised/RunCentralisedMAS;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="1"/>
          <node leaf="true" class="jason.infra.centralised.RunCentralisedMAS$4" methodName="&lt;init&gt;" methodSignature="(Ljason/infra/centralised/RunCentralisedMAS;)V" timeDelta="1" timeBase="11" countDelta="0" countBase="1"/>
          <node leaf="true" class="jason.runtime.MASConsoleGUI" methodName="get" methodSignature="()Ljason/runtime/MASConsoleGUI;" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
          <node leaf="true" class="java.lang.Class" methodName="getResource" methodSignature="(Ljava/lang/String;)Ljava/net/URL;" timeDelta="-2225" timeBase="3196" countDelta="0" countBase="4"/>
        </node>
        <node leaf="false" class="jason.mas2j.MAS2JProject" methodName="fixAgentsSrc" methodSignature="()V" timeDelta="139" timeBase="3059" countDelta="0" countBase="1">
          <node leaf="false" class="jason.runtime.SourcePath" methodName="fixPath" methodSignature="(Ljava/lang/String;)Ljava/lang/String;" timeDelta="101" timeBase="635" countDelta="0" countBase="1">
            <node leaf="true" class="java.lang.String" methodName="replaceAll" methodSignature="(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;" timeDelta="52" timeBase="281" countDelta="0" countBase="1"/>
            <node leaf="false" class="jason.runtime.SourcePath" methodName="testURLSrc" methodSignature="(Ljava/lang/String;)Z" timeDelta="25" timeBase="271" countDelta="0" countBase="2">
              <node leaf="true" class="java.net.URL" methodName="openStream" methodSignature="()Ljava/io/InputStream;" timeDelta="26" timeBase="216" countDelta="0" countBase="2"/>
              <node leaf="true" class="java.net.URL" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="3" timeBase="45" countDelta="0" countBase="2"/>
              <node leaf="true" class="java.lang.String" methodName="startsWith" methodSignature="(Ljava/lang/String;)Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
            </node>
            <node leaf="true" class="java.lang.String" methodName="substring" methodSignature="(I)Ljava/lang/String;" timeDelta="11" timeBase="5" countDelta="0" countBase="1"/>
            <node leaf="false" class="jason.runtime.SourcePath" methodName="getPaths" methodSignature="()Ljava/util/List;" timeDelta="1" timeBase="22" countDelta="0" countBase="1">
              <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
              <node leaf="true" class="java.util.List" methodName="isEmpty" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.lang.String" methodName="startsWith" methodSignature="(Ljava/lang/String;)Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
            </node>
            <node leaf="true" class="java.io.File" methodName="exists" methodSignature="()Z" timeDelta="1" timeBase="22" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.String" methodName="startsWith" methodSignature="(Ljava/lang/String;)Z" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
            <node leaf="true" class="java.util.List" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
            <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
            <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
          </node>
          <node leaf="false" class="jason.mas2j.AgentParameters" methodName="setSource" methodSignature="(Ljava/lang/String;)V" timeDelta="10" timeBase="16" countDelta="0" countBase="1">
            <node leaf="true" class="java.net.URI" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="14" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.String" methodName="startsWith" methodSignature="(Ljava/lang/String;)Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
          </node>
          <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="10" timeBase="2" countDelta="0" countBase="2"/>
          <node leaf="true" class="java.util.List" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="3" timeBase="4" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="3" countDelta="0" countBase="1"/>
        </node>
        <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="setAsDefaultOut" methodSignature="()V" timeDelta="121" timeBase="1584" countDelta="0" countBase="1">
          <node leaf="false" class="jason.runtime.OutputStreamAdapter" methodName="&lt;init&gt;" methodSignature="(Ljason/runtime/MASConsoleGUI;Ljavax/swing/JTextArea;)V" timeDelta="2" timeBase="57" countDelta="0" countBase="1">
            <node leaf="true" class="java.io.PrintStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/OutputStream;)V" timeDelta="1" timeBase="41" countDelta="0" countBase="1"/>
          </node>
          <node leaf="false" class="jason.runtime.OutputStreamAdapter" methodName="setAsDefaultOut" methodSignature="()V" timeDelta="-1" timeBase="12" countDelta="0" countBase="1">
            <node leaf="true" class="java.lang.System" methodName="setOut" methodSignature="(Ljava/io/PrintStream;)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="1"/>
          </node>
        </node>
        <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="56" timeBase="2402" countDelta="0" countBase="2"/>
        <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="setTitle" methodSignature="(Ljava/lang/String;)V" timeDelta="51" timeBase="147" countDelta="0" countBase="1">
          <node leaf="true" class="javax.swing.JFrame" methodName="setTitle" methodSignature="(Ljava/lang/String;)V" timeDelta="50" timeBase="146" countDelta="0" countBase="1"/>
        </node>
        <node leaf="false" class="jason.util.Config" methodName="get" methodSignature="()Ljason/util/Config;" timeDelta="39" timeBase="806" countDelta="0" countBase="1">
          <node leaf="false" class="jason.util.Config" methodName="get" methodSignature="(Z)Ljason/util/Config;" timeDelta="38" timeBase="805" countDelta="0" countBase="1">
            <node leaf="false" class="jason.util.Config" methodName="load" methodSignature="()Z" timeDelta="38" timeBase="698" countDelta="0" countBase="1">
              <node leaf="true" class="java.util.Properties" methodName="load" methodSignature="(Ljava/io/InputStream;)V" timeDelta="23" timeBase="172" countDelta="0" countBase="1"/>
              <node leaf="false" class="jason.util.Config" methodName="getUserConfFile" methodSignature="()Ljava/io/File;" timeDelta="17" timeBase="65" countDelta="0" countBase="1">
                <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="3" timeBase="4" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.lang.System" methodName="getProperties" methodSignature="()Ljava/util/Properties;" timeDelta="2" timeBase="5" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.io.File" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="7" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/Object;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="5" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="5" countDelta="0" countBase="1"/>
              </node>
              <node leaf="true" class="java.io.File" methodName="exists" methodSignature="()Z" timeDelta="10" timeBase="119" countDelta="0" countBase="2"/>
              <node leaf="true" class="jason.util.Config" methodName="getLocalConfFile" methodSignature="()Ljava/io/File;" timeDelta="6" timeBase="25" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.io.FileInputStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/File;)V" timeDelta="-18" timeBase="304" countDelta="0" countBase="1"/>
            </node>
            <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="5" timeBase="15" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.reflect.Constructor" methodName="newInstance" methodSignature="([Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="2" timeBase="38" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.Class" methodName="getConstructor" methodSignature="([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" timeDelta="1" timeBase="21" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.Class" methodName="forName" methodSignature="(Ljava/lang/String;)Ljava/lang/Class;" timeDelta="-1" timeBase="9" countDelta="0" countBase="1"/>
          </node>
        </node>
        <node leaf="false" class="jason.asSyntax.directives.DirectiveProcessor" methodName="getDirective" methodSignature="(Ljava/lang/String;)Ljason/asSyntax/directives/Directive;" timeDelta="11" timeBase="465" countDelta="0" countBase="1">
          <node leaf="false" class="java.lang.reflect.Constructor" methodName="newInstance" methodSignature="([Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="19" timeBase="93" countDelta="0" countBase="1">
            <node leaf="false" class="jason.asSyntax.directives.Include" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="15" timeBase="56" countDelta="0" countBase="1">
              <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="19" timeBase="39" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="10" countDelta="0" countBase="1"/>
            </node>
            <node leaf="true" class="jason.asSyntax.directives.DefaultDirective" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
          </node>
          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="5" timeBase="6" countDelta="0" countBase="2"/>
          <node leaf="true" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.lang.Class" methodName="getConstructor" methodSignature="([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" timeDelta="-15" timeBase="348" countDelta="0" countBase="1"/>
        </node>
        <node leaf="false" class="jason.runtime.SourcePath" methodName="fixPath" methodSignature="(Ljava/lang/String;)Ljava/lang/String;" timeDelta="9" timeBase="133" countDelta="0" countBase="1">
          <node leaf="false" class="jason.runtime.SourcePath" methodName="testURLSrc" methodSignature="(Ljava/lang/String;)Z" timeDelta="6" timeBase="73" countDelta="0" countBase="1">
            <node leaf="true" class="java.net.URL" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="6" timeBase="66" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.String" methodName="startsWith" methodSignature="(Ljava/lang/String;)Z" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
          </node>
          <node leaf="true" class="java.io.File" methodName="exists" methodSignature="()Z" timeDelta="2" timeBase="25" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.io.File" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="11" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="5" countDelta="0" countBase="2"/>
        </node>
        <node leaf="false" class="jason.mas2j.MAS2JProject" methodName="registerDirectives" methodSignature="()V" timeDelta="6" timeBase="13" countDelta="0" countBase="1">
          <node leaf="true" class="java.util.Map" methodName="keySet" methodSignature="()Ljava/util/Set;" timeDelta="3" timeBase="6" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.util.Set" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="2" timeBase="4" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
        </node>
        <node leaf="true" class="jason.mas2j.MAS2JProject" methodName="getSocName" methodSignature="()Ljava/lang/String;" timeDelta="5" timeBase="1" countDelta="0" countBase="1"/>
        <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="5" timeBase="2" countDelta="0" countBase="1"/>
        <node leaf="true" class="jason.runtime.MASConsoleGUI" methodName="hasConsole" methodSignature="()Z" timeDelta="2" timeBase="2" countDelta="0" countBase="2"/>
        <node leaf="true" class="java.io.PrintStream" methodName="flush" methodSignature="()V" timeDelta="2" timeBase="21" countDelta="0" countBase="2"/>
        <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="3" countDelta="0" countBase="1"/>
        <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="parseArgs" methodSignature="([Ljava/lang/String;)Ljava/util/Map;" timeDelta="1" timeBase="46" countDelta="0" countBase="1">
          <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="6" countDelta="0" countBase="3"/>
        </node>
        <node leaf="true" class="jason.mas2j.MAS2JProject" methodName="setupDefault" methodSignature="()V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
        <node leaf="false" class="jason.mas2j.parser.mas2j" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="1" timeBase="16" countDelta="0" countBase="1">
          <node leaf="true" class="jason.mas2j.parser.mas2j" methodName="jj_la1_init_1" methodSignature="()V" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
          <node leaf="true" class="jason.mas2j.parser.mas2j" methodName="jj_la1_init_0" methodSignature="()V" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
        </node>
        <node leaf="true" class="jason.runtime.SourcePath" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="20" countDelta="0" countBase="1"/>
        <node leaf="true" class="jason.runtime.SourcePath" methodName="addPath" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
        <node leaf="true" class="java.lang.Boolean" methodName="valueOf" methodSignature="(Z)Ljava/lang/Boolean;" timeDelta="1" timeBase="26" countDelta="0" countBase="1"/>
        <node leaf="true" class="java.net.URL" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="16" countDelta="0" countBase="1"/>
        <node leaf="true" class="jason.runtime.MASConsoleGUI" methodName="get" methodSignature="()Ljason/runtime/MASConsoleGUI;" timeDelta="-1" timeBase="3" countDelta="0" countBase="3"/>
        <node leaf="true" class="jason.runtime.MASConsoleGUI" methodName="getFrame" methodSignature="()Ljavax/swing/JFrame;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
        <node leaf="true" class="jason.util.Config" methodName="getJasonJar" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="14" countDelta="0" countBase="1"/>
        <node leaf="true" class="java.lang.Object" methodName="getClass" methodSignature="()Ljava/lang/Class;" timeDelta="-1" timeBase="5" countDelta="0" countBase="1"/>
        <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-2" timeBase="11" countDelta="0" countBase="1"/>
        <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-8" timeBase="14" countDelta="0" countBase="1"/>
        <node leaf="true" class="java.net.URL" methodName="openStream" methodSignature="()Ljava/io/InputStream;" timeDelta="-13" timeBase="576" countDelta="0" countBase="1"/>
        <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="setupLogger" methodSignature="(Ljava/lang/String;)V" timeDelta="-24" timeBase="2397" countDelta="0" countBase="1">
          <node leaf="true" class="java.util.logging.LogManager" methodName="readConfiguration" methodSignature="(Ljava/io/InputStream;)V" timeDelta="5" timeBase="357" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.io.File" methodName="exists" methodSignature="()Z" timeDelta="1" timeBase="32" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.io.File" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="1"/>
          <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="getDefaultLogProperties" methodSignature="()Ljava/io/InputStream;" timeDelta="-29" timeBase="1966" countDelta="0" countBase="1">
            <node leaf="true" class="java.lang.Class" methodName="getResource" methodSignature="(Ljava/lang/String;)Ljava/net/URL;" timeDelta="-7" timeBase="449" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.net.URL" methodName="openStream" methodSignature="()Ljava/io/InputStream;" timeDelta="-24" timeBase="1512" countDelta="0" countBase="1"/>
          </node>
        </node>
        <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-30" timeBase="30" countDelta="-1" countBase="1"/>
        <node leaf="false" class="java.util.logging.Logger" methodName="getHandlers" methodSignature="()[Ljava/util/logging/Handler;" timeDelta="-17015" timeBase="419317" countDelta="0" countBase="1">
          <node leaf="false" class="jason.runtime.MASConsoleLogHandler" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="4" timeBase="32" countDelta="0" countBase="1">
            <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="3" timeBase="5" countDelta="0" countBase="6"/>
            <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="4" countDelta="0" countBase="3"/>
            <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="3" countDelta="0" countBase="3"/>
            <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="6" countDelta="0" countBase="3"/>
          </node>
          <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="2" timeBase="26" countDelta="0" countBase="1">
            <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="3" timeBase="2" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="5" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="4" countDelta="0" countBase="2"/>
          </node>
          <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="get" methodSignature="()Ljason/runtime/MASConsoleGUI;" timeDelta="-17066" timeBase="413300" countDelta="0" countBase="1">
            <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-17066" timeBase="413297" countDelta="0" countBase="1">
              <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="initButtonPanel" methodSignature="()V" timeDelta="146" timeBase="6928" countDelta="0" countBase="1">
                <node leaf="true" class="javax.swing.ImageIcon" methodName="&lt;init&gt;" methodSignature="(Ljava/net/URL;)V" timeDelta="81" timeBase="3934" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.lang.Class" methodName="getResource" methodSignature="(Ljava/lang/String;)Ljava/net/URL;" timeDelta="9" timeBase="247" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.JButton" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;Ljavax/swing/Icon;)V" timeDelta="4" timeBase="150" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.JButton" methodName="addActionListener" methodSignature="(Ljava/awt/event/ActionListener;)V" timeDelta="1" timeBase="7" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.JPanel" methodName="setLayout" methodSignature="(Ljava/awt/LayoutManager;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.awt.Container" methodName="add" methodSignature="(Ljava/lang/String;Ljava/awt/Component;)Ljava/awt/Component;" timeDelta="-1" timeBase="14" countDelta="0" countBase="1"/>
                <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="addButton" methodSignature="(Ljavax/swing/JButton;)V" timeDelta="-6" timeBase="90" countDelta="0" countBase="1">
                  <node leaf="true" class="javax.swing.JPanel" methodName="add" methodSignature="(Ljava/awt/Component;)Ljava/awt/Component;" timeDelta="1" timeBase="17" countDelta="0" countBase="1"/>
                  <node leaf="true" class="javax.swing.JPanel" methodName="revalidate" methodSignature="()V" timeDelta="-6" timeBase="67" countDelta="0" countBase="1"/>
                </node>
              </node>
              <node leaf="true" class="java.util.HashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
              <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="initMainPanel" methodSignature="()V" timeDelta="-16" timeBase="129" countDelta="0" countBase="1">
                <node leaf="true" class="java.util.logging.LogManager" methodName="getLogManager" methodSignature="()Ljava/util/logging/LogManager;" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.awt.BorderLayout" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.util.logging.LogManager" methodName="getProperty" methodSignature="(Ljava/lang/String;)Ljava/lang/String;" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.awt.Container" methodName="add" methodSignature="(Ljava/lang/String;Ljava/awt/Component;)Ljava/awt/Component;" timeDelta="-3" timeBase="27" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.JPanel" methodName="&lt;init&gt;" methodSignature="(Ljava/awt/LayoutManager;)V" timeDelta="-13" timeBase="77" countDelta="0" countBase="1"/>
              </node>
              <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="initOutput" methodSignature="()V" timeDelta="-230" timeBase="38025" countDelta="0" countBase="1">
                <node leaf="true" class="javax.swing.JTextArea" methodName="getCaret" methodSignature="()Ljavax/swing/text/Caret;" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.JTextArea" methodName="setEditable" methodSignature="(Z)V" timeDelta="-1" timeBase="137" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.JPanel" methodName="add" methodSignature="(Ljava/lang/String;Ljava/awt/Component;)Ljava/awt/Component;" timeDelta="-2" timeBase="34" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.text.DefaultCaret" methodName="setUpdatePolicy" methodSignature="(I)V" timeDelta="-10" timeBase="14" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.JTextArea" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-93" timeBase="23863" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.JScrollPane" methodName="&lt;init&gt;" methodSignature="(Ljava/awt/Component;)V" timeDelta="-173" timeBase="12186" countDelta="0" countBase="1"/>
              </node>
              <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="initFrame" methodSignature="(Ljava/lang/String;)V" timeDelta="-16967" timeBase="368195" countDelta="0" countBase="1">
                <node leaf="true" class="java.awt.BorderLayout" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="5" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.JFrame" methodName="getContentPane" methodSignature="()Ljava/awt/Container;" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.awt.Container" methodName="setLayout" methodSignature="(Ljava/awt/LayoutManager;)V" timeDelta="-2" timeBase="16" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.JFrame" methodName="setBounds" methodSignature="(IIII)V" timeDelta="-3" timeBase="40" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.JFrame" methodName="addWindowListener" methodSignature="(Ljava/awt/event/WindowListener;)V" timeDelta="-71" timeBase="1085" countDelta="0" countBase="1"/>
                <node leaf="true" class="javax.swing.JFrame" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-16291" timeBase="283094" countDelta="0" countBase="1"/>
              </node>
            </node>
          </node>
        </node>
      </node>
      <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="659" timeBase="5272" countDelta="0" countBase="1">
        <node leaf="false" class="jason.infra.centralised.CentralisedRuntimeServices" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="34" timeBase="75" countDelta="0" countBase="1">
          <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="29" timeBase="58" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="4" timeBase="8" countDelta="0" countBase="1"/>
        </node>
        <node leaf="false" class="jason.infra.centralised.CentralisedRuntimeServices" methodName="&lt;init&gt;" methodSignature="(Ljason/infra/centralised/BaseCentralisedMAS;)V" timeDelta="12" timeBase="86" countDelta="0" countBase="1">
          <node leaf="false" class="jason.infra.centralised.BaseRuntimeServices" methodName="&lt;init&gt;" methodSignature="(Ljason/infra/centralised/BaseCentralisedMAS;)V" timeDelta="4" timeBase="82" countDelta="0" countBase="1">
            <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="4" countDelta="0" countBase="1"/>
          </node>
        </node>
        <node leaf="true" class="jason.runtime.RuntimeServicesFactory" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-1" timeBase="5" countDelta="0" countBase="1"/>
        <node leaf="true" class="jason.runtime.RuntimeServicesFactory" methodName="set" methodSignature="(Ljason/runtime/RuntimeServices;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
        <node leaf="false" class="jason.infra.centralised.BaseCentralisedMAS" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-6" timeBase="50" countDelta="0" countBase="1">
          <node leaf="true" class="javax.management.NotificationBroadcasterSupport" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="14" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.util.concurrent.ConcurrentHashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-4" timeBase="9" countDelta="0" countBase="1"/>
        </node>
      </node>
      <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="start" methodSignature="()V" timeDelta="15" timeBase="204" countDelta="0" countBase="1">
        <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="startAgs" methodSignature="()V" timeDelta="12" timeBase="198" countDelta="0" countBase="1">
          <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="createAgsThreads" methodSignature="()V" timeDelta="5" timeBase="182" countDelta="0" countBase="1">
            <node leaf="true" class="java.util.Collection" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="8" timeBase="15" countDelta="0" countBase="2"/>
            <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="3" timeBase="1" countDelta="0" countBase="4"/>
            <node leaf="true" class="java.util.Map" methodName="values" methodSignature="()Ljava/util/Collection;" timeDelta="3" timeBase="4" countDelta="0" countBase="2"/>
            <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="setThread" methodSignature="(Ljava/lang/Thread;)V" timeDelta="2" timeBase="8" countDelta="0" countBase="1">
              <node leaf="true" class="java.lang.Thread" methodName="setName" methodSignature="(Ljava/lang/String;)V" timeDelta="2" timeBase="7" countDelta="0" countBase="1"/>
            </node>
            <node leaf="true" class="java.lang.Thread" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/Runnable;)V" timeDelta="2" timeBase="17" countDelta="0" countBase="1"/>
            <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="getCyclesSense" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
            <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="setCyclesSense" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
            <node leaf="true" class="jason.mas2j.ClassParameters" methodName="hasParameters" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
            <node leaf="true" class="jason.mas2j.MAS2JProject" methodName="getInfrastructure" methodSignature="()Ljason/mas2j/ClassParameters;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
            <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="9" countDelta="0" countBase="2"/>
            <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="getCyclesDeliberate" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
            <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="setControlInfraTier" methodSignature="(Ljason/infra/centralised/CentralisedExecutionControl;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
            <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="setCyclesAct" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
            <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="setCyclesDeliberate" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
            <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="startThread" methodSignature="()V" timeDelta="-2" timeBase="87" countDelta="0" countBase="1">
              <node leaf="true" class="java.lang.Thread" methodName="start" methodSignature="()V" timeDelta="-1" timeBase="85" countDelta="0" countBase="1"/>
            </node>
          </node>
          <node leaf="false" class="jason.mas2j.ClassParameters" methodName="hasParameter" methodSignature="(Ljava/lang/String;)Z" timeDelta="5" timeBase="5" countDelta="0" countBase="4">
            <node leaf="true" class="java.util.List" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="5" timeBase="3" countDelta="0" countBase="4"/>
          </node>
          <node leaf="true" class="jason.mas2j.MAS2JProject" methodName="getInfrastructure" methodSignature="()Ljason/mas2j/ClassParameters;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
        </node>
        <node leaf="true" class="jason.infra.centralised.RunCentralisedMAS" methodName="startSyncMode" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
      </node>
      <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="waitEnd" methodSignature="()V" timeDelta="-243" timeBase="3213" countDelta="0" countBase="1">
        <node leaf="true" class="java.lang.Thread" methodName="sleep" methodSignature="(J)V" timeDelta="22" timeBase="177" countDelta="-1" countBase="33"/>
        <node leaf="true" class="java.io.File" methodName="exists" methodSignature="()Z" timeDelta="-298" timeBase="2835" countDelta="-1" countBase="34"/>
      </node>
      <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="create" methodSignature="()V" timeDelta="-697" timeBase="284868" countDelta="0" countBase="1">
        <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="createEnvironment" methodSignature="()V" timeDelta="292" timeBase="22620" countDelta="0" countBase="1">
          <node leaf="false" class="jason.infra.centralised.CentralisedEnvironment" methodName="&lt;init&gt;" methodSignature="(Ljason/mas2j/ClassParameters;Ljason/infra/centralised/BaseCentralisedMAS;)V" timeDelta="53" timeBase="20927" countDelta="0" countBase="1">
            <node leaf="false" class="java.lang.reflect.Constructor" methodName="newInstance" methodSignature="([Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="262" timeBase="8949" countDelta="0" countBase="1">
              <node leaf="false" class="jason.environment.Environment" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="276" timeBase="8866" countDelta="0" countBase="1">
                <node leaf="false" class="jason.environment.Environment" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="275" timeBase="8861" countDelta="0" countBase="1">
                  <node leaf="true" class="java.util.concurrent.Executors" methodName="newFixedThreadPool" methodSignature="(I)Ljava/util/concurrent/ExecutorService;" timeDelta="235" timeBase="8484" countDelta="0" countBase="1"/>
                  <node leaf="true" class="java.util.Collections" methodName="synchronizedList" methodSignature="(Ljava/util/List;)Ljava/util/List;" timeDelta="34" timeBase="333" countDelta="0" countBase="1"/>
                  <node leaf="true" class="java.util.Collections" methodName="synchronizedSet" methodSignature="(Ljava/util/Set;)Ljava/util/Set;" timeDelta="1" timeBase="7" countDelta="0" countBase="1"/>
                  <node leaf="true" class="java.util.HashSet" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                  <node leaf="true" class="java.util.concurrent.ConcurrentHashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                </node>
              </node>
              <node leaf="false" class="jason.environment.Environment" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-15" timeBase="57" countDelta="0" countBase="1">
                <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-15" timeBase="47" countDelta="0" countBase="1"/>
              </node>
            </node>
            <node leaf="false" class="jason.mas2j.ClassParameters" methodName="getParametersArray" methodSignature="()[Ljava/lang/String;" timeDelta="4" timeBase="15" countDelta="0" countBase="1">
              <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.util.List" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
            </node>
            <node leaf="true" class="jason.infra.centralised.BaseCentralisedMAS" methodName="getRunner" methodSignature="()Ljason/infra/centralised/BaseCentralisedMAS;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.Class" methodName="getConstructor" methodSignature="([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" timeDelta="-3" timeBase="592" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.lang.ClassLoader" methodName="loadClass" methodSignature="(Ljava/lang/String;)Ljava/lang/Class;" timeDelta="-6" timeBase="1214" countDelta="0" countBase="1"/>
            <node leaf="false" class="DebugEnvironment" methodName="init" methodSignature="([Ljava/lang/String;)V" timeDelta="-219" timeBase="10116" countDelta="0" countBase="1">
              <node leaf="true" class="java.io.BufferedReader" methodName="readLine" methodSignature="()Ljava/lang/String;" timeDelta="20" timeBase="369" countDelta="0" countBase="51"/>
              <node leaf="true" class="java.io.FileInputStream" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="12" timeBase="90" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="10" timeBase="87" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.util.Queue" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="7" timeBase="24" countDelta="0" countBase="50"/>
              <node leaf="true" class="java.io.BufferedReader" methodName="close" methodSignature="()V" timeDelta="1" timeBase="21" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="12" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.util.logging.LogManager" methodName="readConfiguration" methodSignature="(Ljava/io/InputStream;)V" timeDelta="-4" timeBase="496" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.io.BufferedReader" methodName="&lt;init&gt;" methodSignature="(Ljava/io/Reader;)V" timeDelta="-5" timeBase="18" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.io.FileReader" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-68" timeBase="145" countDelta="0" countBase="1"/>
              <node leaf="false" class="java.util.logging.Logger" methodName="info" methodSignature="(Ljava/lang/String;)V" timeDelta="-176" timeBase="8714" countDelta="0" countBase="1">
                <node leaf="false" class="jason.runtime.MASConsoleLogFormatter" methodName="format" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="-26" timeBase="35" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.runtime.MASConsoleLogFormatter" methodName="getAgName" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                    <node leaf="true" class="java.lang.String" methodName="lastIndexOf" methodSignature="(I)I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                  </node>
                  <node leaf="true" class="java.util.logging.LogRecord" methodName="getMessage" methodSignature="()Ljava/lang/String;" timeDelta="-24" timeBase="24" countDelta="-1" countBase="1"/>
                </node>
                <node leaf="false" class="jason.runtime.MASConsoleLogHandler" methodName="publish" methodSignature="(Ljava/util/logging/LogRecord;)V" timeDelta="-150" timeBase="5157" countDelta="0" countBase="1">
                  <node leaf="false" class="java.util.logging.Formatter" methodName="format" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="2" timeBase="27" countDelta="0" countBase="1">
                    <node leaf="false" class="jason.runtime.MASConsoleLogFormatter" methodName="format" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="2" timeBase="24" countDelta="0" countBase="1">
                      <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="3" timeBase="3" countDelta="0" countBase="3"/>
                      <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                      <node leaf="true" class="java.util.logging.LogRecord" methodName="getThrown" methodSignature="()Ljava/lang/Throwable;" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                    </node>
                  </node>
                  <node leaf="false" class="jason.runtime.MASConsoleLogFormatter" methodName="getAgName" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="1" timeBase="22" countDelta="0" countBase="1">
                    <node leaf="true" class="java.util.logging.LogRecord" methodName="getLoggerName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="17" countDelta="0" countBase="1"/>
                    <node leaf="true" class="java.lang.String" methodName="lastIndexOf" methodSignature="(I)I" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                  </node>
                  <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="append" methodSignature="(Ljava/lang/String;Ljava/lang/String;)V" timeDelta="-152" timeBase="5097" countDelta="0" countBase="1">
                    <node leaf="true" class="javax.swing.JFrame" methodName="isVisible" methodSignature="()Z" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                    <node leaf="true" class="javax.swing.JTextArea" methodName="getDocument" methodSignature="()Ljavax/swing/text/Document;" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
                    <node leaf="true" class="javax.swing.text.Document" methodName="getLength" methodSignature="()I" timeDelta="-49" timeBase="186" countDelta="0" countBase="1"/>
                    <node leaf="true" class="javax.swing.JTextArea" methodName="append" methodSignature="(Ljava/lang/String;)V" timeDelta="-103" timeBase="4897" countDelta="0" countBase="1"/>
                  </node>
                </node>
              </node>
            </node>
          </node>
          <node leaf="false" class="jason.infra.centralised.CentralisedEnvironment" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="7" timeBase="63" countDelta="0" countBase="1">
            <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="8" timeBase="50" countDelta="0" countBase="1"/>
          </node>
          <node leaf="false" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/Object;)Ljava/lang/StringBuilder;" timeDelta="4" timeBase="18" countDelta="0" countBase="1">
            <node leaf="false" class="jason.mas2j.ClassParameters" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="13" countDelta="0" countBase="1">
              <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
            </node>
          </node>
          <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="3" timeBase="9" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
          <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
          <node leaf="true" class="java.util.logging.Logger" methodName="fine" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="8" countDelta="0" countBase="1"/>
          <node leaf="true" class="jason.mas2j.MAS2JProject" methodName="getEnvClass" methodSignature="()Ljason/mas2j/ClassParameters;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
          <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
        </node>
        <node leaf="true" class="jason.infra.centralised.RunCentralisedMAS" methodName="createController" methodSignature="()V" timeDelta="3" timeBase="2" countDelta="0" countBase="1"/>
        <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="createAgs" methodSignature="()V" timeDelta="-1018" timeBase="262239" countDelta="0" countBase="1">
          <node leaf="true" class="jason.infra.centralised.BaseCentralisedMAS" methodName="addAg" methodSignature="(Ljason/infra/centralised/CentralisedAgArch;)V" timeDelta="2" timeBase="13" countDelta="0" countBase="1"/>
          <node leaf="true" class="jason.asSemantics.TransitionSystem" methodName="getAg" methodSignature="()Ljason/asSemantics/Agent;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
          <node leaf="true" class="jason.infra.centralised.BaseRuntimeServices" methodName="getDefaultAgArchs" methodSignature="()Ljava/util/Collection;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
          <node leaf="false" class="jason.infra.centralised.RConf" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="1" timeBase="45" countDelta="0" countBase="1">
            <node leaf="false" class="jason.infra.centralised.RConf" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;ILjava/lang/String;)V" timeDelta="-1" timeBase="14" countDelta="0" countBase="5">
              <node leaf="true" class="java.lang.Enum" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="5"/>
            </node>
          </node>
          <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="setCyclesAct" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
          <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="setCyclesSense" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
          <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="setEnvInfraTier" methodSignature="(Ljason/infra/centralised/CentralisedEnvironment;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
          <node leaf="false" class="jason.mas2j.AgentParameters" methodName="addArchClass" methodSignature="(Ljava/util/Collection;)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="1">
            <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
          </node>
          <node leaf="true" class="jason.mas2j.AgentParameters" methodName="getBBClass" methodSignature="()Ljason/mas2j/ClassParameters;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
          <node leaf="true" class="jason.mas2j.AgentParameters" methodName="getOption" methodSignature="(Ljava/lang/String;)Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="5"/>
          <node leaf="true" class="jason.mas2j.ClassParameters" methodName="getParameter" methodSignature="(I)Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
          <node leaf="true" class="jason.runtime.RuntimeServicesFactory" methodName="get" methodSignature="()Ljason/runtime/RuntimeServices;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
          <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
          <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(I)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="4" countDelta="0" countBase="2"/>
          <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="3" countDelta="0" countBase="5"/>
          <node leaf="true" class="java.net.URI" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="5" countDelta="0" countBase="1"/>
          <node leaf="false" class="jason.infra.centralised.BaseRuntimeServices" methodName="getNewAgentName" methodSignature="(Ljava/lang/String;)Ljava/lang/String;" timeDelta="-3" timeBase="24" countDelta="0" countBase="1">
            <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="1" countDelta="0" countBase="2"/>
            <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="3" countDelta="0" countBase="4"/>
            <node leaf="false" class="jason.infra.centralised.BaseCentralisedMAS" methodName="getAg" methodSignature="(Ljava/lang/String;)Ljason/infra/centralised/CentralisedAgArch;" timeDelta="-1" timeBase="6" countDelta="0" countBase="1">
              <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="5" countDelta="0" countBase="1"/>
            </node>
          </node>
          <node leaf="false" class="jason.mas2j.AgentParameters" methodName="getAgArchClasses" methodSignature="()Ljava/util/Collection;" timeDelta="-3" timeBase="9" countDelta="0" countBase="1">
            <node leaf="true" class="java.util.List" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-2" timeBase="6" countDelta="0" countBase="1"/>
          </node>
          <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-14" timeBase="131" countDelta="0" countBase="1">
            <node leaf="true" class="jason.architecture.AgArch" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="5" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-5" timeBase="64" countDelta="0" countBase="1"/>
          </node>
          <node leaf="false" class="jason.mas2j.AgentParameters" methodName="getAsSetts" methodSignature="(ZZ)Ljason/runtime/Settings;" timeDelta="-41" timeBase="1675" countDelta="0" countBase="1">
            <node leaf="false" class="jason.runtime.Settings" methodName="addOption" methodSignature="(Ljava/lang/String;Ljava/lang/Object;)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="1">
              <node leaf="true" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="6" countDelta="0" countBase="1"/>
            </node>
            <node leaf="false" class="jason.runtime.Settings" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-6" timeBase="60" countDelta="0" countBase="1">
              <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-3" timeBase="45" countDelta="0" countBase="1"/>
            </node>
          </node>
          <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="createArchs" methodSignature="(Ljava/util/Collection;Ljava/lang/String;Ljason/mas2j/ClassParameters;Ljava/lang/String;Ljason/runtime/Settings;)V" timeDelta="-545" timeBase="252340" countDelta="0" countBase="1">
            <node leaf="false" class="jason.architecture.AgArch" methodName="createCustomArchs" methodSignature="(Ljava/util/Collection;)V" timeDelta="1" timeBase="8" countDelta="0" countBase="1">
              <node leaf="true" class="java.util.Collection" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
            </node>
            <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="setLogger" methodSignature="()V" timeDelta="1" timeBase="66" countDelta="0" countBase="1">
              <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="3" timeBase="42" countDelta="0" countBase="1"/>
              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="3" countDelta="0" countBase="3"/>
              <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
            </node>
            <node leaf="false" class="jason.asSemantics.Agent" methodName="create" methodSignature="(Ljason/architecture/AgArch;Ljava/lang/String;Ljason/mas2j/ClassParameters;Ljava/lang/String;Ljason/runtime/Settings;)Ljason/asSemantics/Agent;" timeDelta="-891" timeBase="242747" countDelta="0" countBase="1">
              <node leaf="false" class="java.lang.Class" methodName="forName" methodSignature="(Ljava/lang/String;)Ljava/lang/Class;" timeDelta="2674" timeBase="14086" countDelta="0" countBase="2">
                <node leaf="false" class="jason.bb.BeliefBase" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="2690" timeBase="12243" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="11" timeBase="240" countDelta="0" countBase="1">
                    <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="2" timeBase="24" countDelta="0" countBase="1"/>
                    <node leaf="false" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="20" countDelta="0" countBase="1">
                      <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-1" timeBase="15" countDelta="0" countBase="1">
                        <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="8" countDelta="0" countBase="1"/>
                      </node>
                    </node>
                    <node leaf="true" class="jason.asSyntax.Literal$FalseLiteral" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="10" countDelta="0" countBase="1"/>
                    <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
                    <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                  </node>
                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="7" timeBase="73" countDelta="0" countBase="1">
                    <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="3" timeBase="32" countDelta="0" countBase="1"/>
                    <node leaf="true" class="jason.util.Config" methodName="getBoolean" methodSignature="(Ljava/lang/String;)Z" timeDelta="2" timeBase="7" countDelta="0" countBase="1"/>
                    <node leaf="true" class="jason.util.Config" methodName="get" methodSignature="()Ljason/util/Config;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                    <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="7" countDelta="0" countBase="1"/>
                  </node>
                  <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="6" timeBase="47" countDelta="0" countBase="1">
                    <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="5" timeBase="31" countDelta="0" countBase="1"/>
                    <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                  </node>
                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-1" timeBase="36" countDelta="0" countBase="1">
                    <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-1" timeBase="28" countDelta="0" countBase="1"/>
                  </node>
                </node>
                <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="2" timeBase="41" countDelta="0" countBase="1">
                  <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="1" timeBase="22" countDelta="0" countBase="1"/>
                </node>
              </node>
              <node leaf="false" class="jason.asSemantics.Agent" methodName="initAg" methodSignature="()V" timeDelta="357" timeBase="47190" countDelta="0" countBase="1">
                <node leaf="false" class="jason.architecture.MindInspectorWeb" methodName="get" methodSignature="()Ljason/architecture/MindInspectorWeb;" timeDelta="347" timeBase="38612" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.architecture.MindInspectorWebImpl" methodName="startHttpServer" methodSignature="()Ljava/lang/String;" timeDelta="348" timeBase="31861" countDelta="0" countBase="1">
                    <node leaf="true" class="java.net.InetAddress" methodName="getLocalHost" methodSignature="()Ljava/net/InetAddress;" timeDelta="209" timeBase="4632" countDelta="0" countBase="1"/>
                    <node leaf="true" class="com.sun.net.httpserver.HttpServer" methodName="create" methodSignature="(Ljava/net/InetSocketAddress;I)Lcom/sun/net/httpserver/HttpServer;" timeDelta="152" timeBase="20102" countDelta="0" countBase="1"/>
                    <node leaf="true" class="jason.architecture.MindInspectorWebImpl" methodName="registerAgentsBrowserView" methodSignature="()V" timeDelta="116" timeBase="772" countDelta="0" countBase="1"/>
                    <node leaf="true" class="java.net.InetSocketAddress" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="12" timeBase="229" countDelta="0" countBase="1"/>
                    <node leaf="false" class="jason.architecture.MindInspectorWebImpl" methodName="registerAgView" methodSignature="(Ljava/lang/String;)Ljava/lang/String;" timeDelta="4" timeBase="1486" countDelta="0" countBase="1">
                      <node leaf="true" class="jason.architecture.MindInspectorWebImpl$3" methodName="&lt;init&gt;" methodSignature="(Ljason/architecture/MindInspectorWebImpl;Ljava/lang/String;)V" timeDelta="1" timeBase="9" countDelta="0" countBase="1"/>
                      <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                      <node leaf="true" class="com.sun.net.httpserver.HttpServer" methodName="createContext" methodSignature="(Ljava/lang/String;Lcom/sun/net/httpserver/HttpHandler;)Lcom/sun/net/httpserver/HttpContext;" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
                      <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-3" timeBase="4" countDelta="0" countBase="4"/>
                    </node>
                    <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="2" timeBase="5" countDelta="0" countBase="5"/>
                    <node leaf="true" class="java.net.InetAddress" methodName="getHostAddress" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="8" countDelta="0" countBase="1"/>
                    <node leaf="true" class="com.sun.net.httpserver.HttpServer" methodName="setExecutor" methodSignature="(Ljava/util/concurrent/Executor;)V" timeDelta="-1" timeBase="9" countDelta="0" countBase="1"/>
                    <node leaf="true" class="com.sun.net.httpserver.HttpServer" methodName="start" methodSignature="()V" timeDelta="-1" timeBase="78" countDelta="0" countBase="1"/>
                    <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(I)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                    <node leaf="false" class="jason.architecture.MindInspectorWebImpl" methodName="registerRootBrowserView" methodSignature="()V" timeDelta="-8" timeBase="1602" countDelta="0" countBase="1">
                      <node leaf="true" class="com.sun.net.httpserver.HttpServer" methodName="createContext" methodSignature="(Ljava/lang/String;Lcom/sun/net/httpserver/HttpHandler;)Lcom/sun/net/httpserver/HttpContext;" timeDelta="11" timeBase="662" countDelta="0" countBase="1"/>
                      <node leaf="true" class="jason.architecture.MindInspectorWebImpl$1" methodName="&lt;init&gt;" methodSignature="(Ljason/architecture/MindInspectorWebImpl;)V" timeDelta="-1" timeBase="10" countDelta="0" countBase="1"/>
                    </node>
                    <node leaf="true" class="java.util.concurrent.Executors" methodName="newCachedThreadPool" methodSignature="()Ljava/util/concurrent/ExecutorService;" timeDelta="-34" timeBase="785" countDelta="0" countBase="1"/>
                    <node leaf="false" class="java.io.PrintStream" methodName="println" methodSignature="(Ljava/lang/String;)V" timeDelta="-93" timeBase="1564" countDelta="0" countBase="1">
                      <node leaf="false" class="jason.runtime.OutputStreamAdapter" methodName="println" methodSignature="(Ljava/lang/String;)V" timeDelta="-92" timeBase="1558" countDelta="0" countBase="1">
                        <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                        <node leaf="false" class="jason.runtime.OutputStreamAdapter" methodName="append" methodSignature="(Ljava/lang/String;)V" timeDelta="-91" timeBase="1546" countDelta="0" countBase="1">
                          <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="append" methodSignature="(Ljava/lang/String;)V" timeDelta="-90" timeBase="1542" countDelta="0" countBase="1">
                            <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="append" methodSignature="(Ljava/lang/String;Ljava/lang/String;)V" timeDelta="-91" timeBase="1540" countDelta="0" countBase="1">
                              <node leaf="true" class="javax.swing.JTextArea" methodName="append" methodSignature="(Ljava/lang/String;)V" timeDelta="-90" timeBase="1531" countDelta="0" countBase="1"/>
                            </node>
                          </node>
                        </node>
                      </node>
                    </node>
                  </node>
                  <node leaf="true" class="java.lang.Class" methodName="forName" methodSignature="(Ljava/lang/String;)Ljava/lang/Class;" timeDelta="71" timeBase="5759" countDelta="0" countBase="1"/>
                  <node leaf="true" class="java.lang.Class" methodName="getConstructor" methodSignature="([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" timeDelta="14" timeBase="17" countDelta="0" countBase="1"/>
                  <node leaf="true" class="jason.util.Config" methodName="getMindInspectorWebServerClassName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                  <node leaf="true" class="java.lang.reflect.Constructor" methodName="newInstance" methodSignature="([Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="50" countDelta="0" countBase="1"/>
                  <node leaf="true" class="jason.runtime.RuntimeServicesFactory" methodName="get" methodSignature="()Ljason/runtime/RuntimeServices;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                  <node leaf="false" class="jason.architecture.MindInspectorWebImpl" methodName="registerCentRunner" methodSignature="(Ljason/runtime/RuntimeServices;)V" timeDelta="-89" timeBase="898" countDelta="0" countBase="1">
                    <node leaf="true" class="com.sun.net.httpserver.HttpServer" methodName="createContext" methodSignature="(Ljava/lang/String;Lcom/sun/net/httpserver/HttpHandler;)Lcom/sun/net/httpserver/HttpContext;" timeDelta="1" timeBase="7" countDelta="0" countBase="1"/>
                  </node>
                </node>
                <node leaf="false" class="jason.asSemantics.Agent" methodName="initDefaultFunctions" methodSignature="()V" timeDelta="32" timeBase="1180" countDelta="0" countBase="1">
                  <node leaf="true" class="java.util.HashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                  <node leaf="false" class="jason.asSemantics.Agent" methodName="addFunction" methodSignature="(Ljava/lang/Class;Z)V" timeDelta="-6" timeBase="159" countDelta="0" countBase="1">
                    <node leaf="false" class="java.lang.reflect.Constructor" methodName="newInstance" methodSignature="([Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-2" timeBase="22" countDelta="0" countBase="1">
                      <node leaf="true" class="jason.asSemantics.DefaultArithFunction" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
                    </node>
                    <node leaf="true" class="java.lang.Class" methodName="getConstructor" methodSignature="([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" timeDelta="-4" timeBase="122" countDelta="0" countBase="1"/>
                  </node>
                </node>
                <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="4" timeBase="24" countDelta="0" countBase="1">
                  <node leaf="true" class="jason.util.Config" methodName="getKqmlFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                </node>
                <node leaf="true" class="jason.architecture.MindInspectorWeb" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
                <node leaf="false" class="jason.architecture.MindInspectorWebImpl" methodName="registerAg" methodSignature="(Ljason/asSemantics/Agent;)V" timeDelta="-1" timeBase="43" countDelta="0" countBase="1">
                  <node leaf="true" class="jason.asSemantics.Agent" methodName="getTS" methodSignature="()Ljason/asSemantics/TransitionSystem;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                  <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                  <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                </node>
                <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-49" timeBase="5779" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.asSyntax.Trigger" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Trigger$TEOperator;Ljason/asSyntax/Trigger$TEType;Ljason/asSyntax/Literal;)V" timeDelta="2" timeBase="29" countDelta="0" countBase="3">
                    <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="7" countDelta="0" countBase="3">
                      <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="3">
                        <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="3">
                          <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                          </node>
                        </node>
                      </node>
                    </node>
                    <node leaf="true" class="jason.asSyntax.Trigger" methodName="setTrigOp" methodSignature="(Ljason/asSyntax/Trigger$TEOperator;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="3"/>
                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                  </node>
                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="5" countDelta="0" countBase="2">
                    <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="2"/>
                  </node>
                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="17" countDelta="0" countBase="1">
                    <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="11" countDelta="0" countBase="1">
                      <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="8" countDelta="0" countBase="1"/>
                    </node>
                  </node>
                  <node leaf="false" class="jason.asSyntax.Trigger$TEType" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="1" timeBase="112" countDelta="0" countBase="1">
                    <node leaf="false" class="jason.asSyntax.Trigger$TEType$3" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="7" countDelta="0" countBase="1">
                      <node leaf="true" class="jason.asSyntax.Trigger$TEType" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;ILjason/asSyntax/Trigger$1;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                    </node>
                  </node>
                  <node leaf="false" class="jason.asSyntax.Trigger$TEOperator" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-4" timeBase="111" countDelta="0" countBase="1">
                    <node leaf="true" class="jason.asSyntax.Trigger$TEOperator$3" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
                  </node>
                  <node leaf="false" class="jason.asSyntax.Trigger" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-12" timeBase="56" countDelta="0" countBase="1">
                    <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-12" timeBase="43" countDelta="0" countBase="1"/>
                  </node>
                </node>
              </node>
              <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="&lt;init&gt;" methodSignature="(Ljason/asSemantics/Agent;Ljason/asSemantics/Circumstance;Ljason/runtime/Settings;Ljason/architecture/AgArch;)V" timeDelta="259" timeBase="6998" countDelta="0" countBase="1">
                <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="setLogger" methodSignature="(Ljason/architecture/AgArch;)V" timeDelta="17" timeBase="101" countDelta="0" countBase="1">
                  <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="9" timeBase="67" countDelta="0" countBase="1"/>
                  <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="5" timeBase="5" countDelta="0" countBase="1"/>
                  <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="3" timeBase="4" countDelta="0" countBase="3"/>
                  <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-11" timeBase="13" countDelta="0" countBase="1"/>
                </node>
                <node leaf="false" class="jason.asSemantics.TransitionSystem$State" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="5" timeBase="47" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.asSemantics.TransitionSystem$State" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="14" countDelta="0" countBase="11">
                    <node leaf="true" class="java.lang.Enum" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="5" countDelta="0" countBase="11"/>
                  </node>
                </node>
                <node leaf="false" class="jason.asSemantics.Circumstance" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="49" countDelta="0" countBase="1">
                  <node leaf="true" class="java.util.concurrent.ConcurrentLinkedQueue" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="4" timeBase="4" countDelta="0" countBase="1"/>
                  <node leaf="false" class="jason.asSemantics.Circumstance" methodName="create" methodSignature="()V" timeDelta="1" timeBase="13" countDelta="0" countBase="1">
                    <node leaf="true" class="java.util.concurrent.ConcurrentHashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="3"/>
                  </node>
                  <node leaf="false" class="jason.asSemantics.Circumstance" methodName="reset" methodSignature="()V" timeDelta="-7" timeBase="15" countDelta="0" countBase="1">
                    <node leaf="true" class="jason.asSemantics.Circumstance" methodName="resetSense" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                    <node leaf="true" class="jason.asSemantics.Circumstance" methodName="resetDeliberate" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                    <node leaf="true" class="jason.asSemantics.Circumstance" methodName="resetAct" methodSignature="()V" timeDelta="-7" timeBase="8" countDelta="0" countBase="1"/>
                  </node>
                </node>
                <node leaf="false" class="jason.asSemantics.Agent" methodName="setTS" methodSignature="(Ljason/asSemantics/TransitionSystem;)V" timeDelta="1" timeBase="56" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.asSemantics.Agent" methodName="setLogger" methodSignature="(Ljason/architecture/AgArch;)V" timeDelta="-1" timeBase="41" countDelta="0" countBase="1">
                    <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="2" timeBase="2" countDelta="0" countBase="3"/>
                    <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                    <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="getAgName" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                    <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                  </node>
                </node>
                <node leaf="true" class="jason.util.Config" methodName="getKqmlFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.util.concurrent.ConcurrentLinkedQueue" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                <node leaf="true" class="jason.asSemantics.Circumstance" methodName="setTS" methodSignature="(Ljason/asSemantics/TransitionSystem;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                <node leaf="true" class="jason.runtime.Settings" methodName="nrcbp" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
              </node>
              <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="init" methodSignature="(Ljason/asSemantics/Agent;[Ljava/lang/String;)V" timeDelta="13" timeBase="66" countDelta="0" countBase="1">
                <node leaf="true" class="java.lang.Class" methodName="getSimpleName" methodSignature="()Ljava/lang/String;" timeDelta="10" timeBase="7" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="2" timeBase="38" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="3" countDelta="0" countBase="3"/>
                <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
              </node>
              <node leaf="true" class="jason.asSemantics.Agent" methodName="setBB" methodSignature="(Ljason/bb/BeliefBase;)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
              <node leaf="true" class="jason.mas2j.ClassParameters" methodName="getClassName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
              <node leaf="true" class="java.lang.Class" methodName="getConstructor" methodSignature="([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" timeDelta="-19" timeBase="58" countDelta="0" countBase="2"/>
              <node leaf="false" class="java.lang.reflect.Constructor" methodName="newInstance" methodSignature="([Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-393" timeBase="18254" countDelta="0" countBase="2">
                <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-2" timeBase="35" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="calcHashCode" methodSignature="()I" timeDelta="-1" timeBase="7" countDelta="0" countBase="1">
                    <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                  </node>
                  <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-2" timeBase="22" countDelta="0" countBase="1"/>
                </node>
                <node leaf="false" class="SaviAgentBrain" methodName="setEventPriorities" methodSignature="()V" timeDelta="-19" timeBase="45" countDelta="0" countBase="1">
                  <node leaf="true" class="java.util.Arrays" methodName="asList" methodSignature="([Ljava/lang/Object;)Ljava/util/List;" timeDelta="-10" timeBase="27" countDelta="0" countBase="1"/>
                </node>
                <node leaf="false" class="jason.asSemantics.Agent" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-369" timeBase="18069" countDelta="0" countBase="1">
                  <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-8" timeBase="45" countDelta="0" countBase="1"/>
                  <node leaf="false" class="jason.asSemantics.Agent" methodName="checkCustomSelectOption" methodSignature="()V" timeDelta="-358" timeBase="18002" countDelta="0" countBase="1">
                    <node leaf="true" class="java.lang.Object" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="20" countDelta="0" countBase="68"/>
                    <node leaf="true" class="java.lang.Object" methodName="getClass" methodSignature="()Ljava/lang/Class;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                    <node leaf="true" class="java.lang.reflect.Method" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="6" countDelta="0" countBase="10"/>
                    <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-6" timeBase="9" countDelta="0" countBase="10"/>
                    <node leaf="true" class="java.lang.reflect.Method" methodName="getDeclaringClass" methodSignature="()Ljava/lang/Class;" timeDelta="-10" timeBase="48" countDelta="0" countBase="68"/>
                    <node leaf="true" class="java.lang.Class" methodName="getMethods" methodSignature="()[Ljava/lang/reflect/Method;" timeDelta="-303" timeBase="17849" countDelta="0" countBase="1"/>
                  </node>
                </node>
              </node>
              <node leaf="false" class="jason.asSemantics.Agent" methodName="load" methodSignature="(Ljava/lang/String;)V" timeDelta="-2885" timeBase="147520" countDelta="0" countBase="1">
                <node leaf="false" class="jason.asSemantics.Agent" methodName="fixAgInIAandFunctions" methodSignature="(Ljason/asSemantics/Agent;)V" timeDelta="243" timeBase="1230" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.asSemantics.Agent" methodName="fixAgInIAandFunctions" methodSignature="(Ljason/asSemantics/Agent;Ljason/asSyntax/Literal;)V" timeDelta="255" timeBase="1198" countDelta="0" countBase="3">
                    <node leaf="false" class="jason.asSemantics.Agent" methodName="fixAgInIAandFunctions" methodSignature="(Ljason/asSemantics/Agent;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="3">
                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="1" countDelta="0" countBase="4">
                        <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                      </node>
                      <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                    </node>
                    <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                    <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                  </node>
                  <node leaf="true" class="jason.asSyntax.PlanLibrary" methodName="getLock" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                  <node leaf="true" class="jason.asSyntax.Plan" methodName="getBody" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                  <node leaf="true" class="jason.asSyntax.Plan" methodName="getContext" methodSignature="()Ljason/asSyntax/LogicalFormula;" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                  <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-13" timeBase="13" countDelta="-2" countBase="2"/>
                </node>
                <node leaf="false" class="jason.asSemantics.Agent" methodName="addInitialBelsInBB" methodSignature="()V" timeDelta="154" timeBase="3884" countDelta="0" countBase="2">
                  <node leaf="false" class="jason.asSemantics.Agent" methodName="addInitBel" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="155" timeBase="3863" countDelta="0" countBase="4">
                    <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="add" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="160" timeBase="3435" countDelta="0" countBase="3">
                      <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="add" methodSignature="(Ljason/asSyntax/Literal;Z)Z" timeDelta="161" timeBase="3432" countDelta="0" countBase="3">
                        <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="provideBelEntry" methodSignature="(Ljason/asSyntax/Literal;)Ljason/bb/DefaultBeliefBase$BelEntry;" timeDelta="163" timeBase="1760" countDelta="0" countBase="3">
                          <node leaf="false" class="jason.bb.DefaultBeliefBase$BelEntry" methodName="&lt;init&gt;" methodSignature="(Ljason/bb/DefaultBeliefBase;)V" timeDelta="20" timeBase="843" countDelta="0" countBase="2">
                            <node leaf="true" class="java.util.concurrent.ConcurrentHashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                            <node leaf="true" class="java.util.concurrent.LinkedBlockingDeque" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="19" countDelta="0" countBase="2"/>
                          </node>
                          <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="9" timeBase="17" countDelta="0" countBase="3">
                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                            <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                          </node>
                          <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="34" countDelta="0" countBase="6">
                            <node leaf="false" class="jason.asSyntax.Atom" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="6" countDelta="0" countBase="2">
                              <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                            </node>
                          </node>
                        </node>
                        <node leaf="false" class="jason.asSyntax.Literal" methodName="copy" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="5" timeBase="577" countDelta="0" countBase="3">
                          <node leaf="false" class="jason.asSyntax.Rule" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="6" timeBase="574" countDelta="0" countBase="3">
                            <node leaf="false" class="jason.asSyntax.Rule" methodName="clone" methodSignature="()Ljason/asSyntax/Rule;" timeDelta="8" timeBase="570" countDelta="0" countBase="3">
                              <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="15" timeBase="153" countDelta="0" countBase="4">
                                <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="15" timeBase="152" countDelta="0" countBase="4">
                                  <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="14" timeBase="148" countDelta="0" countBase="4">
                                    <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="16" timeBase="144" countDelta="0" countBase="4">
                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="20" timeBase="94" countDelta="0" countBase="4">
                                        <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="8" timeBase="22" countDelta="0" countBase="5">
                                          <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="8" timeBase="18" countDelta="0" countBase="5">
                                            <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="8" timeBase="14" countDelta="0" countBase="5">
                                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="6" timeBase="13" countDelta="0" countBase="5">
                                                <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="10" countDelta="0" countBase="5">
                                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="5"/>
                                                </node>
                                              </node>
                                            </node>
                                            <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="5"/>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-2" timeBase="3" countDelta="0" countBase="5"/>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="5" countDelta="0" countBase="4">
                                          <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="1" countDelta="0" countBase="4">
                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                          </node>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="1" countDelta="0" countBase="8">
                                          <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="8" countBase="0"/>
                                        </node>
                                        <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="1" timeBase="3" countDelta="0" countBase="4"/>
                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="4">
                                          <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                        </node>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.Pred" methodName="getAnnots" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                      <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="cloneLT" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-10" timeBase="33" countDelta="0" countBase="3">
                                        <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-8" timeBase="31" countDelta="0" countBase="3">
                                          <node leaf="true" class="jason.asSyntax.Pred$1" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                          <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="7" countDelta="0" countBase="3">
                                            <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-2" timeBase="7" countDelta="0" countBase="3"/>
                                          </node>
                                          <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-8" timeBase="18" countDelta="0" countBase="3">
                                            <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-10" timeBase="18" countDelta="0" countBase="3">
                                              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-11" timeBase="17" countDelta="0" countBase="3">
                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-11" timeBase="16" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-12" timeBase="15" countDelta="0" countBase="3">
                                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="3">
                                                      <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.LogExpr" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="14" timeBase="278" countDelta="0" countBase="2">
                                <node leaf="false" class="jason.asSyntax.LogExpr" methodName="clone" methodSignature="()Ljason/asSyntax/LogicalFormula;" timeDelta="15" timeBase="275" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="18" timeBase="23" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="18" timeBase="22" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="18" timeBase="21" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="18" timeBase="21" countDelta="0" countBase="1">
                                          <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="cloneLT" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="10" countDelta="0" countBase="1"/>
                                          <node leaf="true" class="jason.asSyntax.Pred" methodName="getAnnots" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="1">
                                            <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.LogExpr" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="6" timeBase="161" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.LogExpr" methodName="clone" methodSignature="()Ljason/asSyntax/LogicalFormula;" timeDelta="7" timeBase="160" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="7" timeBase="20" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="7" timeBase="19" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="7" timeBase="18" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="6" timeBase="18" countDelta="0" countBase="1">
                                              <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="6" timeBase="1" countDelta="0" countBase="1"/>
                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="16" countDelta="0" countBase="1">
                                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                                <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="11" countDelta="0" countBase="2">
                                                  <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="7" countDelta="0" countBase="2">
                                                    <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="1" timeBase="6" countDelta="0" countBase="2">
                                                      <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="5" countDelta="0" countBase="2">
                                                        <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2">
                                        <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.LogExpr" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-3" timeBase="130" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.LogExpr" methodName="clone" methodSignature="()Ljason/asSyntax/LogicalFormula;" timeDelta="-3" timeBase="130" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.LogExpr" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/LogicalFormula;Ljason/asSyntax/LogExpr$LogicalOp;Ljason/asSyntax/LogicalFormula;)V" timeDelta="-1" timeBase="10" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.BinaryStructure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljava/lang/String;Ljason/asSyntax/Term;)V" timeDelta="1" timeBase="6" countDelta="0" countBase="1">
                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="addTerm" methodSignature="(Ljason/asSyntax/Term;)V" timeDelta="2" timeBase="1" countDelta="0" countBase="2">
                                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                              <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                                            </node>
                                          </node>
                                          <node leaf="false" class="jason.asSyntax.RelExpr" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="115" countDelta="0" countBase="2">
                                            <node leaf="false" class="jason.asSyntax.RelExpr" methodName="clone" methodSignature="()Ljason/asSyntax/LogicalFormula;" timeDelta="-4" timeBase="113" countDelta="0" countBase="2">
                                              <node leaf="true" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="9" countDelta="0" countBase="2"/>
                                              <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-3" timeBase="73" countDelta="0" countBase="2">
                                                <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="71" countDelta="0" countBase="2">
                                                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="4" countDelta="0" countBase="2"/>
                                                  <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-2" timeBase="55" countDelta="0" countBase="2">
                                                    <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-2" timeBase="55" countDelta="0" countBase="2">
                                                      <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-2" timeBase="37" countDelta="0" countBase="2">
                                                        <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="36" countDelta="0" countBase="2">
                                                          <node leaf="true" class="jason.asSyntax.UnnamedVar" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                                                          <node leaf="true" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="5" countDelta="0" countBase="1"/>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="2" timeBase="1" countDelta="0" countBase="4">
                                    <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="18" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="18" countDelta="0" countBase="1"/>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="isUnary" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="2"/>
                                  <node leaf="false" class="jason.asSyntax.RelExpr" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-11" timeBase="47" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.RelExpr" methodName="clone" methodSignature="()Ljason/asSyntax/LogicalFormula;" timeDelta="-11" timeBase="46" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="1" countDelta="0" countBase="2">
                                        <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
                                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-12" timeBase="20" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-12" timeBase="20" countDelta="0" countBase="1">
                                          <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                          <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-11" timeBase="18" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-12" timeBase="18" countDelta="0" countBase="1">
                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-12" timeBase="17" countDelta="0" countBase="1">
                                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-12" timeBase="13" countDelta="0" countBase="1"/>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                              <node leaf="false" class="jason.asSyntax.Rule" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;Ljason/asSyntax/LogicalFormula;)V" timeDelta="-24" timeBase="124" countDelta="0" countBase="3">
                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isInternalAction" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isRule" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-22" timeBase="117" countDelta="0" countBase="3">
                                  <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                  <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-23" timeBase="113" countDelta="0" countBase="3">
                                    <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-23" timeBase="113" countDelta="0" countBase="3">
                                      <node leaf="false" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="3">
                                        <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isEmpty" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.Pred" methodName="getAnnots" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-9" timeBase="75" countDelta="0" countBase="3">
                                        <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="2" timeBase="36" countDelta="0" countBase="3">
                                          <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="36" countDelta="0" countBase="3">
                                            <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="5" countDelta="0" countBase="3"/>
                                            <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="7" countDelta="0" countBase="1"/>
                                          </node>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="2" timeBase="2" countDelta="0" countBase="6">
                                          <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-1" timeBase="1" countDelta="-6" countBase="6"/>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                          <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                        </node>
                                        <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                        <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="6"/>
                                        <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-14" timeBase="26" countDelta="0" countBase="3">
                                          <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-9" timeBase="20" countDelta="0" countBase="3">
                                            <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-9" timeBase="18" countDelta="0" countBase="3">
                                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-4" timeBase="12" countDelta="0" countBase="3">
                                                <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="3"/>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="cloneLT" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-11" timeBase="29" countDelta="0" countBase="3">
                                        <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-11" timeBase="28" countDelta="0" countBase="3">
                                          <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="7" countDelta="0" countBase="3">
                                            <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-2" timeBase="6" countDelta="0" countBase="3"/>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.Pred$1" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                          <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-10" timeBase="19" countDelta="0" countBase="3">
                                            <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-11" timeBase="18" countDelta="0" countBase="3">
                                              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-11" timeBase="16" countDelta="0" countBase="3">
                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="3">
                                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="3"/>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                        </node>
                        <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="contains" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSyntax/Literal;" timeDelta="2" timeBase="78" countDelta="0" countBase="3">
                          <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="21" countDelta="0" countBase="5">
                            <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="5" countDelta="0" countBase="1">
                              <node leaf="true" class="java.lang.Object" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.Atom" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="7" countDelta="0" countBase="2">
                              <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                              <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                            </node>
                            <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                            <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="3">
                              <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                            </node>
                          </node>
                          <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-1" timeBase="9" countDelta="0" countBase="2">
                            <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="2">
                              <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="-2" timeBase="4" countDelta="0" countBase="2">
                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                              </node>
                            </node>
                          </node>
                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-2" timeBase="2" countDelta="-6" countBase="6"/>
                        </node>
                        <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="canBeAddedInBB" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                        <node leaf="false" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="(Ljason/asSyntax/Term;)Z" timeDelta="-2" timeBase="72" countDelta="0" countBase="3">
                          <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                          <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="listTermIterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-1" timeBase="5" countDelta="0" countBase="3"/>
                          <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                            <node leaf="true" class="jason.asSyntax.ListTermImpl$ListTermIterator" methodName="hasNext" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                          </node>
                          <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljava/lang/Object;)I" timeDelta="-2" timeBase="53" countDelta="0" countBase="3">
                            <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljason/asSyntax/Term;)I" timeDelta="1" timeBase="49" countDelta="0" countBase="3">
                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="6"/>
                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                              <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="2" countDelta="0" countBase="6"/>
                              <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljava/lang/Object;)I" timeDelta="-1" timeBase="14" countDelta="0" countBase="3">
                                <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljason/asSyntax/Term;)I" timeDelta="-2" timeBase="14" countDelta="0" countBase="3">
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isNumeric" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                  <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                  <node leaf="true" class="java.lang.String" methodName="compareTo" methodSignature="(Ljava/lang/String;)I" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                </node>
                              </node>
                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isList" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-9" countBase="9"/>
                            </node>
                          </node>
                        </node>
                        <node leaf="false" class="jason.bb.DefaultBeliefBase$BelEntry" methodName="add" methodSignature="(Ljason/asSyntax/Literal;Z)V" timeDelta="-19" timeBase="924" countDelta="0" countBase="3">
                          <node leaf="true" class="java.util.Deque" methodName="addFirst" methodSignature="(Ljava/lang/Object;)V" timeDelta="-11" timeBase="145" countDelta="0" countBase="3"/>
                          <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-17" timeBase="218" countDelta="0" countBase="3">
                            <node leaf="false" class="jason.bb.StructureWrapperForLiteral" methodName="hashCode" methodSignature="()I" timeDelta="-17" timeBase="206" countDelta="0" countBase="3">
                              <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-16" timeBase="201" countDelta="0" countBase="3">
                                <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                <node leaf="false" class="jason.asSyntax.Rule" methodName="calcHashCode" methodSignature="()I" timeDelta="-15" timeBase="197" countDelta="0" countBase="3">
                                  <node leaf="false" class="java.lang.Object" methodName="hashCode" methodSignature="()I" timeDelta="-4" timeBase="136" countDelta="0" countBase="3">
                                    <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-6" timeBase="134" countDelta="0" countBase="3">
                                      <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="calcHashCode" methodSignature="()I" timeDelta="-4" timeBase="131" countDelta="0" countBase="2">
                                        <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                        <node leaf="false" class="java.lang.Object" methodName="hashCode" methodSignature="()I" timeDelta="-4" timeBase="120" countDelta="0" countBase="4">
                                          <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-5" timeBase="119" countDelta="0" countBase="4">
                                            <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="calcHashCode" methodSignature="()I" timeDelta="1" timeBase="11" countDelta="0" countBase="1">
                                              <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                            </node>
                                            <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                            <node leaf="false" class="jason.asSyntax.Structure" methodName="calcHashCode" methodSignature="()I" timeDelta="-4" timeBase="103" countDelta="0" countBase="2">
                                              <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                              <node leaf="false" class="jason.asSyntax.Atom" methodName="calcHashCode" methodSignature="()I" timeDelta="-1" timeBase="5" countDelta="0" countBase="2">
                                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="3" countDelta="0" countBase="4"/>
                                              <node leaf="false" class="java.lang.Object" methodName="hashCode" methodSignature="()I" timeDelta="-3" timeBase="92" countDelta="0" countBase="4">
                                                <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-5" timeBase="92" countDelta="0" countBase="4">
                                                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="calcHashCode" methodSignature="()I" timeDelta="1" timeBase="20" countDelta="0" countBase="2">
                                                    <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="calcHashCode" methodSignature="()I" timeDelta="-2" timeBase="19" countDelta="0" countBase="2">
                                                      <node leaf="false" class="java.lang.Object" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="8" countDelta="0" countBase="3">
                                                        <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="7" countDelta="0" countBase="3">
                                                          <node leaf="false" class="jason.asSyntax.VarTerm" methodName="calcHashCode" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="2">
                                                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                          </node>
                                                          <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                        </node>
                                                      </node>
                                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                      <node leaf="false" class="jason.asSyntax.Atom" methodName="calcHashCode" methodSignature="()I" timeDelta="-1" timeBase="5" countDelta="0" countBase="2">
                                                        <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="2">
                                                        <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                      </node>
                                                    </node>
                                                  </node>
                                                  <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                  <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="calcHashCode" methodSignature="()I" timeDelta="-3" timeBase="65" countDelta="0" countBase="1">
                                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="calcHashCode" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="1">
                                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                    </node>
                                                    <node leaf="false" class="java.lang.Object" methodName="hashCode" methodSignature="()I" timeDelta="-2" timeBase="59" countDelta="0" countBase="2">
                                                      <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="58" countDelta="0" countBase="2">
                                                        <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="calcHashCode" methodSignature="()I" timeDelta="-1" timeBase="56" countDelta="0" countBase="2">
                                                          <node leaf="false" class="jason.asSyntax.Atom" methodName="calcHashCode" methodSignature="()I" timeDelta="-1" timeBase="5" countDelta="0" countBase="2">
                                                            <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                          </node>
                                                          <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                                          <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                          <node leaf="false" class="java.lang.Object" methodName="hashCode" methodSignature="()I" timeDelta="-2" timeBase="46" countDelta="0" countBase="4">
                                                            <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-2" timeBase="45" countDelta="0" countBase="4">
                                                              <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                              <node leaf="false" class="jason.asSyntax.VarTerm" methodName="calcHashCode" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="2">
                                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                              </node>
                                                              <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                              <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="calcHashCode" methodSignature="()I" timeDelta="-2" timeBase="38" countDelta="0" countBase="2"/>
                                                            </node>
                                                          </node>
                                                        </node>
                                                        <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="calcHashCode" methodSignature="()I" timeDelta="-11" timeBase="55" countDelta="0" countBase="3">
                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="calcHashCode" methodSignature="()I" timeDelta="-11" timeBase="52" countDelta="0" countBase="3">
                                      <node leaf="false" class="jason.asSyntax.Atom" methodName="calcHashCode" methodSignature="()I" timeDelta="-1" timeBase="8" countDelta="0" countBase="3">
                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-2" timeBase="5" countDelta="0" countBase="6">
                                        <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-1" timeBase="1" countDelta="-6" countBase="6"/>
                                      </node>
                                      <node leaf="false" class="java.lang.Object" methodName="hashCode" methodSignature="()I" timeDelta="-9" timeBase="32" countDelta="0" countBase="6">
                                        <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-11" timeBase="30" countDelta="0" countBase="6">
                                          <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-6" countBase="6"/>
                                          <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-2" timeBase="4" countDelta="0" countBase="5"/>
                                          <node leaf="false" class="jason.asSyntax.VarTerm" methodName="calcHashCode" methodSignature="()I" timeDelta="-6" timeBase="9" countDelta="0" countBase="3">
                                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                            <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="-4" timeBase="5" countDelta="0" countBase="3"/>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                        </node>
                      </node>
                    </node>
                    <node leaf="false" class="jason.asSyntax.Pred" methodName="addAnnot" methodSignature="(Ljason/asSyntax/Term;)Z" timeDelta="17" timeBase="63" countDelta="0" countBase="4">
                      <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="insert" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="15" timeBase="9" countDelta="0" countBase="4">
                        <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljason/asSyntax/Term;)V" timeDelta="2" timeBase="7" countDelta="0" countBase="4"/>
                      </node>
                      <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="3" timeBase="3" countDelta="0" countBase="4"/>
                      <node leaf="true" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljava/lang/Object;)I" timeDelta="1" timeBase="3" countDelta="0" countBase="4"/>
                      <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="listTermIterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-1" timeBase="5" countDelta="0" countBase="4"/>
                      <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-1" timeBase="7" countDelta="0" countBase="4"/>
                      <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="29" countDelta="0" countBase="4">
                        <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="26" countDelta="0" countBase="4">
                          <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="13" countDelta="0" countBase="4">
                            <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="9" countDelta="0" countBase="4">
                              <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-3" timeBase="3" countDelta="-4" countBase="4"/>
                            </node>
                          </node>
                        </node>
                      </node>
                    </node>
                    <node leaf="true" class="jason.asSemantics.Agent" methodName="getBB" methodSignature="()Ljason/bb/BeliefBase;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isRule" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                    <node leaf="true" class="jason.asSyntax.Pred" methodName="hasSource" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                    <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="capply" methodSignature="(Ljason/asSemantics/Unifier;)Ljason/asSyntax/Term;" timeDelta="-3" timeBase="72" countDelta="0" countBase="1">
                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;Ljason/asSemantics/Unifier;)V" timeDelta="-2" timeBase="71" countDelta="0" countBase="1">
                        <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                        <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;Ljason/asSemantics/Unifier;)V" timeDelta="-2" timeBase="68" countDelta="0" countBase="1">
                          <node leaf="true" class="jason.asSyntax.Pred" methodName="getAnnots" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                          <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;Ljason/asSemantics/Unifier;)V" timeDelta="-2" timeBase="26" countDelta="0" countBase="1">
                            <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                          </node>
                        </node>
                      </node>
                    </node>
                    <node leaf="false" class="jason.asSemantics.Agent" methodName="addBel" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-12" timeBase="251" countDelta="0" countBase="1">
                      <node leaf="false" class="jason.asSyntax.Pred" methodName="hasSource" methodSignature="()Z" timeDelta="-1" timeBase="14" countDelta="0" countBase="1">
                        <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                        <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                          <node leaf="true" class="jason.asSyntax.ListTermImpl$3" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/ListTermImpl;Ljason/asSyntax/ListTerm;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                        </node>
                        <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                          <node leaf="false" class="jason.asSyntax.ListTermImpl$3" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                            <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isList" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                          </node>
                        </node>
                      </node>
                      <node leaf="false" class="jason.asSemantics.Agent" methodName="brf" methodSignature="(Ljason/asSyntax/Literal;Ljason/asSyntax/Literal;Ljason/asSemantics/Intention;)[Ljava/util/List;" timeDelta="-4" timeBase="139" countDelta="0" countBase="1">
                        <node leaf="false" class="jason.asSemantics.Agent" methodName="brf" methodSignature="(Ljason/asSyntax/Literal;Ljason/asSyntax/Literal;Ljason/asSemantics/Intention;Z)[Ljava/util/List;" timeDelta="-3" timeBase="136" countDelta="0" countBase="1">
                          <node leaf="true" class="java.util.logging.Logger" methodName="isLoggable" methodSignature="(Ljava/util/logging/Level;)Z" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                          <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="add" methodSignature="(ILjason/asSyntax/Literal;)Z" timeDelta="-4" timeBase="113" countDelta="0" countBase="1">
                            <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="add" methodSignature="(Ljason/asSyntax/Literal;Z)Z" timeDelta="-3" timeBase="111" countDelta="0" countBase="1">
                              <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="provideBelEntry" methodSignature="(Ljason/asSyntax/Literal;)Ljason/bb/DefaultBeliefBase$BelEntry;" timeDelta="6" timeBase="18" countDelta="0" countBase="1">
                                <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="6" timeBase="5" countDelta="0" countBase="1">
                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="7" timeBase="0" countDelta="1" countBase="0"/>
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                </node>
                                <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-2" timeBase="12" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="6" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="1">
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="isAtom" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                      <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                    </node>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                </node>
                              </node>
                              <node leaf="true" class="jason.bb.DefaultBeliefBase$BelEntry" methodName="add" methodSignature="(Ljason/asSyntax/Literal;Z)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="1"/>
                              <node leaf="false" class="jason.asSyntax.Literal" methodName="copy" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-3" timeBase="27" countDelta="0" countBase="1">
                                <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-2" timeBase="26" countDelta="0" countBase="1">
                                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="26" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                    <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="25" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="23" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="14" countDelta="0" countBase="1">
                                          <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                          <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="(Ljason/asSyntax/Term;)Z" timeDelta="-3" timeBase="23" countDelta="0" countBase="1">
                                <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="listTermIterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                <node leaf="false" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1">
                                  <node leaf="false" class="jason.asSyntax.ListTermImpl$2" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="1" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.ListTermImpl$2" methodName="next" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljava/lang/Object;)I" timeDelta="-2" timeBase="16" countDelta="0" countBase="1">
                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljason/asSyntax/Term;)I" timeDelta="-2" timeBase="16" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isList" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                    <node leaf="true" class="jason.asSyntax.Literal" methodName="negated" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                    <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="contains" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSyntax/Literal;" timeDelta="-3" timeBase="35" countDelta="0" countBase="1">
                                <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="1" timeBase="4" countDelta="0" countBase="1">
                                  <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                </node>
                                <node leaf="false" class="jason.bb.DefaultBeliefBase$BelEntry" methodName="contains" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="15" countDelta="0" countBase="1">
                                  <node leaf="true" class="jason.bb.StructureWrapperForLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                  <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="14" countDelta="0" countBase="1"/>
                                </node>
                                <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="12" countDelta="0" countBase="2">
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                        </node>
                      </node>
                      <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="updateEvents" methodSignature="([Ljava/util/List;Ljason/asSemantics/Intention;)Z" timeDelta="-9" timeBase="91" countDelta="0" countBase="1">
                        <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="updateEvents" methodSignature="(Ljason/asSemantics/Event;)V" timeDelta="-1" timeBase="47" countDelta="0" countBase="1">
                          <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="hasCandidatePlan" methodSignature="(Ljason/asSyntax/Trigger;)Z" timeDelta="1" timeBase="30" countDelta="0" countBase="1">
                            <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="getCandidatePlans" methodSignature="(Ljason/asSyntax/Trigger;)Ljava/util/List;" timeDelta="2" timeBase="27" countDelta="0" countBase="1">
                              <node leaf="true" class="java.util.List" methodName="isEmpty" methodSignature="()Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                            </node>
                          </node>
                        </node>
                      </node>
                    </node>
                  </node>
                  <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="1" timeBase="6" countDelta="0" countBase="4"/>
                </node>
                <node leaf="false" class="jason.asSemantics.Agent" methodName="addInitialGoalsInTS" methodSignature="()V" timeDelta="90" timeBase="1380" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.asSyntax.Structure" methodName="makeVarsAnnon" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="57" timeBase="651" countDelta="0" countBase="1">
                    <node leaf="false" class="jason.asSemantics.Unifier" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="24" timeBase="58" countDelta="0" countBase="1">
                      <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="23" timeBase="44" countDelta="0" countBase="1"/>
                    </node>
                    <node leaf="true" class="jason.asSemantics.Unifier" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="8" countDelta="0" countBase="1"/>
                    <node leaf="false" class="jason.asSyntax.Pred" methodName="makeVarsAnnon" methodSignature="(Ljason/asSemantics/Unifier;)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="5" countDelta="0" countBase="1">
                      <node leaf="false" class="jason.asSyntax.Structure" methodName="makeVarsAnnon" methodSignature="(Ljason/asSemantics/Unifier;)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="1" countDelta="0" countBase="1">
                        <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                      </node>
                    </node>
                  </node>
                  <node leaf="false" class="jason.asSemantics.Circumstance" methodName="addAchvGoal" methodSignature="(Ljason/asSyntax/Literal;Ljason/asSemantics/Intention;)Ljason/asSemantics/Event;" timeDelta="17" timeBase="183" countDelta="0" countBase="1">
                    <node leaf="true" class="jason.asSemantics.Event" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Trigger;Ljason/asSemantics/Intention;)V" timeDelta="1" timeBase="5" countDelta="0" countBase="1"/>
                    <node leaf="false" class="jason.asSyntax.Trigger" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Trigger$TEOperator;Ljason/asSyntax/Trigger$TEType;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="7" countDelta="0" countBase="1">
                      <node leaf="true" class="jason.asSyntax.Trigger" methodName="setTrigOp" methodSignature="(Ljason/asSyntax/Trigger$TEOperator;)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                    </node>
                    <node leaf="false" class="jason.asSemantics.Circumstance" methodName="addEvent" methodSignature="(Ljason/asSemantics/Event;)V" timeDelta="-6" timeBase="37" countDelta="0" countBase="1">
                      <node leaf="true" class="java.util.Queue" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-4" timeBase="22" countDelta="0" countBase="1"/>
                    </node>
                  </node>
                  <node leaf="false" class="jason.asSemantics.Intention" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="3" timeBase="26" countDelta="0" countBase="1">
                    <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="createAtom" methodSignature="(Ljava/lang/String;)Ljason/asSyntax/Atom;" timeDelta="1" timeBase="11" countDelta="0" countBase="1">
                      <node leaf="true" class="java.util.Map" methodName="computeIfAbsent" methodSignature="(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;" timeDelta="1" timeBase="8" countDelta="0" countBase="1"/>
                    </node>
                  </node>
                  <node leaf="false" class="jason.asSyntax.Pred" methodName="addAnnot" methodSignature="(Ljason/asSyntax/Term;)Z" timeDelta="2" timeBase="15" countDelta="0" countBase="1">
                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="insert" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                    <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                  </node>
                  <node leaf="true" class="jason.asSemantics.Agent" methodName="getTS" methodSignature="()Ljason/asSemantics/TransitionSystem;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                  <node leaf="true" class="java.util.List" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                  <node leaf="true" class="jason.asSemantics.TransitionSystem" methodName="getC" methodSignature="()Ljason/asSemantics/Circumstance;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                </node>
                <node leaf="true" class="java.lang.String" methodName="isEmpty" methodSignature="()Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.net.URL" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-11" timeBase="55" countDelta="0" countBase="1"/>
                <node leaf="false" class="jason.asSemantics.Agent" methodName="parseAS" methodSignature="(Ljava/net/URL;)Z" timeDelta="-717" timeBase="85735" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.asSemantics.Agent" methodName="parseAS" methodSignature="(Ljava/net/URL;Ljava/lang/String;)Z" timeDelta="-716" timeBase="85727" countDelta="0" countBase="1">
                    <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="3" timeBase="0" countDelta="1" countBase="0"/>
                    <node leaf="true" class="java.util.logging.Logger" methodName="fine" methodSignature="(Ljava/lang/String;)V" timeDelta="2" timeBase="4" countDelta="0" countBase="1"/>
                    <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                    <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/Object;)Ljava/lang/StringBuilder;" timeDelta="-2" timeBase="9" countDelta="0" countBase="1"/>
                    <node leaf="true" class="java.net.URL" methodName="openStream" methodSignature="()Ljava/io/InputStream;" timeDelta="-4" timeBase="92" countDelta="0" countBase="1"/>
                    <node leaf="false" class="jason.asSemantics.Agent" methodName="parseAS" methodSignature="(Ljava/io/InputStream;Ljava/lang/String;)V" timeDelta="-716" timeBase="85610" countDelta="0" countBase="1">
                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="86" timeBase="580" countDelta="0" countBase="1">
                        <node leaf="true" class="java.util.regex.Pattern" methodName="compile" methodSignature="(Ljava/lang/String;)Ljava/util/regex/Pattern;" timeDelta="65" timeBase="504" countDelta="0" countBase="1"/>
                        <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="17" timeBase="39" countDelta="0" countBase="1"/>
                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_la1_init_0" methodSignature="()V" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                        <node leaf="true" class="java.util.HashSet" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                      </node>
                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;)V" timeDelta="16" timeBase="7995" countDelta="0" countBase="1">
                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;Ljava/lang/String;)V" timeDelta="17" timeBase="7990" countDelta="0" countBase="1">
                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;Ljava/lang/String;II)V" timeDelta="5" timeBase="70" countDelta="0" countBase="1">
                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;Ljava/lang/String;III)V" timeDelta="3" timeBase="61" countDelta="0" countBase="1">
                              <node leaf="true" class="java.io.InputStreamReader" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;)V" timeDelta="4" timeBase="22" countDelta="0" countBase="1"/>
                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/Reader;III)V" timeDelta="1" timeBase="33" countDelta="0" countBase="1"/>
                            </node>
                          </node>
                          <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="2" timeBase="35" countDelta="0" countBase="1"/>
                          <node leaf="true" class="jason.asSyntax.parser.as2j$JJCalls" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="4" countDelta="0" countBase="4"/>
                          <node leaf="false" class="jason.asSyntax.parser.as2j$LookaheadSuccess" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/parser/as2j$1;)V" timeDelta="1" timeBase="20" countDelta="0" countBase="1">
                            <node leaf="false" class="jason.asSyntax.parser.as2j$LookaheadSuccess" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="13" countDelta="0" countBase="1">
                              <node leaf="true" class="java.lang.Error" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="9" countDelta="0" countBase="1"/>
                            </node>
                          </node>
                          <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                          <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
                          <node leaf="false" class="jason.asSyntax.directives.DirectiveProcessor" methodName="getInstance" methodSignature="(Ljava/lang/String;)Ljason/asSyntax/directives/Directive;" timeDelta="-7" timeBase="323" countDelta="0" countBase="1">
                            <node leaf="false" class="java.lang.reflect.Constructor" methodName="newInstance" methodSignature="([Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="4" timeBase="100" countDelta="0" countBase="1">
                              <node leaf="true" class="jason.asSyntax.directives.NameSpace" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="1" timeBase="58" countDelta="0" countBase="1"/>
                            </node>
                            <node leaf="true" class="java.lang.Class" methodName="getConstructor" methodSignature="([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" timeDelta="-12" timeBase="215" countDelta="0" countBase="1"/>
                          </node>
                        </node>
                      </node>
                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="setASLSource" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="agent" methodSignature="(Ljason/asSemantics/Agent;)Z" timeDelta="-2783" timeBase="60611" countDelta="0" countBase="1">
                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="14" timeBase="427" countDelta="0" countBase="4">
                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="17" timeBase="418" countDelta="0" countBase="4">
                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="16" timeBase="223" countDelta="0" countBase="16">
                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="17" timeBase="213" countDelta="0" countBase="16">
                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="FillBuff" methodSignature="()V" timeDelta="15" timeBase="196" countDelta="0" countBase="2">
                                  <node leaf="true" class="java.io.Reader" methodName="read" methodSignature="([CII)I" timeDelta="12" timeBase="141" countDelta="0" countBase="2"/>
                                  <node leaf="true" class="java.io.Reader" methodName="close" methodSignature="()V" timeDelta="1" timeBase="31" countDelta="0" countBase="1"/>
                                </node>
                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="3" timeBase="3" countDelta="0" countBase="12"/>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="132" countDelta="0" countBase="7">
                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="1" timeBase="115" countDelta="0" countBase="4">
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="2" timeBase="110" countDelta="0" countBase="4">
                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjAddStates" methodSignature="(II)V" timeDelta="4" timeBase="3" countDelta="0" countBase="22"/>
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-8" timeBase="28" countDelta="0" countBase="60"/>
                                </node>
                              </node>
                              <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="32" countDelta="0" countBase="4">
                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                              <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="11" countDelta="0" countBase="4">
                                <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-2" timeBase="6" countDelta="0" countBase="4"/>
                              </node>
                            </node>
                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-3" timeBase="3" countDelta="-8" countBase="8"/>
                          </node>
                        </node>
                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                        <node leaf="true" class="jason.asSyntax.Plan" methodName="setSourceFile" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                        <node leaf="false" class="jason.util.Config" methodName="getBoolean" methodSignature="(Ljava/lang/String;)Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="2">
                          <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                        </node>
                        <node leaf="false" class="jason.asSyntax.Structure" methodName="getSingletonVars" methodSignature="()Ljava/util/List;" timeDelta="-119" timeBase="11287" countDelta="0" countBase="2">
                          <node leaf="true" class="java.util.stream.Stream" methodName="collect" methodSignature="(Ljava/util/stream/Collector;)Ljava/lang/Object;" timeDelta="251" timeBase="1437" countDelta="0" countBase="2"/>
                          <node leaf="true" class="java.util.stream.Stream" methodName="filter" methodSignature="(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;" timeDelta="10" timeBase="410" countDelta="0" countBase="2"/>
                          <node leaf="true" class="java.util.HashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                          <node leaf="true" class="java.util.Map" methodName="entrySet" methodSignature="()Ljava/util/Set;" timeDelta="-1" timeBase="6" countDelta="0" countBase="2"/>
                          <node leaf="true" class="java.util.stream.Stream" methodName="map" methodSignature="(Ljava/util/function/Function;)Ljava/util/stream/Stream;" timeDelta="-2" timeBase="142" countDelta="0" countBase="2"/>
                          <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-12" timeBase="666" countDelta="0" countBase="2">
                            <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-2" timeBase="31" countDelta="0" countBase="4">
                              <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                              <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="4">
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="7" countDelta="0" countBase="4">
                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="4">
                                    <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.Trigger" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-2" timeBase="15" countDelta="0" countBase="4">
                                <node leaf="true" class="jason.asSyntax.Trigger$TEOperator$1" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                <node leaf="false" class="jason.asSyntax.StringTermImpl" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="2">
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                </node>
                                <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.Plan" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-5" timeBase="16" countDelta="0" countBase="8">
                              <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getBodyTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                              <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getBodyType" methodSignature="()Ljason/asSyntax/PlanBody$BodyType;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                              <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getBodyNext" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-8" timeBase="610" countDelta="0" countBase="3">
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="6" timeBase="42" countDelta="0" countBase="5">
                                <node leaf="false" class="jason.asSyntax.VarTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="8" timeBase="32" countDelta="0" countBase="1">
                                  <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="10" timeBase="5" countDelta="0" countBase="1"/>
                                  <node leaf="true" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                                  <node leaf="true" class="java.util.Map" methodName="containsKey" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="16" countDelta="0" countBase="1"/>
                                  <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="5" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                  </node>
                                </node>
                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-2" timeBase="3" countDelta="0" countBase="3">
                                  <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                </node>
                              </node>
                              <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="13" countDelta="0" countBase="4"/>
                              <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="9" countDelta="0" countBase="2">
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="2">
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2">
                                    <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="15" countDelta="0" countBase="6">
                                <node leaf="true" class="jason.asSyntax.ListTermImpl$3" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="12" countDelta="0" countBase="6"/>
                              </node>
                              <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-12" timeBase="520" countDelta="0" countBase="2"/>
                            </node>
                          </node>
                          <node leaf="true" class="java.util.stream.Collectors" methodName="toList" methodSignature="()Ljava/util/stream/Collector;" timeDelta="-62" timeBase="3742" countDelta="0" countBase="2"/>
                          <node leaf="true" class="java.util.Set" methodName="stream" methodSignature="()Ljava/util/stream/Stream;" timeDelta="-197" timeBase="2973" countDelta="0" countBase="2"/>
                        </node>
                        <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="add" methodSignature="(Ljason/asSyntax/Plan;)Ljason/asSyntax/Plan;" timeDelta="-151" timeBase="6295" countDelta="0" countBase="2">
                          <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="add" methodSignature="(Ljason/asSyntax/Plan;Z)Ljason/asSyntax/Plan;" timeDelta="-150" timeBase="6291" countDelta="0" countBase="2">
                            <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="createStructure" methodSignature="(Ljava/lang/String;[Ljason/asSyntax/Term;)Ljason/asSyntax/Structure;" timeDelta="5" timeBase="18" countDelta="0" countBase="2">
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="addTerms" methodSignature="([Ljason/asSyntax/Term;)Ljason/asSyntax/Literal;" timeDelta="6" timeBase="4" countDelta="0" countBase="2">
                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="6" timeBase="0" countDelta="2" countBase="0"/>
                                <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                              </node>
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="8" countDelta="0" countBase="2">
                                <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                              </node>
                            </node>
                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="2" timeBase="1" countDelta="0" countBase="4"/>
                            <node leaf="true" class="jason.asSyntax.Pred" methodName="hasSource" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                            <node leaf="true" class="jason.asSyntax.Trigger" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="1" countDelta="0" countBase="6"/>
                            <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                            <node leaf="true" class="jason.asSyntax.Plan" methodName="getSourceFile" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="6"/>
                            <node leaf="true" class="jason.asSyntax.Plan" methodName="getTrigger" methodSignature="()Ljason/asSyntax/Trigger;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                            <node leaf="true" class="jason.asSyntax.Plan" methodName="setLabel" methodSignature="(Ljason/asSyntax/Pred;)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="2"/>
                            <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="getStringForLabel" methodSignature="(Ljason/asSyntax/Literal;)Ljava/lang/String;" timeDelta="-1" timeBase="13" countDelta="0" countBase="2">
                              <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                            </node>
                            <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="2"/>
                            <node leaf="true" class="java.util.List" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-1" timeBase="5" countDelta="0" countBase="1"/>
                            <node leaf="true" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="10" countDelta="0" countBase="3"/>
                            <node leaf="false" class="jason.asSyntax.Trigger" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-4" timeBase="44" countDelta="0" countBase="3">
                              <node leaf="true" class="jason.asSyntax.Trigger$TEOperator$1" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="2" countDelta="0" countBase="2"/>
                              <node leaf="false" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/Object;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="7" countDelta="0" countBase="2">
                                <node leaf="true" class="jason.asSyntax.Trigger$TEType$2" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                              </node>
                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                              <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="2"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="3" countDelta="0" countBase="2"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="createString" methodSignature="(Ljava/lang/String;)Ljason/asSyntax/StringTerm;" timeDelta="-8" timeBase="1051" countDelta="0" countBase="2">
                              <node leaf="true" class="jason.asSyntax.StringTermImpl" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="8" countDelta="0" countBase="2"/>
                              <node leaf="false" class="jason.asSyntax.StringTermImpl" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-2" timeBase="50" countDelta="0" countBase="1">
                                <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                                <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-2" timeBase="36" countDelta="0" countBase="1"/>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="getUniqueLabel" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="-15" timeBase="113" countDelta="0" countBase="2">
                              <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="1" countDelta="0" countBase="2"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                              <node leaf="true" class="java.util.concurrent.atomic.AtomicInteger" methodName="incrementAndGet" methodSignature="()I" timeDelta="1" timeBase="4" countDelta="0" countBase="2"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(I)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="3" countDelta="0" countBase="2"/>
                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-2" timeBase="8" countDelta="0" countBase="2">
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="4" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="2">
                                      <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="2">
                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="4" countDelta="0" countBase="2"/>
                              <node leaf="true" class="java.util.Map" methodName="keySet" methodSignature="()Ljava/util/Set;" timeDelta="-14" timeBase="70" countDelta="0" countBase="2"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.Pred" methodName="addAnnot" methodSignature="(Ljason/asSyntax/Term;)Z" timeDelta="-115" timeBase="4925" countDelta="0" countBase="4">
                              <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="10" timeBase="8" countDelta="0" countBase="6">
                                <node leaf="true" class="jason.asSyntax.ListTermImpl$ListTermIterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="6"/>
                              </node>
                              <node leaf="false" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="20" countDelta="0" countBase="6">
                                <node leaf="true" class="jason.asSyntax.ListTermImpl$2" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="15" countDelta="0" countBase="6"/>
                              </node>
                              <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljava/lang/Object;)I" timeDelta="-1" timeBase="33" countDelta="0" countBase="6">
                                <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljason/asSyntax/Term;)I" timeDelta="-1" timeBase="28" countDelta="0" countBase="6">
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                  <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isList" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-6" countBase="6"/>
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isNumeric" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="insert" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="15" countDelta="0" countBase="4">
                                <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljason/asSyntax/Term;)V" timeDelta="1" timeBase="11" countDelta="0" countBase="4">
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="7" countDelta="0" countBase="4">
                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="6" countDelta="0" countBase="4">
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="4" countDelta="0" countBase="4"/>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-12" timeBase="57" countDelta="0" countBase="1">
                                <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                                <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-13" timeBase="44" countDelta="0" countBase="1"/>
                              </node>
                              <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="listTermIterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-43" timeBase="1025" countDelta="0" countBase="4"/>
                            </node>
                          </node>
                        </node>
                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="initial_goal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-255" timeBase="4429" countDelta="0" countBase="1">
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-256" timeBase="4422" countDelta="0" countBase="1">
                            <node leaf="false" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="1" timeBase="5" countDelta="0" countBase="1">
                              <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="5" countDelta="0" countBase="1">
                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="1" timeBase="36" countDelta="0" countBase="1">
                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-1" timeBase="19" countDelta="0" countBase="1">
                              <node leaf="true" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="33" countDelta="0" countBase="1">
                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="33" countDelta="0" countBase="1">
                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="18" countDelta="0" countBase="1">
                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-1" timeBase="18" countDelta="0" countBase="1"/>
                                </node>
                              </node>
                            </node>
                            <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="-10" timeBase="710" countDelta="0" countBase="1">
                              <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-1" timeBase="15" countDelta="0" countBase="1"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-122" timeBase="1038" countDelta="0" countBase="1">
                              <node leaf="true" class="java.util.HashSet" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                              <node leaf="false" class="java.util.Set" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="17" countDelta="0" countBase="17">
                                <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="17"/>
                              </node>
                              <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-3" timeBase="67" countDelta="0" countBase="17">
                                <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="1" timeBase="49" countDelta="0" countBase="17">
                                  <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="2" timeBase="32" countDelta="0" countBase="17">
                                    <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="4" countDelta="0" countBase="17"/>
                                    <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-6" timeBase="16" countDelta="0" countBase="17">
                                      <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-3" timeBase="7" countDelta="0" countBase="17"/>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                        </node>
                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan" methodSignature="()Ljason/asSyntax/Plan;" timeDelta="-2273" timeBase="38108" countDelta="0" countBase="2">
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="220" timeBase="20404" countDelta="0" countBase="1">
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="221" timeBase="20401" countDelta="0" countBase="1">
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="220" timeBase="20400" countDelta="0" countBase="1">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="221" timeBase="20382" countDelta="0" countBase="1">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="364" timeBase="15691" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="365" timeBase="15688" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="365" timeBase="15686" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="365" timeBase="15684" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="366" timeBase="15681" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="365" timeBase="15673" countDelta="0" countBase="1">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="366" timeBase="15599" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="369" timeBase="15566" countDelta="0" countBase="1">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="370" timeBase="15554" countDelta="0" countBase="1">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="371" timeBase="15543" countDelta="0" countBase="1">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="370" timeBase="15543" countDelta="0" countBase="1">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="369" timeBase="15543" countDelta="0" countBase="1">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="372" timeBase="15525" countDelta="0" countBase="1">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="372" timeBase="15524" countDelta="0" countBase="1">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="372" timeBase="15523" countDelta="0" countBase="1">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="372" timeBase="15523" countDelta="0" countBase="1">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="369" timeBase="11138" countDelta="0" countBase="1">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="370" timeBase="11137" countDelta="0" countBase="1">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="278" timeBase="996" countDelta="0" countBase="1">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="279" timeBase="952" countDelta="0" countBase="1">
                                                                          <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="10" timeBase="83" countDelta="0" countBase="1">
                                                                            <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="17" timeBase="56" countDelta="0" countBase="1"/>
                                                                            <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="9" countDelta="0" countBase="1"/>
                                                                          </node>
                                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                          <node leaf="false" class="jason.asSyntax.UnnamedVar" methodName="create" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)Ljason/asSyntax/UnnamedVar;" timeDelta="-7" timeBase="50" countDelta="0" countBase="1">
                                                                            <node leaf="true" class="java.lang.String" methodName="length" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                                                                            <node leaf="false" class="jason.asSyntax.UnnamedVar" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;)V" timeDelta="-6" timeBase="44" countDelta="0" countBase="1">
                                                                              <node leaf="false" class="jason.asSyntax.UnnamedVar" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;I)V" timeDelta="-6" timeBase="36" countDelta="0" countBase="1">
                                                                                <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                                                                                <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                                                                                <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(I)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                                                                                <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-6" timeBase="10" countDelta="0" countBase="1"/>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                        <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                                                                      </node>
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="93" timeBase="10137" countDelta="0" countBase="1">
                                                                        <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="93" timeBase="10125" countDelta="0" countBase="1">
                                                                          <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="64" timeBase="9895" countDelta="0" countBase="1">
                                                                            <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="addJasonFunction" methodSignature="(Ljava/lang/Class;)V" timeDelta="34" timeBase="1519" countDelta="0" countBase="16">
                                                                              <node leaf="true" class="java.lang.Class" methodName="getConstructor" methodSignature="([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" timeDelta="21" timeBase="1069" countDelta="0" countBase="16"/>
                                                                              <node leaf="true" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="3" timeBase="22" countDelta="0" countBase="16"/>
                                                                              <node leaf="true" class="jason.functions.log" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                                                                              <node leaf="true" class="jason.functions.Length" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                                                                              <node leaf="true" class="jason.functions.Round" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                                                                              <node leaf="true" class="jason.functions.time" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                                                                              <node leaf="true" class="jason.functions.Max" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="5" countDelta="0" countBase="1"/>
                                                                            </node>
                                                                            <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="1" timeBase="33" countDelta="0" countBase="1"/>
                                                                            <node leaf="true" class="java.util.HashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                                                                          </node>
                                                                          <node leaf="true" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                                                                        </node>
                                                                        <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                  <node leaf="false" class="jason.asSyntax.ArithExpr$ArithmeticOp" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="34" timeBase="286" countDelta="0" countBase="1">
                                                                    <node leaf="false" class="jason.asSyntax.ArithExpr$ArithmeticOp$4" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="11" timeBase="13" countDelta="0" countBase="1">
                                                                      <node leaf="false" class="jason.asSyntax.ArithExpr$ArithmeticOp" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;ILjason/asSyntax/ArithExpr$1;)V" timeDelta="11" timeBase="9" countDelta="0" countBase="1">
                                                                        <node leaf="false" class="jason.asSyntax.ArithExpr$ArithmeticOp" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="10" timeBase="7" countDelta="0" countBase="1">
                                                                          <node leaf="true" class="java.lang.Enum" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="12" timeBase="5" countDelta="0" countBase="1"/>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                    <node leaf="false" class="jason.asSyntax.ArithExpr$ArithmeticOp$5" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="19" countDelta="0" countBase="1">
                                                                      <node leaf="true" class="jason.asSyntax.ArithExpr$ArithmeticOp" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;ILjason/asSyntax/ArithExpr$1;)V" timeDelta="-11" timeBase="15" countDelta="0" countBase="1"/>
                                                                    </node>
                                                                    <node leaf="false" class="jason.asSyntax.ArithExpr$ArithmeticOp$7" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="7" countDelta="0" countBase="1">
                                                                      <node leaf="true" class="jason.asSyntax.ArithExpr$ArithmeticOp" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;ILjason/asSyntax/ArithExpr$1;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="16" countDelta="0" countBase="1"/>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                  <node leaf="true" class="java.util.ArrayList" methodName="trimToSize" methodSignature="()V" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="16" countDelta="0" countBase="2"/>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="1" timeBase="37" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="37" countDelta="0" countBase="1">
                                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="35" countDelta="0" countBase="1">
                                                    <node leaf="true" class="jason.asSyntax.UnnamedVar" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="20" countDelta="0" countBase="1"/>
                                                    <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                                                    <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                              <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-1" timeBase="13" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="1" timeBase="9" countDelta="0" countBase="1">
                                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                  <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="1">
                                                    <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="1">
                                                      <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="true" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-2" timeBase="17" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-2" timeBase="15" countDelta="0" countBase="1">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="12" countDelta="0" countBase="1">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="11" countDelta="0" countBase="1">
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="6" countDelta="0" countBase="1">
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                        <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="3" countDelta="0" countBase="1">
                                                          <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="8" countDelta="0" countBase="1">
                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                              <node leaf="true" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                                              <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.RelExpr$RelationalOp" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="2" timeBase="269" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.RelExpr$RelationalOp$7" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="2" timeBase="7" countDelta="0" countBase="1"/>
                                    <node leaf="false" class="jason.asSyntax.RelExpr$RelationalOp$3" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="7" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.RelExpr$RelationalOp" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;ILjason/asSyntax/RelExpr$1;)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="1">
                                        <node leaf="true" class="jason.asSyntax.RelExpr$RelationalOp" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                      </node>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.RelExpr$RelationalOp$9" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                                    <node leaf="false" class="jason.asSyntax.RelExpr$RelationalOp$1" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="16" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.RelExpr$RelationalOp" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;ILjason/asSyntax/RelExpr$1;)V" timeDelta="-1" timeBase="11" countDelta="0" countBase="1">
                                        <node leaf="true" class="jason.asSyntax.RelExpr$RelationalOp" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
                                      </node>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.RelExpr$RelationalOp$5" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-11" timeBase="18" countDelta="0" countBase="1"/>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="trigger" methodSignature="()Ljason/asSyntax/Trigger;" timeDelta="11" timeBase="208" countDelta="0" countBase="2">
                            <node leaf="false" class="jason.asSyntax.Trigger" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Trigger$TEOperator;Ljason/asSyntax/Trigger$TEType;Ljason/asSyntax/Literal;)V" timeDelta="9" timeBase="14" countDelta="0" countBase="2">
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="12" timeBase="4" countDelta="0" countBase="2">
                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="10" timeBase="4" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="12" timeBase="2" countDelta="0" countBase="2">
                                    <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="12" timeBase="1" countDelta="0" countBase="2"/>
                                  </node>
                                </node>
                              </node>
                              <node leaf="true" class="jason.asSyntax.Trigger" methodName="setTrigOp" methodSignature="(Ljason/asSyntax/Trigger$TEOperator;)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="3" timeBase="135" countDelta="0" countBase="2">
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="7" timeBase="17" countDelta="0" countBase="2">
                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                              </node>
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="3" timeBase="35" countDelta="0" countBase="2">
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="3" timeBase="35" countDelta="0" countBase="2">
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="2" timeBase="20" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="3" timeBase="19" countDelta="0" countBase="2">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJJJ)I" timeDelta="3" timeBase="15" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfa_0" methodSignature="(IJJ)I" timeDelta="3" timeBase="14" countDelta="0" countBase="2">
                                          <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopStringLiteralDfa_0" methodSignature="(IJJ)I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="2">
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-10" timeBase="20" countDelta="0" countBase="2">
                                <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-12" timeBase="19" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="5" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="2">
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                      <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                    </node>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-12" timeBase="12" countDelta="-2" countBase="2"/>
                                </node>
                              </node>
                            </node>
                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                            <node leaf="false" class="jason.asSyntax.Literal" methodName="forceFullLiteralImpl" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-2" timeBase="22" countDelta="0" countBase="2">
                              <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="isAtom" methodSignature="()Z" timeDelta="-1" timeBase="16" countDelta="0" countBase="2">
                                <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                <node leaf="false" class="jason.asSyntax.Pred" methodName="isAtom" methodSignature="()Z" timeDelta="-2" timeBase="11" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="isAtom" methodSignature="()Z" timeDelta="1" timeBase="5" countDelta="0" countBase="2">
                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="hasTerm" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="2"/>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                </node>
                              </node>
                            </node>
                          </node>
                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                          <node leaf="false" class="jason.asSyntax.Plan" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Pred;Ljason/asSyntax/Trigger;Ljason/asSyntax/LogicalFormula;Ljason/asSyntax/PlanBody;)V" timeDelta="-1" timeBase="40" countDelta="0" countBase="2">
                            <node leaf="true" class="jason.asSyntax.Plan" methodName="setContext" methodSignature="(Ljason/asSyntax/LogicalFormula;)V" timeDelta="-1" timeBase="12" countDelta="0" countBase="2"/>
                            <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="setAsBodyTerm" methodSignature="(Z)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                            <node leaf="true" class="jason.asSyntax.Trigger" methodName="setAsTriggerTerm" methodSignature="(Z)V" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                          </node>
                          <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getBodyTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                          <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;II)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="2"/>
                          <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-3" timeBase="22" countDelta="0" countBase="2">
                            <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                            <node leaf="false" class="jason.asSyntax.Pred" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="15" countDelta="0" countBase="2">
                              <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                              <node leaf="true" class="jason.asSyntax.Structure" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="10" countDelta="0" countBase="2"/>
                            </node>
                          </node>
                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="5" countDelta="0" countBase="5"/>
                          <node leaf="false" class="jason.asSyntax.Plan" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-6" timeBase="738" countDelta="0" countBase="1">
                            <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-2" timeBase="34" countDelta="0" countBase="1"/>
                            <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="createAtom" methodSignature="(Ljava/lang/String;)Ljason/asSyntax/Atom;" timeDelta="-6" timeBase="676" countDelta="0" countBase="3">
                              <node leaf="false" class="java.util.Map" methodName="computeIfAbsent" methodSignature="(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;" timeDelta="-2" timeBase="29" countDelta="0" countBase="3">
                                <node leaf="true" class="jason.asSyntax.ASSyntax" methodName="lambda$createAtom$0" methodSignature="(Ljava/lang/String;Ljava/lang/String;)Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="9" countDelta="0" countBase="3"/>
                              </node>
                            </node>
                          </node>
                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="checkInternalActionsInContext" methodSignature="(Ljason/asSyntax/LogicalFormula;Ljason/asSemantics/Agent;)Ljason/asSyntax/InternalActionLiteral;" timeDelta="-102" timeBase="1285" countDelta="0" countBase="2"/>
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-2391" timeBase="14889" countDelta="0" countBase="2">
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body_term" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-2389" timeBase="14885" countDelta="0" countBase="2">
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body_factor" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-2390" timeBase="14883" countDelta="0" countBase="2">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="4" timeBase="42" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="3" timeBase="41" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="3" timeBase="22" countDelta="0" countBase="2">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="3" timeBase="21" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJJJ)I" timeDelta="4" timeBase="18" countDelta="0" countBase="2">
                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfa_0" methodSignature="(IJJ)I" timeDelta="5" timeBase="16" countDelta="0" countBase="2">
                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="4" timeBase="14" countDelta="0" countBase="2">
                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="2" countDelta="0" countBase="5">
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="5">
                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="10"/>
                                              </node>
                                            </node>
                                            <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopStringLiteralDfa_0" methodSignature="(IJJ)I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="5" countDelta="0" countBase="4"/>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="body_formula" methodSignature="()Ljava/lang/Object;" timeDelta="-2392" timeBase="14834" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.PlanBody$BodyType" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="27" timeBase="382" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.PlanBody$BodyType$2" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="14" timeBase="8" countDelta="0" countBase="1">
                                      <node leaf="true" class="jason.asSyntax.PlanBody$BodyType" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;ILjason/asSyntax/PlanBody$1;)V" timeDelta="2" timeBase="3" countDelta="0" countBase="1"/>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.PlanBody$BodyType$14" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="13" timeBase="7" countDelta="0" countBase="1"/>
                                    <node leaf="false" class="jason.asSyntax.PlanBody$BodyType$3" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="7" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.PlanBody$BodyType" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;ILjason/asSyntax/PlanBody$1;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="1">
                                        <node leaf="true" class="jason.asSyntax.PlanBody$BodyType" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                      </node>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.PlanBody$BodyType$8" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                                    <node leaf="true" class="jason.asSyntax.PlanBody$BodyType$6" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="7" countDelta="0" countBase="1"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;Ljason/asSyntax/Term;)V" timeDelta="-3" timeBase="40" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;Ljason/asSyntax/Term;Z)V" timeDelta="-1" timeBase="34" countDelta="0" countBase="2">
                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                      <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;Z)V" timeDelta="-2" timeBase="24" countDelta="0" countBase="2">
                                        <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;)V" timeDelta="-2" timeBase="17" countDelta="0" countBase="2"/>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-9" timeBase="329" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-8" timeBase="328" countDelta="0" countBase="2">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-10" timeBase="327" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-8" timeBase="325" countDelta="0" countBase="2">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-7" timeBase="322" countDelta="0" countBase="2">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-8" timeBase="322" countDelta="0" countBase="2">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-7" timeBase="320" countDelta="0" countBase="2">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-7" timeBase="318" countDelta="0" countBase="2">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-7" timeBase="318" countDelta="0" countBase="2">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-7" timeBase="304" countDelta="0" countBase="2">
                                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                                                      <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-1" timeBase="14" countDelta="0" countBase="2">
                                                        <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="1" timeBase="10" countDelta="0" countBase="2">
                                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                          <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="1" timeBase="5" countDelta="0" countBase="2"/>
                                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                        </node>
                                                        <node leaf="true" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-2" timeBase="22" countDelta="0" countBase="2">
                                                        <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="20" countDelta="0" countBase="2">
                                                          <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="19" countDelta="0" countBase="2">
                                                            <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                            <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="2"/>
                                                          </node>
                                                        </node>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="-2" timeBase="225" countDelta="0" countBase="2">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="3" timeBase="22" countDelta="0" countBase="4">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="22" countDelta="0" countBase="2">
                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="7" countDelta="0" countBase="2">
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                            </node>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="7" countDelta="0" countBase="2">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="-1" timeBase="5" countDelta="0" countBase="2">
                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="4" countDelta="0" countBase="6"/>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="-7" timeBase="183" countDelta="0" countBase="2">
                                                          <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-5" timeBase="173" countDelta="0" countBase="2">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="-3" timeBase="36" countDelta="0" countBase="2">
                                                              <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="4"/>
                                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="12" countDelta="0" countBase="2"/>
                                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                                                            </node>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-3" timeBase="136" countDelta="0" countBase="2">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-4" timeBase="135" countDelta="0" countBase="2">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-4" timeBase="135" countDelta="0" countBase="2">
                                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="30" countDelta="0" countBase="2"/>
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-4" timeBase="102" countDelta="0" countBase="2">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-5" timeBase="101" countDelta="0" countBase="2">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-4" timeBase="100" countDelta="0" countBase="2">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-4" timeBase="98" countDelta="0" countBase="2">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-4" timeBase="97" countDelta="0" countBase="2">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-4" timeBase="96" countDelta="0" countBase="2">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-2" timeBase="78" countDelta="0" countBase="2">
                                                                                <node leaf="true" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="1" timeBase="15" countDelta="0" countBase="2"/>
                                                                                <node leaf="true" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="1" timeBase="12" countDelta="0" countBase="2">
                                                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                                                  <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                                </node>
                                                                                <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-1" timeBase="11" countDelta="0" countBase="2"/>
                                                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-1" timeBase="25" countDelta="0" countBase="2"/>
                                                                                <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                                              </node>
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-3" timeBase="16" countDelta="0" countBase="2">
                                                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-13" timeBase="77" countDelta="0" countBase="1">
                                    <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="10" countDelta="0" countBase="1"/>
                                    <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-11" timeBase="59" countDelta="0" countBase="1"/>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                        </node>
                      </node>
                    </node>
                  </node>
                </node>
                <node leaf="false" class="jason.asSemantics.Agent" methodName="loadKqmlPlans" methodSignature="()V" timeDelta="-2647" timeBase="55156" countDelta="0" countBase="1">
                  <node leaf="true" class="java.lang.Class" methodName="getResource" methodSignature="(Ljava/lang/String;)Ljava/net/URL;" timeDelta="16" timeBase="236" countDelta="0" countBase="2"/>
                  <node leaf="true" class="jason.util.Config" methodName="getKqmlPlansFile" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
                  <node leaf="true" class="java.lang.String" methodName="substring" methodSignature="(I)Ljava/lang/String;" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                  <node leaf="false" class="jason.asSemantics.Agent" methodName="parseAS" methodSignature="(Ljava/net/URL;Ljava/lang/String;)Z" timeDelta="-2662" timeBase="54892" countDelta="0" countBase="1">
                    <node leaf="true" class="java.net.URL" methodName="openStream" methodSignature="()Ljava/io/InputStream;" timeDelta="85" timeBase="150" countDelta="0" countBase="1"/>
                    <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="0" countDelta="1" countBase="0"/>
                    <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-2" timeBase="3" countDelta="0" countBase="2"/>
                    <node leaf="false" class="jason.asSemantics.Agent" methodName="parseAS" methodSignature="(Ljava/io/InputStream;Ljava/lang/String;)V" timeDelta="-2746" timeBase="54730" countDelta="0" countBase="1">
                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;)V" timeDelta="16" timeBase="67" countDelta="0" countBase="1">
                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;Ljava/lang/String;)V" timeDelta="15" timeBase="67" countDelta="0" countBase="1">
                          <node leaf="false" class="jason.asSyntax.directives.DirectiveProcessor" methodName="getInstance" methodSignature="(Ljava/lang/String;)Ljason/asSyntax/directives/Directive;" timeDelta="9" timeBase="18" countDelta="0" countBase="1">
                            <node leaf="true" class="java.lang.Class" methodName="getConstructor" methodSignature="([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" timeDelta="5" timeBase="5" countDelta="0" countBase="1"/>
                            <node leaf="true" class="java.lang.reflect.Constructor" methodName="newInstance" methodSignature="([Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="5" timeBase="7" countDelta="0" countBase="1"/>
                            <node leaf="true" class="jason.asSyntax.directives.NameSpace" methodName="isSingleton" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                          </node>
                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;Ljava/lang/String;II)V" timeDelta="3" timeBase="32" countDelta="0" countBase="1">
                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;Ljava/lang/String;III)V" timeDelta="3" timeBase="32" countDelta="0" countBase="1">
                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/Reader;III)V" timeDelta="2" timeBase="16" countDelta="0" countBase="1"/>
                              <node leaf="true" class="java.io.InputStreamReader" methodName="&lt;init&gt;" methodSignature="(Ljava/io/InputStream;)V" timeDelta="2" timeBase="14" countDelta="0" countBase="1"/>
                            </node>
                          </node>
                          <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                          <node leaf="true" class="jason.asSyntax.parser.as2j$JJCalls" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                        </node>
                      </node>
                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="agent" methodSignature="(Ljason/asSemantics/Agent;)Z" timeDelta="-2762" timeBase="54661" countDelta="0" countBase="1">
                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="belief" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="7" timeBase="8515" countDelta="0" countBase="4">
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="30" timeBase="1087" countDelta="0" countBase="4">
                            <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="26" timeBase="99" countDelta="0" countBase="4">
                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="27" timeBase="96" countDelta="0" countBase="4">
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="16" timeBase="93" countDelta="0" countBase="4">
                                  <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="15" timeBase="51" countDelta="0" countBase="5">
                                    <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="16" timeBase="49" countDelta="0" countBase="5">
                                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="11" timeBase="10" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="11" timeBase="9" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="11" timeBase="8" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="11" timeBase="7" countDelta="0" countBase="1">
                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="11" timeBase="6" countDelta="0" countBase="1">
                                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="12" timeBase="0" countDelta="1" countBase="0"/>
                                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                                                  <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                              </node>
                                            </node>
                                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                          </node>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="5" timeBase="23" countDelta="0" countBase="5">
                                        <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="5" timeBase="20" countDelta="0" countBase="5">
                                          <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="3" timeBase="15" countDelta="0" countBase="5">
                                            <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="14" countDelta="0" countBase="5">
                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="5">
                                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="5" countDelta="0" countBase="5">
                                                  <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="4" countDelta="0" countBase="5">
                                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-4" timeBase="4" countDelta="-5" countBase="5"/>
                                                  </node>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="5"/>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="11" countDelta="0" countBase="5"/>
                                    </node>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="3" timeBase="0" countDelta="4" countBase="0"/>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="2" timeBase="3" countDelta="0" countBase="8">
                                    <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="3" timeBase="1" countDelta="0" countBase="8"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="15" countDelta="0" countBase="3">
                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                    <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="13" countDelta="0" countBase="3">
                                      <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                    </node>
                                  </node>
                                  <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="4"/>
                                </node>
                                <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="20" timeBase="735" countDelta="0" countBase="4">
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="12" timeBase="648" countDelta="0" countBase="4">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="10" timeBase="631" countDelta="0" countBase="8">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="9" timeBase="620" countDelta="0" countBase="8">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="11" timeBase="617" countDelta="0" countBase="8">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="10" timeBase="612" countDelta="0" countBase="8">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="18" timeBase="539" countDelta="0" countBase="8">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="list" methodSignature="()Ljason/asSyntax/ListTermImpl;" timeDelta="36" timeBase="376" countDelta="0" countBase="5">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term_in_list" methodSignature="()Ljason/asSyntax/Term;" timeDelta="33" timeBase="238" countDelta="0" countBase="3">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="42" timeBase="220" countDelta="0" countBase="3">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="43" timeBase="219" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="41" timeBase="219" countDelta="0" countBase="3">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="45" timeBase="214" countDelta="0" countBase="3">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="42" timeBase="213" countDelta="0" countBase="3">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="39" timeBase="198" countDelta="0" countBase="3">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="37" timeBase="108" countDelta="0" countBase="1">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="34" timeBase="79" countDelta="0" countBase="1">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="33" timeBase="76" countDelta="0" countBase="1">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="32" timeBase="67" countDelta="0" countBase="1">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="32" timeBase="67" countDelta="0" countBase="1">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="32" timeBase="67" countDelta="0" countBase="1">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="33" timeBase="49" countDelta="0" countBase="1">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="32" timeBase="49" countDelta="0" countBase="1">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="33" timeBase="48" countDelta="0" countBase="1">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="31" timeBase="48" countDelta="0" countBase="1">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="32" timeBase="47" countDelta="0" countBase="1">
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="32" timeBase="47" countDelta="0" countBase="1">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="23" timeBase="39" countDelta="0" countBase="1">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="12" timeBase="11" countDelta="0" countBase="1">
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="12" timeBase="9" countDelta="0" countBase="1">
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="11" timeBase="7" countDelta="0" countBase="1">
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="12" timeBase="6" countDelta="0" countBase="1">
                                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="3" countDelta="0" countBase="1">
                                                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                            </node>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="9" timeBase="6" countDelta="0" countBase="1">
                                                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                    </node>
                                                                                    <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                  </node>
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="8" timeBase="6" countDelta="0" countBase="1">
                                                                                    <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="8" timeBase="3" countDelta="0" countBase="1">
                                                                                      <node leaf="true" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="9" timeBase="0" countDelta="1" countBase="0"/>
                                                                                    </node>
                                                                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                                                    <node leaf="true" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                                                  </node>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="16" countDelta="0" countBase="1"/>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="1" timeBase="9" countDelta="0" countBase="1">
                                                                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="isAtom" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="1">
                                                                    <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                  </node>
                                                                  <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                </node>
                                                              </node>
                                                              <node leaf="true" class="java.util.ArrayList" methodName="trimToSize" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                            </node>
                                                            <node leaf="true" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                                                            <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="21" countDelta="0" countBase="2">
                                                              <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="20" countDelta="0" countBase="1"/>
                                                            </node>
                                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                                          </node>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="2" timeBase="42" countDelta="0" countBase="3">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="2" timeBase="37" countDelta="0" countBase="3">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="1" timeBase="29" countDelta="0" countBase="3">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="2" timeBase="24" countDelta="0" countBase="2">
                                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="1" timeBase="24" countDelta="0" countBase="2"/>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                          <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="1" timeBase="10" countDelta="0" countBase="1">
                                                            <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="1" timeBase="5" countDelta="0" countBase="1">
                                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                              <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                            </node>
                                                          </node>
                                                          <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="1" timeBase="14" countDelta="0" countBase="2">
                                                            <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="2" timeBase="7" countDelta="0" countBase="2">
                                                              <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjava/lang/String;)V" timeDelta="2" timeBase="4" countDelta="0" countBase="2">
                                                                <node leaf="true" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="4" countDelta="0" countBase="2"/>
                                                              </node>
                                                            </node>
                                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="2"/>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="4" timeBase="10" countDelta="0" countBase="5">
                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="2" timeBase="8" countDelta="0" countBase="5">
                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="5"/>
                                              </node>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="4" timeBase="19" countDelta="0" countBase="16">
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="3" timeBase="11" countDelta="0" countBase="3">
                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="3">
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="3">
                                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                </node>
                                              </node>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="append" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="2" timeBase="10" countDelta="0" countBase="3">
                                              <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isEmpty" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                            </node>
                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                            <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="setNext" methodSignature="(Ljason/asSyntax/Term;)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="59" countDelta="0" countBase="8">
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="59" countDelta="0" countBase="8">
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="4" timeBase="0" countDelta="14" countBase="0"/>
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="20" countDelta="0" countBase="8">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="1" timeBase="15" countDelta="0" countBase="6">
                                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="3" countDelta="0" countBase="12">
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="2" timeBase="2" countDelta="0" countBase="12"/>
                                                    </node>
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="1" timeBase="3" countDelta="0" countBase="6">
                                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="12"/>
                                                    </node>
                                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-3" timeBase="3" countDelta="-6" countBase="6"/>
                                                  </node>
                                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-3" timeBase="7" countDelta="0" countBase="8"/>
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="25" countDelta="0" countBase="8">
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="3" timeBase="2" countDelta="0" countBase="8"/>
                                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="5" countDelta="0" countBase="6">
                                                    <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="5" timeBase="0" countDelta="6" countBase="0"/>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="6" countDelta="0" countBase="8">
                                                    <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="3" timeBase="0" countDelta="8" countBase="0"/>
                                                  </node>
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="8"/>
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-4" timeBase="4" countDelta="-8" countBase="8"/>
                                                </node>
                                              </node>
                                            </node>
                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="25" countDelta="0" countBase="5"/>
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-21" timeBase="133" countDelta="0" countBase="3">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-23" timeBase="133" countDelta="0" countBase="3">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-22" timeBase="131" countDelta="0" countBase="3">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-23" timeBase="131" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-22" timeBase="127" countDelta="0" countBase="3">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-2" timeBase="16" countDelta="0" countBase="3">
                                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="0" countDelta="6" countBase="0"/>
                                                      <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="7" countDelta="0" countBase="3">
                                                        <node leaf="true" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                        <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                      </node>
                                                    </node>
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-21" timeBase="110" countDelta="0" countBase="3">
                                                      <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="15" countDelta="0" countBase="1"/>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="-1" timeBase="29" countDelta="0" countBase="4">
                                                        <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="5" countDelta="0" countBase="4">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="5" countDelta="0" countBase="1">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1">
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                              <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                            </node>
                                                            <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                          </node>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-18" timeBase="56" countDelta="0" countBase="3">
                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-17" timeBase="52" countDelta="0" countBase="3">
                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-18" timeBase="50" countDelta="0" countBase="3">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                                            </node>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="-4" timeBase="31" countDelta="0" countBase="3">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="-1" timeBase="27" countDelta="0" countBase="3">
                                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_55" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-8" timeBase="69" countDelta="0" countBase="8">
                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-6" timeBase="64" countDelta="0" countBase="8">
                                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="14" countDelta="0" countBase="20">
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-2" timeBase="11" countDelta="0" countBase="20"/>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="13" countDelta="0" countBase="8">
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-1" timeBase="8" countDelta="0" countBase="3">
                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="2" timeBase="0" countDelta="7" countBase="0"/>
                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="4" countDelta="0" countBase="7">
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="2" timeBase="0" countDelta="7" countBase="0"/>
                                                </node>
                                              </node>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-7" timeBase="28" countDelta="0" countBase="8">
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="2" timeBase="1" countDelta="0" countBase="8"/>
                                              <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="3" countDelta="0" countBase="8">
                                                <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="1" timeBase="0" countDelta="8" countBase="0"/>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="8" countBase="0"/>
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="8"/>
                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-7" timeBase="8" countDelta="0" countBase="3">
                                                <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="-5" timeBase="5" countDelta="-3" countBase="3"/>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="1" timeBase="6" countDelta="0" countBase="8">
                                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isAtom" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="5"/>
                                    <node leaf="true" class="jason.asSyntax.VarTerm" methodName="isAtom" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                  </node>
                                </node>
                                <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="2" countDelta="0" countBase="8"/>
                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                              </node>
                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="2" timeBase="1" countDelta="0" countBase="4"/>
                              <node leaf="true" class="jason.asSyntax.Structure" methodName="setTerms" methodSignature="(Ljava/util/List;)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="2" countDelta="0" countBase="4"/>
                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="2" countDelta="0" countBase="12"/>
                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="9" countDelta="0" countBase="4">
                                <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="7" countDelta="0" countBase="4"/>
                              </node>
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="60" countDelta="0" countBase="8">
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="55" countDelta="0" countBase="8">
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="9" timeBase="16" countDelta="0" countBase="8">
                                    <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="9" timeBase="2" countDelta="0" countBase="8">
                                      <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="3" timeBase="0" countDelta="8" countBase="0"/>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="8" countBase="0"/>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-8" countBase="8"/>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-8" countBase="8"/>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="2" countDelta="0" countBase="9"/>
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="10" countDelta="0" countBase="8">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="1" timeBase="1" countDelta="0" countBase="1">
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-1" timeBase="5" countDelta="0" countBase="3">
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="3">
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-12" timeBase="18" countDelta="0" countBase="15">
                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-2" timeBase="4" countDelta="0" countBase="15">
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-2" timeBase="2" countDelta="-11" countBase="11"/>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-2" timeBase="3" countDelta="0" countBase="4"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="6" timeBase="45" countDelta="0" countBase="4">
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="6" timeBase="40" countDelta="0" countBase="4">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="4" timeBase="32" countDelta="0" countBase="4">
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="6" timeBase="30" countDelta="0" countBase="4">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="5" timeBase="12" countDelta="0" countBase="4">
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                      <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="1" countDelta="0" countBase="4">
                                        <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="13" countDelta="0" countBase="4">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="3" timeBase="11" countDelta="0" countBase="4">
                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="2" countDelta="0" countBase="4">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                        </node>
                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                      </node>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="1" timeBase="5" countDelta="0" countBase="4">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="-2" timeBase="3" countDelta="0" countBase="4">
                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                  </node>
                                </node>
                              </node>
                            </node>
                            <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="2" countDelta="0" countBase="8"/>
                            <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="1" timeBase="25" countDelta="0" countBase="4">
                              <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-1" timeBase="18" countDelta="0" countBase="4">
                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="3" timeBase="0" countDelta="4" countBase="0"/>
                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                                <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="1" timeBase="9" countDelta="0" countBase="4">
                                  <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="1" timeBase="6" countDelta="0" countBase="4">
                                    <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="4">
                                      <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                    </node>
                                    <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                  </node>
                                </node>
                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                              </node>
                              <node leaf="true" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="5" countDelta="0" countBase="4"/>
                            </node>
                            <node leaf="true" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="1" timeBase="16" countDelta="0" countBase="4"/>
                            <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="1" timeBase="2" countDelta="0" countBase="4"/>
                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-8" countBase="8"/>
                            <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-11" timeBase="17" countDelta="0" countBase="4">
                              <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-10" timeBase="14" countDelta="0" countBase="4">
                                <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-5" timeBase="8" countDelta="0" countBase="4">
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="3" countDelta="0" countBase="4"/>
                                </node>
                              </node>
                            </node>
                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-12" timeBase="15" countDelta="0" countBase="8"/>
                          </node>
                          <node leaf="false" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/Object;)Ljava/lang/StringBuilder;" timeDelta="26" timeBase="2311" countDelta="0" countBase="2">
                            <node leaf="false" class="jason.asSyntax.Structure" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="29" timeBase="2297" countDelta="0" countBase="3">
                              <node leaf="true" class="java.util.stream.Collectors" methodName="joining" methodSignature="(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;" timeDelta="34" timeBase="1558" countDelta="0" countBase="1"/>
                              <node leaf="false" class="java.util.stream.Stream" methodName="collect" methodSignature="(Ljava/util/stream/Collector;)Ljava/lang/Object;" timeDelta="2" timeBase="97" countDelta="0" countBase="1">
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="11" timeBase="19" countDelta="0" countBase="2">
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="11" timeBase="0" countDelta="4" countBase="0"/>
                                  <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                  <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                  <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                </node>
                              </node>
                              <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(C)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/Object;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="2" countDelta="0" countBase="5"/>
                              <node leaf="true" class="java.util.stream.Stream" methodName="map" methodSignature="(Ljava/util/function/Function;)Ljava/util/stream/Stream;" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                              <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                              <node leaf="true" class="java.util.List" methodName="stream" methodSignature="()Ljava/util/stream/Stream;" timeDelta="-8" timeBase="201" countDelta="0" countBase="1"/>
                            </node>
                          </node>
                          <node leaf="false" class="jason.asSyntax.Rule" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;Ljason/asSyntax/LogicalFormula;)V" timeDelta="25" timeBase="104" countDelta="0" countBase="3">
                            <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="22" timeBase="87" countDelta="0" countBase="3">
                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="21" timeBase="83" countDelta="0" countBase="3">
                                <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="24" timeBase="78" countDelta="0" countBase="3">
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="20" timeBase="78" countDelta="0" countBase="3">
                                    <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="10" timeBase="43" countDelta="0" countBase="3">
                                      <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="9" timeBase="43" countDelta="0" countBase="3">
                                        <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="5" timeBase="10" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="7" timeBase="8" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="6" timeBase="7" countDelta="0" countBase="1">
                                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="6" timeBase="6" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="5" timeBase="5" countDelta="0" countBase="1">
                                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="5" timeBase="1" countDelta="0" countBase="1">
                                                    <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="4" timeBase="0" countDelta="1" countBase="0"/>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="4" timeBase="23" countDelta="0" countBase="5">
                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="6" countDelta="0" countBase="3">
                                          <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="3"/>
                                        </node>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="5" timeBase="4" countDelta="0" countBase="6">
                                      <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="9" timeBase="0" countDelta="6" countBase="0"/>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="3"/>
                                    <node leaf="true" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="14" countDelta="0" countBase="3"/>
                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="3">
                                      <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                    </node>
                                    <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-6" countBase="6"/>
                                  </node>
                                </node>
                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                              </node>
                            </node>
                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isRule" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                          </node>
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="8" timeBase="2169" countDelta="0" countBase="3">
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="9" timeBase="2167" countDelta="0" countBase="3">
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="42" timeBase="1066" countDelta="0" countBase="2">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="85" timeBase="469" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="82" timeBase="437" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="80" timeBase="436" countDelta="0" countBase="2">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="81" timeBase="435" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="79" timeBase="435" countDelta="0" countBase="2">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="81" timeBase="433" countDelta="0" countBase="2">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="80" timeBase="432" countDelta="0" countBase="2">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="79" timeBase="421" countDelta="0" countBase="2">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="59" timeBase="251" countDelta="0" countBase="2">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="53" timeBase="193" countDelta="0" countBase="2">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="54" timeBase="181" countDelta="0" countBase="4">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="53" timeBase="174" countDelta="0" countBase="4">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="55" timeBase="171" countDelta="0" countBase="4">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="54" timeBase="170" countDelta="0" countBase="4">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="50" timeBase="128" countDelta="0" countBase="4">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="47" timeBase="128" countDelta="0" countBase="4">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="48" timeBase="124" countDelta="0" countBase="4">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="49" timeBase="122" countDelta="0" countBase="4">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="49" timeBase="120" countDelta="0" countBase="4">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="48" timeBase="119" countDelta="0" countBase="4">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="48" timeBase="94" countDelta="0" countBase="4">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="53" timeBase="54" countDelta="0" countBase="4">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="51" timeBase="50" countDelta="0" countBase="4">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="49" timeBase="48" countDelta="0" countBase="4">
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="50" timeBase="39" countDelta="0" countBase="4">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="49" timeBase="39" countDelta="0" countBase="4">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_58" methodSignature="()Z" timeDelta="53" timeBase="31" countDelta="0" countBase="4">
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_38" methodSignature="()Z" timeDelta="49" timeBase="30" countDelta="0" countBase="4">
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="50" timeBase="26" countDelta="0" countBase="4">
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="26" countDelta="0" countBase="4">
                                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="2" timeBase="2" countDelta="0" countBase="4"/>
                                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="11" countDelta="0" countBase="4">
                                                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                                                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                                                              <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="3" countDelta="0" countBase="4">
                                                                                                <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="4"/>
                                                                                              </node>
                                                                                            </node>
                                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_55" methodSignature="()Z" timeDelta="2" timeBase="2" countDelta="0" countBase="4">
                                                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                                          </node>
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="-4" timeBase="29" countDelta="0" countBase="4">
                                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                                            <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-2" timeBase="3" countDelta="0" countBase="4"/>
                                                                          </node>
                                                                        </node>
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="21" countDelta="0" countBase="4">
                                                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="3" timeBase="0" countDelta="8" countBase="0"/>
                                                                          <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="2" timeBase="2" countDelta="0" countBase="4">
                                                                            <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                                          </node>
                                                                          <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="9" countDelta="0" countBase="4">
                                                                            <node leaf="true" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="2" countDelta="0" countBase="4"/>
                                                                            <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-2" timeBase="3" countDelta="0" countBase="4"/>
                                                                          </node>
                                                                          <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="8"/>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="4" timeBase="40" countDelta="0" countBase="4">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="7" timeBase="36" countDelta="0" countBase="4">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="5" timeBase="14" countDelta="0" countBase="4">
                                                                  <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="4" timeBase="1" countDelta="0" countBase="4">
                                                                    <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                                  </node>
                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="4" countDelta="0" countBase="4">
                                                                    <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                                  </node>
                                                                </node>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="3" timeBase="4" countDelta="0" countBase="5"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="8"/>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="4" countDelta="0" countBase="4">
                                                        <node leaf="true" class="jason.asSyntax.VarTerm" methodName="isAtom" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                      </node>
                                                    </node>
                                                    <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-4" timeBase="5" countDelta="0" countBase="4"/>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="3" timeBase="35" countDelta="0" countBase="4">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="35" countDelta="0" countBase="4">
                                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="12" timeBase="3" countDelta="0" countBase="5">
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="13" timeBase="1" countDelta="0" countBase="5"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="2" timeBase="7" countDelta="0" countBase="4">
                                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-11" timeBase="20" countDelta="0" countBase="4">
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-12" timeBase="14" countDelta="0" countBase="4"/>
                                                      </node>
                                                    </node>
                                                  </node>
                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="1" countDelta="0" countBase="6"/>
                                                  <node leaf="true" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="2"/>
                                                  <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="12" timeBase="2" countDelta="0" countBase="2">
                                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="11" timeBase="2" countDelta="0" countBase="2">
                                                    <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="5" timeBase="2" countDelta="0" countBase="2">
                                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="3" timeBase="0" countDelta="2" countBase="0"/>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="5" timeBase="16" countDelta="0" countBase="2">
                                                  <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="2" timeBase="14" countDelta="0" countBase="2">
                                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                  </node>
                                                  <node leaf="false" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="2" countDelta="0" countBase="2">
                                                    <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                  </node>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="4" timeBase="26" countDelta="0" countBase="2">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="3" timeBase="24" countDelta="0" countBase="2">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="2" timeBase="19" countDelta="0" countBase="2">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="18" countDelta="0" countBase="2">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="3" timeBase="9" countDelta="0" countBase="2">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="1" timeBase="9" countDelta="0" countBase="2">
                                                            <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                                          </node>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                      </node>
                                                    </node>
                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                                                  </node>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="1" timeBase="41" countDelta="0" countBase="2"/>
                                                <node leaf="false" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="1" timeBase="9" countDelta="0" countBase="2">
                                                  <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="9" countDelta="0" countBase="2">
                                                    <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="8" countDelta="0" countBase="2">
                                                      <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                      <node leaf="false" class="jason.asSyntax.Atom" methodName="calcHashCode" methodSignature="()I" timeDelta="-1" timeBase="5" countDelta="0" countBase="2">
                                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                        <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="32" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="32" countDelta="0" countBase="2">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="13" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="2" timeBase="12" countDelta="0" countBase="2">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="3" countDelta="0" countBase="8"/>
                                          <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="1" timeBase="5" countDelta="0" countBase="8"/>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="7" countDelta="0" countBase="7">
                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-2" timeBase="4" countDelta="0" countBase="7">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-2" timeBase="2" countDelta="-7" countBase="7"/>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                <node leaf="true" class="jason.asSyntax.LogExpr" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/LogicalFormula;Ljason/asSyntax/LogExpr$LogicalOp;Ljason/asSyntax/LogicalFormula;)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-39" timeBase="585" countDelta="0" countBase="1">
                                  <node leaf="false" class="jason.asSyntax.LogExpr" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/LogicalFormula;Ljason/asSyntax/LogExpr$LogicalOp;Ljason/asSyntax/LogicalFormula;)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.BinaryStructure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljava/lang/String;Ljason/asSyntax/Term;)V" timeDelta="-1" timeBase="7" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="1">
                                        <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="addTerm" methodSignature="(Ljason/asSyntax/Term;)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="2"/>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.LogExpr$LogicalOp$3" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-6" timeBase="281" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="15" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="15" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="3" countDelta="0" countBase="1">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                        </node>
                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-7" timeBase="265" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="3" timeBase="44" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="44" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="44" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="43" countDelta="0" countBase="1">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="2" timeBase="43" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="2" timeBase="37" countDelta="0" countBase="1">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="1" timeBase="29" countDelta="0" countBase="1">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="2" timeBase="27" countDelta="0" countBase="1">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="1" timeBase="27" countDelta="0" countBase="1">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="1" timeBase="25" countDelta="0" countBase="1">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="1" timeBase="25" countDelta="0" countBase="1">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_58" methodSignature="()Z" timeDelta="2" timeBase="23" countDelta="0" countBase="1">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_38" methodSignature="()Z" timeDelta="3" timeBase="22" countDelta="0" countBase="1">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="1" timeBase="22" countDelta="0" countBase="1">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="22" countDelta="0" countBase="1">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="2" timeBase="15" countDelta="0" countBase="1">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="1" timeBase="4" countDelta="0" countBase="1">
                                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                      </node>
                                                                    </node>
                                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                      </node>
                                                    </node>
                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="1" timeBase="6" countDelta="0" countBase="1">
                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                  </node>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="list" methodSignature="()Ljason/asSyntax/ListTermImpl;" timeDelta="-10" timeBase="192" countDelta="0" countBase="1">
                                        <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term_in_list" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-10" timeBase="144" countDelta="0" countBase="3">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="22" countDelta="0" countBase="2">
                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="21" countDelta="0" countBase="2">
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="8" countDelta="0" countBase="2">
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="append" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="-11" timeBase="30" countDelta="0" countBase="3">
                                          <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="append" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="6" countDelta="0" countBase="2">
                                            <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isEmpty" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getNext" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                          <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="isTail" methodSignature="()Z" timeDelta="-11" timeBase="13" countDelta="0" countBase="2">
                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="-11" timeBase="11" countDelta="-2" countBase="2"/>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-29" timeBase="284" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-28" timeBase="276" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="14" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="14" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="3" countDelta="0" countBase="1">
                                            <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="4" countDelta="0" countBase="5"/>
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-27" timeBase="261" countDelta="0" countBase="1">
                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                        <node leaf="false" class="jason.asSyntax.RelExpr" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljason/asSyntax/RelExpr$RelationalOp;Ljason/asSyntax/Term;)V" timeDelta="-1" timeBase="9" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.BinaryStructure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljava/lang/String;Ljason/asSyntax/Term;)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.Structure" methodName="addTerm" methodSignature="(Ljason/asSyntax/Term;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="2">
                                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                            </node>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.RelExpr$RelationalOp$9" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                        </node>
                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-1" timeBase="39" countDelta="0" countBase="1"/>
                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="list" methodSignature="()Ljason/asSyntax/ListTermImpl;" timeDelta="-25" timeBase="202" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="append" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="10" timeBase="21" countDelta="0" countBase="4">
                                            <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="append" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="11" timeBase="10" countDelta="0" countBase="3">
                                              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="9" timeBase="7" countDelta="0" countBase="3">
                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="10" timeBase="6" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="10" timeBase="5" countDelta="0" countBase="3">
                                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="12" timeBase="2" countDelta="0" countBase="3">
                                                      <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isEmpty" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                            </node>
                                            <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getNext" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                            <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                                            <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isTail" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="0" countDelta="5" countBase="0"/>
                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                          <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term_in_list" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-34" timeBase="164" countDelta="0" countBase="4">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="2" timeBase="2" countDelta="0" countBase="4">
                                              <node leaf="true" class="jason.asSyntax.VarTerm" methodName="isAtom" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-2" timeBase="25" countDelta="0" countBase="3">
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="24" countDelta="0" countBase="3">
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="6"/>
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="10" countDelta="0" countBase="3">
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                  <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="3" countDelta="0" countBase="3"/>
                                                </node>
                                              </node>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-32" timeBase="131" countDelta="0" countBase="4">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-31" timeBase="129" countDelta="0" countBase="4">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-31" timeBase="128" countDelta="0" countBase="4">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-21" timeBase="115" countDelta="0" countBase="4">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-21" timeBase="113" countDelta="0" countBase="4">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="17" countDelta="0" countBase="4">
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="8"/>
                                                        <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="2" countDelta="0" countBase="4">
                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                        </node>
                                                        <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="6" countDelta="0" countBase="4">
                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                          <node leaf="true" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                        </node>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-20" timeBase="93" countDelta="0" countBase="4">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-4" timeBase="50" countDelta="0" countBase="4">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-5" timeBase="46" countDelta="0" countBase="4">
                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-6" timeBase="42" countDelta="0" countBase="4">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="4">
                                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                              </node>
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="-1" timeBase="33" countDelta="0" countBase="4">
                                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="-3" timeBase="33" countDelta="0" countBase="4"/>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="-11" timeBase="33" countDelta="0" countBase="4">
                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                          <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                          <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-10" timeBase="21" countDelta="0" countBase="4">
                                                            <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjava/lang/String;)V" timeDelta="-9" timeBase="20" countDelta="0" countBase="4">
                                                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-10" timeBase="18" countDelta="0" countBase="4">
                                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-10" timeBase="16" countDelta="0" countBase="4">
                                                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-6" timeBase="10" countDelta="0" countBase="4">
                                                                    <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="4">
                                                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="true" class="jason.asSyntax.LogExpr" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/LogicalFormula;Ljason/asSyntax/LogExpr$LogicalOp;Ljason/asSyntax/LogicalFormula;)V" timeDelta="-2" timeBase="16" countDelta="0" countBase="2"/>
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-34" timeBase="1082" countDelta="0" countBase="3">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-36" timeBase="1048" countDelta="0" countBase="3">
                                  <node leaf="false" class="jason.asSyntax.RelExpr" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljason/asSyntax/RelExpr$RelationalOp;Ljason/asSyntax/Term;)V" timeDelta="13" timeBase="24" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.BinaryStructure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljava/lang/String;Ljason/asSyntax/Term;)V" timeDelta="6" timeBase="10" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="2" timeBase="4" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="1" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="1" countDelta="0" countBase="1">
                                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.RelExpr$RelationalOp$7" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.RelExpr" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="10" timeBase="41" countDelta="0" countBase="1">
                                    <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="9" timeBase="28" countDelta="0" countBase="1"/>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                  <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="17" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="17" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="9" countDelta="0" countBase="1">
                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="1" timeBase="8" countDelta="0" countBase="1"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-41" timeBase="609" countDelta="0" countBase="4">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-41" timeBase="608" countDelta="0" countBase="4">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-41" timeBase="607" countDelta="0" countBase="4">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-2" timeBase="8" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="7" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="2" countDelta="0" countBase="2">
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                            </node>
                                            <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="1"/>
                                          </node>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-36" timeBase="594" countDelta="0" countBase="4">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-39" timeBase="593" countDelta="0" countBase="4">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="31" countDelta="0" countBase="4">
                                              <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="10" timeBase="8" countDelta="0" countBase="4">
                                                <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="10" timeBase="2" countDelta="0" countBase="4"/>
                                                <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="2" timeBase="1" countDelta="0" countBase="4">
                                                  <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                                                </node>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="8"/>
                                              <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                              <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                                              <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-11" timeBase="13" countDelta="0" countBase="4">
                                                <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-11" timeBase="12" countDelta="0" countBase="4"/>
                                              </node>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-39" timeBase="560" countDelta="0" countBase="4">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="23" timeBase="216" countDelta="0" countBase="2">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="18" timeBase="172" countDelta="0" countBase="2">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="16" timeBase="165" countDelta="0" countBase="3">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="15" timeBase="149" countDelta="0" countBase="3">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="15" timeBase="148" countDelta="0" countBase="3">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="16" timeBase="145" countDelta="0" countBase="3">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="12" timeBase="107" countDelta="0" countBase="3">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="12" timeBase="106" countDelta="0" countBase="3">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="12" timeBase="105" countDelta="0" countBase="3">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="14" timeBase="102" countDelta="0" countBase="3">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="11" timeBase="101" countDelta="0" countBase="3">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="12" timeBase="99" countDelta="0" countBase="3">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="11" timeBase="82" countDelta="0" countBase="3">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="3" timeBase="37" countDelta="0" countBase="3">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="5" timeBase="32" countDelta="0" countBase="3">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="2" timeBase="7" countDelta="0" countBase="3">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="3" timeBase="6" countDelta="0" countBase="1">
                                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                              </node>
                                                                            </node>
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="1" timeBase="24" countDelta="0" countBase="3">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="2" timeBase="19" countDelta="0" countBase="2">
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="-1" timeBase="19" countDelta="0" countBase="2">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_55" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="2">
                                                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                                  </node>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                                        </node>
                                                                        <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="2" timeBase="11" countDelta="0" countBase="1">
                                                                          <node leaf="true" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="1" timeBase="5" countDelta="0" countBase="1"/>
                                                                        </node>
                                                                        <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="2" timeBase="4" countDelta="0" countBase="1"/>
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="2" timeBase="12" countDelta="0" countBase="2">
                                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="2" timeBase="1" countDelta="0" countBase="2"/>
                                                                          <node leaf="true" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="7" countDelta="0" countBase="2"/>
                                                                        </node>
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="1" timeBase="6" countDelta="0" countBase="1">
                                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                          <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                        </node>
                                                                        <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                        <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                                      </node>
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="16" countDelta="0" countBase="3">
                                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="6" countBase="0"/>
                                                                        <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="2" countDelta="0" countBase="3">
                                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                        </node>
                                                                        <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="7" countDelta="0" countBase="3">
                                                                          <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="2" countDelta="0" countBase="3">
                                                                            <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                                          </node>
                                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                                        </node>
                                                                        <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="2" timeBase="36" countDelta="0" countBase="3">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="4" timeBase="34" countDelta="0" countBase="3">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="4" timeBase="12" countDelta="0" countBase="3">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="5" timeBase="10" countDelta="0" countBase="3">
                                                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="2" timeBase="4" countDelta="0" countBase="7">
                                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="1" countDelta="0" countBase="7"/>
                                                                  </node>
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="2" timeBase="3" countDelta="0" countBase="4">
                                                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="1" timeBase="1" countDelta="0" countBase="8"/>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="3" countDelta="0" countBase="3">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-3" timeBase="3" countDelta="-3" countBase="3"/>
                                                              </node>
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="14" countDelta="0" countBase="3">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="2" countDelta="0" countBase="3">
                                                                  <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="3" timeBase="0" countDelta="3" countBase="0"/>
                                                                </node>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="6" countDelta="0" countBase="3">
                                                                  <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="1" timeBase="11" countDelta="0" countBase="3">
                                                      <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="isAtom" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="1">
                                                        <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                        <node leaf="false" class="jason.asSyntax.Pred" methodName="isAtom" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="1">
                                                          <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="isAtom" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                                                            <node leaf="true" class="jason.asSyntax.Structure" methodName="hasTerm" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                          </node>
                                                        </node>
                                                      </node>
                                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                    </node>
                                                  </node>
                                                  <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="1" countDelta="0" countBase="3"/>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="2" timeBase="30" countDelta="0" countBase="4">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="3" timeBase="28" countDelta="0" countBase="3">
                                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="3" timeBase="15" countDelta="0" countBase="3"/>
                                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="8" countDelta="0" countBase="3"/>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="3" timeBase="15" countDelta="0" countBase="2"/>
                                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="3" timeBase="46" countDelta="0" countBase="2"/>
                                              <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="1" timeBase="28" countDelta="0" countBase="2"/>
                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                              <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2">
                                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-12" timeBase="75" countDelta="0" countBase="4">
                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-13" timeBase="69" countDelta="0" countBase="4">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="2" timeBase="39" countDelta="0" countBase="4">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="3" timeBase="34" countDelta="0" countBase="2">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="2" timeBase="33" countDelta="0" countBase="2">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_58" methodSignature="()Z" timeDelta="1" timeBase="30" countDelta="0" countBase="2">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_38" methodSignature="()Z" timeDelta="3" timeBase="28" countDelta="0" countBase="2">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="2" timeBase="28" countDelta="0" countBase="2">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="28" countDelta="0" countBase="2">
                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="2" timeBase="17" countDelta="0" countBase="2"/>
                                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="4">
                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                    </node>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-12" timeBase="26" countDelta="0" countBase="4">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-15" timeBase="25" countDelta="0" countBase="2">
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-6" timeBase="7" countDelta="0" countBase="2"/>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-8" timeBase="12" countDelta="0" countBase="2">
                                                        <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="5" countDelta="0" countBase="2">
                                                          <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="-63" timeBase="157" countDelta="0" countBase="3">
                                                <node leaf="true" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="3" timeBase="7" countDelta="0" countBase="3"/>
                                                <node leaf="false" class="jason.asSyntax.Pred" methodName="setAnnots" methodSignature="(Ljason/asSyntax/ListTerm;)Ljason/asSyntax/Literal;" timeDelta="2" timeBase="29" countDelta="0" countBase="1">
                                                  <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="getTail" methodSignature="()Ljason/asSyntax/VarTerm;" timeDelta="1" timeBase="5" countDelta="0" countBase="1">
                                                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isTail" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                  </node>
                                                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="setTail" methodSignature="(Ljason/asSyntax/VarTerm;)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                  <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="3"/>
                                                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                  <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-1" timeBase="5" countDelta="0" countBase="2"/>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="list" methodSignature="()Ljason/asSyntax/ListTermImpl;" timeDelta="-4" timeBase="39" countDelta="0" countBase="1">
                                                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="setNext" methodSignature="(Ljason/asSyntax/Term;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="7" countDelta="0" countBase="4">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="7" countDelta="0" countBase="1">
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1">
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="1">
                                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                      </node>
                                                    </node>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-2" timeBase="19" countDelta="0" countBase="2">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="18" countDelta="0" countBase="2">
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="6" countDelta="0" countBase="2">
                                                        <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                                                          <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="7" countDelta="0" countBase="2">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-1" timeBase="3" countDelta="0" countBase="1">
                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-63" timeBase="69" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-62" timeBase="67" countDelta="0" countBase="1">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-63" timeBase="65" countDelta="0" countBase="1">
                                                      <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-62" timeBase="62" countDelta="-1" countBase="1"/>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                          <node leaf="true" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                          <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getSourceRef" methodSignature="(Ljason/asSyntax/DefaultTerm;)Ljava/lang/String;" timeDelta="-2" timeBase="23" countDelta="0" countBase="1">
                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getSourceRef" methodSignature="(Ljason/asSyntax/SourceInfo;)Ljava/lang/String;" timeDelta="-3" timeBase="19" countDelta="0" countBase="1">
                              <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="getBeginSrcLine" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                              <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="getSrcFile" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(I)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                            </node>
                          </node>
                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="3" countDelta="0" countBase="7"/>
                          <node leaf="false" class="jason.asSyntax.Rule" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-5" timeBase="66" countDelta="0" countBase="1">
                            <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
                            <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-5" timeBase="52" countDelta="0" countBase="1"/>
                          </node>
                          <node leaf="false" class="java.util.logging.Logger" methodName="warning" methodSignature="(Ljava/lang/String;)V" timeDelta="-12" timeBase="1924" countDelta="0" countBase="1">
                            <node leaf="false" class="jason.runtime.MASConsoleLogHandler" methodName="publish" methodSignature="(Ljava/util/logging/LogRecord;)V" timeDelta="14" timeBase="1827" countDelta="0" countBase="1">
                              <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="append" methodSignature="(Ljava/lang/String;Ljava/lang/String;)V" timeDelta="16" timeBase="1813" countDelta="0" countBase="1">
                                <node leaf="true" class="javax.swing.JTextArea" methodName="append" methodSignature="(Ljava/lang/String;)V" timeDelta="16" timeBase="1806" countDelta="0" countBase="1"/>
                                <node leaf="true" class="javax.swing.JFrame" methodName="isVisible" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-1" countBase="1"/>
                              </node>
                              <node leaf="false" class="java.util.logging.Formatter" methodName="format" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="-3" timeBase="10" countDelta="0" countBase="1">
                                <node leaf="false" class="jason.runtime.MASConsoleLogFormatter" methodName="format" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="-2" timeBase="9" countDelta="0" countBase="1">
                                  <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                  <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(C)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                  <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                  <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="3" countDelta="-1" countBase="1"/>
                                </node>
                              </node>
                            </node>
                            <node leaf="false" class="jason.runtime.MASConsoleLogFormatter" methodName="format" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="-3" timeBase="11" countDelta="0" countBase="1">
                              <node leaf="true" class="jason.runtime.MASConsoleLogFormatter" methodName="getAgName" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(C)Ljava/lang/StringBuilder;" timeDelta="-3" timeBase="4" countDelta="0" countBase="1"/>
                            </node>
                          </node>
                          <node leaf="false" class="jason.asSyntax.Structure" methodName="getSingletonVars" methodSignature="()Ljava/util/List;" timeDelta="-18" timeBase="446" countDelta="0" countBase="3">
                            <node leaf="true" class="java.util.HashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                            <node leaf="true" class="java.util.Set" methodName="stream" methodSignature="()Ljava/util/stream/Stream;" timeDelta="1" timeBase="7" countDelta="0" countBase="3"/>
                            <node leaf="false" class="java.util.stream.Stream" methodName="collect" methodSignature="(Ljava/util/stream/Collector;)Ljava/lang/Object;" timeDelta="1" timeBase="72" countDelta="0" countBase="3">
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="lambda$getSingletonVars$0" methodSignature="(Ljava/util/Map$Entry;)Z" timeDelta="2" timeBase="15" countDelta="0" countBase="13">
                                <node leaf="true" class="jason.asSyntax.UnnamedVar" methodName="isUnnamedVar" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                <node leaf="true" class="java.util.Map$Entry" methodName="getValue" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="3" countDelta="0" countBase="13"/>
                                <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="13"/>
                              </node>
                            </node>
                            <node leaf="true" class="java.util.stream.Stream" methodName="map" methodSignature="(Ljava/util/function/Function;)Ljava/util/stream/Stream;" timeDelta="1" timeBase="3" countDelta="0" countBase="3"/>
                            <node leaf="true" class="java.util.Map" methodName="entrySet" methodSignature="()Ljava/util/Set;" timeDelta="-1" timeBase="3" countDelta="0" countBase="3"/>
                            <node leaf="true" class="java.util.stream.Collectors" methodName="toList" methodSignature="()Ljava/util/stream/Collector;" timeDelta="-1" timeBase="5" countDelta="0" countBase="3"/>
                            <node leaf="true" class="java.util.stream.Stream" methodName="filter" methodSignature="(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;" timeDelta="-1" timeBase="6" countDelta="0" countBase="3"/>
                            <node leaf="false" class="jason.asSyntax.Rule" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-22" timeBase="343" countDelta="0" countBase="3">
                              <node leaf="true" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-3" timeBase="126" countDelta="0" countBase="4"/>
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-22" timeBase="207" countDelta="0" countBase="2">
                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4">
                                  <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                </node>
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-3" timeBase="146" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="1" timeBase="17" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="2" timeBase="16" countDelta="0" countBase="2">
                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="2" timeBase="12" countDelta="0" countBase="2">
                                        <node leaf="false" class="java.util.Map" methodName="containsKey" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="5" countDelta="0" countBase="2">
                                          <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="5" countDelta="0" countBase="2">
                                            <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="4" timeBase="0" countDelta="2" countBase="0"/>
                                            <node leaf="false" class="jason.asSyntax.VarTerm" methodName="calcHashCode" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="2">
                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                            </node>
                                          </node>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="2">
                                          <node leaf="true" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                        </node>
                                        <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="3" countDelta="0" countBase="2">
                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                        </node>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.VarTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="1" timeBase="11" countDelta="0" countBase="1">
                                    <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                    <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="2" countDelta="0" countBase="1">
                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                    </node>
                                    <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                    <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1">
                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                      <node leaf="true" class="jason.asSyntax.VarTerm" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                    </node>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="3" countDelta="0" countBase="4"/>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-5" timeBase="112" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-4" timeBase="109" countDelta="0" countBase="2">
                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4">
                                        <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-2" timeBase="23" countDelta="0" countBase="2">
                                        <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                        <node leaf="false" class="java.util.Map" methodName="containsKey" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="9" countDelta="0" countBase="2">
                                          <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="3" countDelta="0" countBase="2">
                                            <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                          </node>
                                          <node leaf="false" class="jason.asSyntax.VarTerm" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="2" countDelta="0" countBase="2">
                                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                          </node>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-4" timeBase="83" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="2">
                                          <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isEmpty" methodSignature="()Z" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                        </node>
                                        <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-3" timeBase="66" countDelta="0" countBase="2">
                                          <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="2">
                                            <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isEmpty" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                          <node leaf="false" class="jason.asSyntax.VarTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="19" countDelta="0" countBase="2">
                                            <node leaf="false" class="java.util.Map" methodName="containsKey" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="7" countDelta="0" countBase="2">
                                              <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="5" countDelta="0" countBase="2">
                                                <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.VarTerm" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="1" countDelta="0" countBase="1">
                                                <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                              </node>
                                            </node>
                                            <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                                            <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-2" timeBase="5" countDelta="0" countBase="2">
                                              <node leaf="true" class="jason.asSyntax.VarTerm" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                            </node>
                                          </node>
                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-2" timeBase="40" countDelta="0" countBase="2">
                                            <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="17" countDelta="0" countBase="2">
                                              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="2">
                                                <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isEmpty" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.VarTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-2" timeBase="19" countDelta="0" countBase="2">
                                              <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                              <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="2" countDelta="0" countBase="1">
                                                <node leaf="true" class="jason.asSyntax.VarTerm" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                                              </node>
                                              <node leaf="true" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="4" countDelta="0" countBase="2"/>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.VarTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-19" timeBase="34" countDelta="0" countBase="1">
                                  <node leaf="false" class="java.util.Map" methodName="containsKey" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="4" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                                  </node>
                                  <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                  <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                  </node>
                                  <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-6" timeBase="8" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-12" timeBase="16" countDelta="0" countBase="1">
                                    <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="1">
                                      <node leaf="true" class="jason.asSyntax.ListTermImpl$3" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-12" timeBase="12" countDelta="-1" countBase="1"/>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                        </node>
                        <node leaf="true" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="3" timeBase="9" countDelta="0" countBase="20"/>
                        <node leaf="true" class="jason.asSyntax.Plan" methodName="setSourceFile" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="5" countDelta="0" countBase="20"/>
                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                        <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="1" timeBase="6" countDelta="0" countBase="20"/>
                        <node leaf="true" class="java.util.Set" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                        <node leaf="true" class="jason.asSemantics.Agent" methodName="getPL" methodSignature="()Ljason/asSyntax/PlanLibrary;" timeDelta="-6" timeBase="6" countDelta="-20" countBase="20"/>
                        <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="add" methodSignature="(Ljason/asSyntax/Plan;)Ljason/asSyntax/Plan;" timeDelta="-53" timeBase="1613" countDelta="0" countBase="20">
                          <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="add" methodSignature="(Ljason/asSyntax/Plan;Z)Ljason/asSyntax/Plan;" timeDelta="-56" timeBase="1601" countDelta="0" countBase="20">
                            <node leaf="false" class="jason.asSyntax.Pred" methodName="addAnnot" methodSignature="(Ljason/asSyntax/Term;)Z" timeDelta="23" timeBase="601" countDelta="0" countBase="40">
                              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="insert" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="-2" timeBase="109" countDelta="0" countBase="40">
                                <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljason/asSyntax/Term;)V" timeDelta="-6" timeBase="94" countDelta="0" countBase="40">
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="71" countDelta="0" countBase="40">
                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-7" timeBase="61" countDelta="0" countBase="40">
                                      <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-2" timeBase="48" countDelta="0" countBase="40">
                                        <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="5" timeBase="28" countDelta="0" countBase="40">
                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="9" timeBase="7" countDelta="0" countBase="40"/>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljava/lang/Object;)I" timeDelta="-12" timeBase="145" countDelta="0" countBase="62">
                                <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljason/asSyntax/Term;)I" timeDelta="-26" timeBase="125" countDelta="0" countBase="62">
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="2" timeBase="6" countDelta="0" countBase="44"/>
                                  <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="3" countDelta="0" countBase="22"/>
                                  <node leaf="true" class="java.lang.String" methodName="compareTo" methodSignature="(Ljava/lang/String;)I" timeDelta="2" timeBase="4" countDelta="0" countBase="22"/>
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isNumeric" methodSignature="()Z" timeDelta="-1" timeBase="7" countDelta="0" countBase="22"/>
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="8" countDelta="0" countBase="44"/>
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isList" methodSignature="()Z" timeDelta="-3" timeBase="12" countDelta="0" countBase="66"/>
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="-3" timeBase="7" countDelta="0" countBase="22"/>
                                </node>
                              </node>
                              <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-13" timeBase="43" countDelta="0" countBase="62">
                                <node leaf="true" class="jason.asSyntax.ListTermImpl$ListTermIterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="10" countDelta="0" countBase="62"/>
                              </node>
                            </node>
                            <node leaf="true" class="jason.asSyntax.Plan" methodName="getSourceFile" methodSignature="()Ljava/lang/String;" timeDelta="5" timeBase="8" countDelta="0" countBase="60"/>
                            <node leaf="true" class="java.lang.String" methodName="isEmpty" methodSignature="()Z" timeDelta="5" timeBase="4" countDelta="0" countBase="20"/>
                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="4" timeBase="6" countDelta="0" countBase="40"/>
                            <node leaf="true" class="jason.asSyntax.Plan" methodName="getLabel" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="4" timeBase="32" countDelta="0" countBase="140"/>
                            <node leaf="true" class="jason.asSyntax.Plan" methodName="setAsPlanTerm" methodSignature="(Z)V" timeDelta="4" timeBase="3" countDelta="0" countBase="20"/>
                            <node leaf="true" class="jason.asSyntax.Trigger" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="4" timeBase="11" countDelta="0" countBase="60"/>
                            <node leaf="true" class="jason.asSyntax.Trigger" methodName="getOperator" methodSignature="()Ljason/asSyntax/Trigger$TEOperator;" timeDelta="4" timeBase="1" countDelta="0" countBase="20"/>
                            <node leaf="true" class="java.util.List" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="3" timeBase="0" countDelta="4" countBase="0"/>
                            <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="createString" methodSignature="(Ljava/lang/String;)Ljason/asSyntax/StringTerm;" timeDelta="2" timeBase="20" countDelta="0" countBase="20">
                              <node leaf="false" class="jason.asSyntax.StringTermImpl" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="3" timeBase="13" countDelta="0" countBase="20">
                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="4" countDelta="0" countBase="20"/>
                              </node>
                            </node>
                            <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="2" timeBase="63" countDelta="0" countBase="20">
                              <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="3" timeBase="2" countDelta="0" countBase="20"/>
                              <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="43" countDelta="0" countBase="16">
                                <node leaf="true" class="java.lang.Object" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="9" countDelta="0" countBase="16"/>
                                <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="3" countDelta="0" countBase="16"/>
                                <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-3" timeBase="5" countDelta="0" countBase="16"/>
                              </node>
                            </node>
                            <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="10" countDelta="0" countBase="35"/>
                            <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="4" countDelta="0" countBase="20"/>
                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="3" countDelta="0" countBase="20"/>
                            <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="getSrcFile" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="15"/>
                            <node leaf="true" class="jason.asSyntax.Trigger" methodName="getLiteral" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="9" countDelta="0" countBase="60"/>
                            <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="-2" timeBase="5" countDelta="0" countBase="30"/>
                            <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="10" countDelta="0" countBase="40"/>
                            <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-2" timeBase="37" countDelta="0" countBase="24">
                              <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                            </node>
                            <node leaf="true" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="21" countDelta="0" countBase="20"/>
                            <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="getStringForLabel" methodSignature="(Ljason/asSyntax/Literal;)Ljava/lang/String;" timeDelta="-4" timeBase="138" countDelta="0" countBase="40">
                              <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="8" timeBase="6" countDelta="0" countBase="40"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="7" timeBase="8" countDelta="0" countBase="40"/>
                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-3" timeBase="8" countDelta="0" countBase="40"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-4" timeBase="11" countDelta="0" countBase="40"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.Pred" methodName="hasSource" methodSignature="()Z" timeDelta="-8" timeBase="24" countDelta="0" countBase="20">
                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isStructure" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                              <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="2">
                                <node leaf="true" class="jason.asSyntax.ListTermImpl$3" methodName="hasNext" methodSignature="()Z" timeDelta="-2" timeBase="3" countDelta="0" countBase="2"/>
                              </node>
                              <node leaf="false" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-2" timeBase="4" countDelta="0" countBase="1">
                                <node leaf="true" class="jason.asSyntax.ListTermImpl$3" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.Trigger" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-9" timeBase="175" countDelta="0" countBase="24">
                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="2" timeBase="4" countDelta="0" countBase="20"/>
                              <node leaf="true" class="jason.asSyntax.Trigger$TEOperator$1" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="4" countDelta="0" countBase="18"/>
                              <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="1" timeBase="45" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="-1" timeBase="34" countDelta="0" countBase="20">
                                  <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="4" timeBase="4" countDelta="0" countBase="20"/>
                                  <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="3" timeBase="9" countDelta="0" countBase="20">
                                    <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="1" timeBase="4" countDelta="0" countBase="20"/>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/Object;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="23" countDelta="0" countBase="20">
                                <node leaf="true" class="jason.asSyntax.Trigger$TEType$2" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="5" countDelta="0" countBase="20"/>
                              </node>
                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="3" countDelta="0" countBase="20"/>
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="11" countDelta="0" countBase="20">
                                <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-3" timeBase="8" countDelta="0" countBase="20"/>
                              </node>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-3" timeBase="15" countDelta="0" countBase="40"/>
                              <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-8" timeBase="12" countDelta="0" countBase="20"/>
                            </node>
                            <node leaf="true" class="java.util.Map" methodName="keySet" methodSignature="()Ljava/util/Set;" timeDelta="-14" timeBase="25" countDelta="0" countBase="20"/>
                            <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="createStructure" methodSignature="(Ljava/lang/String;[Ljason/asSyntax/Term;)Ljason/asSyntax/Structure;" timeDelta="-35" timeBase="134" countDelta="0" countBase="20">
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-26" timeBase="77" countDelta="0" countBase="20">
                                <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-9" timeBase="22" countDelta="0" countBase="20"/>
                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-15" timeBase="38" countDelta="0" countBase="20">
                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-7" timeBase="24" countDelta="0" countBase="20">
                                    <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="3" timeBase="8" countDelta="0" countBase="20">
                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="3" countDelta="0" countBase="20"/>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                        </node>
                        <node leaf="false" class="jason.asSyntax.Structure" methodName="getSingletonVars" methodSignature="()Ljava/util/List;" timeDelta="-64" timeBase="2675" countDelta="0" countBase="20">
                          <node leaf="true" class="java.util.stream.Stream" methodName="filter" methodSignature="(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;" timeDelta="15" timeBase="35" countDelta="0" countBase="20"/>
                          <node leaf="false" class="java.util.stream.Stream" methodName="collect" methodSignature="(Ljava/util/stream/Collector;)Ljava/lang/Object;" timeDelta="12" timeBase="299" countDelta="0" countBase="20">
                            <node leaf="false" class="jason.asSyntax.Structure" methodName="lambda$getSingletonVars$0" methodSignature="(Ljava/util/Map$Entry;)Z" timeDelta="-22" timeBase="86" countDelta="0" countBase="73">
                              <node leaf="true" class="java.util.Map$Entry" methodName="getKey" methodSignature="()Ljava/lang/Object;" timeDelta="4" timeBase="3" countDelta="0" countBase="17"/>
                              <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-1" timeBase="10" countDelta="0" countBase="73"/>
                              <node leaf="true" class="jason.asSyntax.UnnamedVar" methodName="isUnnamedVar" methodSignature="()Z" timeDelta="-6" timeBase="6" countDelta="-17" countBase="17"/>
                              <node leaf="true" class="java.util.Map$Entry" methodName="getValue" methodSignature="()Ljava/lang/Object;" timeDelta="-9" timeBase="21" countDelta="0" countBase="73"/>
                            </node>
                          </node>
                          <node leaf="true" class="java.util.stream.Stream" methodName="map" methodSignature="(Ljava/util/function/Function;)Ljava/util/stream/Stream;" timeDelta="4" timeBase="18" countDelta="0" countBase="20"/>
                          <node leaf="true" class="java.util.HashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="10" countDelta="0" countBase="20"/>
                          <node leaf="true" class="java.util.Map" methodName="entrySet" methodSignature="()Ljava/util/Set;" timeDelta="-1" timeBase="17" countDelta="0" countBase="20"/>
                          <node leaf="true" class="java.util.Set" methodName="stream" methodSignature="()Ljava/util/stream/Stream;" timeDelta="-6" timeBase="55" countDelta="0" countBase="20"/>
                          <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-83" timeBase="2164" countDelta="0" countBase="20">
                            <node leaf="false" class="jason.asSyntax.Plan" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="14" timeBase="32" countDelta="0" countBase="80">
                              <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getBodyNext" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-3" timeBase="4" countDelta="0" countBase="20"/>
                            </node>
                            <node leaf="true" class="jason.asSyntax.Plan" methodName="getArity" methodSignature="()I" timeDelta="-4" timeBase="6" countDelta="0" countBase="20"/>
                            <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-26" timeBase="385" countDelta="0" countBase="21">
                              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="1" timeBase="23" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.ListTermImpl$3" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/ListTermImpl;Ljason/asSyntax/ListTerm;)V" timeDelta="-3" timeBase="14" countDelta="0" countBase="20">
                                  <node leaf="true" class="jason.asSyntax.ListTermImpl$ListTermIterator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/ListTermImpl;Ljason/asSyntax/ListTerm;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="20"/>
                                </node>
                              </node>
                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                              <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="63" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="4" timeBase="51" countDelta="0" countBase="20">
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="20"/>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-4" timeBase="14" countDelta="0" countBase="20">
                                    <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="3" timeBase="2" countDelta="0" countBase="20"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-9" timeBase="17" countDelta="0" countBase="20">
                                    <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-2" timeBase="5" countDelta="0" countBase="20"/>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-5" timeBase="84" countDelta="0" countBase="41">
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="3" timeBase="12" countDelta="0" countBase="41">
                                  <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="21"/>
                                </node>
                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="20"/>
                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-3" timeBase="14" countDelta="0" countBase="22"/>
                              </node>
                              <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-7" timeBase="74" countDelta="0" countBase="61">
                                <node leaf="false" class="jason.asSyntax.ListTermImpl$3" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="46" countDelta="0" countBase="61">
                                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isList" methodSignature="()Z" timeDelta="-2" timeBase="6" countDelta="0" countBase="41"/>
                                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-3" timeBase="9" countDelta="0" countBase="61"/>
                                </node>
                              </node>
                              <node leaf="false" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-21" timeBase="93" countDelta="0" countBase="41">
                                <node leaf="false" class="jason.asSyntax.ListTermImpl$3" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-15" timeBase="78" countDelta="0" countBase="41">
                                  <node leaf="false" class="jason.asSyntax.ListTermImpl$3" methodName="next" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-13" timeBase="65" countDelta="0" countBase="41">
                                    <node leaf="false" class="jason.asSyntax.ListTermImpl$ListTermIterator" methodName="moveNext" methodSignature="()V" timeDelta="-1" timeBase="25" countDelta="0" countBase="41">
                                      <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getNext" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-4" timeBase="13" countDelta="0" countBase="41"/>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-9" timeBase="18" countDelta="0" countBase="41"/>
                                  </node>
                                </node>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-79" timeBase="1687" countDelta="0" countBase="46">
                              <node leaf="false" class="jason.asSyntax.VarTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="9" timeBase="51" countDelta="0" countBase="4">
                                <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="12" timeBase="8" countDelta="0" countBase="4">
                                  <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="9" timeBase="3" countDelta="0" countBase="4">
                                    <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                  </node>
                                </node>
                                <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                              </node>
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="3" timeBase="3" countDelta="0" countBase="6">
                                <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="6"/>
                              </node>
                              <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getArity" methodSignature="()I" timeDelta="2" timeBase="2" countDelta="0" countBase="20"/>
                              <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="2" timeBase="7" countDelta="0" countBase="25"/>
                              <node leaf="true" class="jason.asSyntax.Trigger" methodName="getArity" methodSignature="()I" timeDelta="2" timeBase="5" countDelta="0" countBase="20"/>
                              <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="6" countDelta="0" countBase="10"/>
                              <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-17" timeBase="579" countDelta="0" countBase="23">
                                <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="1" timeBase="2" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.ListTermImpl$3" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/ListTermImpl;Ljason/asSyntax/ListTerm;)V" timeDelta="1" timeBase="1" countDelta="0" countBase="2">
                                    <node leaf="true" class="jason.asSyntax.ListTermImpl$ListTermIterator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/ListTermImpl;Ljason/asSyntax/ListTerm;)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                  </node>
                                </node>
                                <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="1" timeBase="5" countDelta="0" countBase="5">
                                  <node leaf="false" class="jason.asSyntax.ListTermImpl$3" methodName="hasNext" methodSignature="()Z" timeDelta="2" timeBase="3" countDelta="0" countBase="5">
                                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-2" timeBase="19" countDelta="0" countBase="3">
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="17" countDelta="0" countBase="3">
                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                    <node leaf="false" class="jason.asSyntax.VarTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="11" countDelta="0" countBase="2">
                                      <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                      <node leaf="false" class="java.util.Map" methodName="containsKey" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="6" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="3" countDelta="0" countBase="2">
                                          <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-2" timeBase="7" countDelta="0" countBase="3">
                                  <node leaf="false" class="jason.asSyntax.ListTermImpl$3" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="4" countDelta="0" countBase="3">
                                    <node leaf="false" class="jason.asSyntax.ListTermImpl$3" methodName="next" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="4" countDelta="0" countBase="3">
                                      <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                      <node leaf="true" class="jason.asSyntax.ListTermImpl$ListTermIterator" methodName="moveNext" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="3"/>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-9" timeBase="528" countDelta="0" countBase="23">
                                  <node leaf="false" class="jason.asSyntax.VarTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="7" timeBase="371" countDelta="0" countBase="57">
                                    <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="2" timeBase="14" countDelta="0" countBase="57"/>
                                    <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="6" countBase="0"/>
                                    <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="67" countDelta="0" countBase="57">
                                      <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="3" timeBase="25" countDelta="0" countBase="57">
                                        <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-2" timeBase="10" countDelta="0" countBase="57"/>
                                      </node>
                                    </node>
                                    <node leaf="false" class="java.util.Map" methodName="containsKey" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-4" timeBase="164" countDelta="0" countBase="57">
                                      <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="128" countDelta="0" countBase="57">
                                        <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="7" timeBase="14" countDelta="0" countBase="57"/>
                                        <node leaf="false" class="jason.asSyntax.VarTerm" methodName="calcHashCode" methodSignature="()I" timeDelta="1" timeBase="50" countDelta="0" countBase="57">
                                          <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="4" timeBase="9" countDelta="0" countBase="57"/>
                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="10" countDelta="0" countBase="57"/>
                                        </node>
                                        <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-2" timeBase="10" countDelta="0" countBase="57"/>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-5" timeBase="50" countDelta="0" countBase="57">
                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-9" timeBase="33" countDelta="0" countBase="57">
                                        <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="-3" timeBase="10" countDelta="0" countBase="57"/>
                                      </node>
                                    </node>
                                    <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-12" timeBase="25" countDelta="0" countBase="6">
                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-10" timeBase="18" countDelta="0" countBase="6">
                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="3" countDelta="-12" countBase="12"/>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="3" timeBase="10" countDelta="0" countBase="23">
                                    <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-2" timeBase="5" countDelta="0" countBase="23"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="2" timeBase="47" countDelta="0" countBase="5">
                                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="2" timeBase="0" countDelta="6" countBase="0"/>
                                    <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="6" countDelta="0" countBase="5">
                                      <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isEmpty" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                                    </node>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="1" timeBase="1" countDelta="0" countBase="14"/>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-25" timeBase="54" countDelta="0" countBase="76">
                                    <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-19" timeBase="28" countDelta="0" countBase="76"/>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-81" timeBase="904" countDelta="0" countBase="28">
                                <node leaf="false" class="jason.asSyntax.VarTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="7" timeBase="395" countDelta="0" countBase="42">
                                  <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="10" timeBase="85" countDelta="0" countBase="42">
                                    <node leaf="false" class="jason.asSyntax.VarTerm" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="8" timeBase="33" countDelta="0" countBase="32">
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="6" countDelta="0" countBase="64"/>
                                      <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-3" timeBase="8" countDelta="0" countBase="32"/>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="8" timeBase="30" countDelta="0" countBase="42">
                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-7" timeBase="20" countDelta="0" countBase="42"/>
                                  </node>
                                  <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="5" timeBase="6" countDelta="0" countBase="42"/>
                                  <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="4" timeBase="7" countDelta="0" countBase="32"/>
                                  <node leaf="false" class="java.util.Map" methodName="containsKey" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="136" countDelta="0" countBase="42">
                                    <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="5" timeBase="71" countDelta="0" countBase="42">
                                      <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="5" timeBase="2" countDelta="0" countBase="42"/>
                                      <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="2" timeBase="5" countDelta="0" countBase="42"/>
                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="calcHashCode" methodSignature="()I" timeDelta="-4" timeBase="38" countDelta="0" countBase="42">
                                        <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="9" countDelta="0" countBase="42"/>
                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="7" countDelta="0" countBase="42"/>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-2" timeBase="66" countDelta="0" countBase="32">
                                    <node leaf="false" class="jason.asSyntax.VarTerm" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="31" countDelta="0" countBase="32">
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="8" countDelta="0" countBase="64"/>
                                      <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="5" countDelta="0" countBase="32"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="17" countDelta="0" countBase="32">
                                      <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="3" timeBase="4" countDelta="0" countBase="32"/>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="3" timeBase="21" countDelta="0" countBase="48">
                                  <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="2" timeBase="8" countDelta="0" countBase="48"/>
                                </node>
                                <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="1" countDelta="0" countBase="11"/>
                                <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-7" countBase="7"/>
                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="14" countDelta="0" countBase="21"/>
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-78" timeBase="411" countDelta="0" countBase="12">
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="2" timeBase="3" countDelta="0" countBase="7">
                                    <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="4" timeBase="0" countDelta="7" countBase="0"/>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                                  <node leaf="true" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-2" timeBase="52" countDelta="0" countBase="2"/>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-6" timeBase="9" countDelta="0" countBase="13">
                                    <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-1" timeBase="1" countDelta="-13" countBase="13"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.VarTerm" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-60" timeBase="163" countDelta="0" countBase="11">
                                    <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="2" timeBase="1" countDelta="0" countBase="10"/>
                                    <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-2" timeBase="4" countDelta="0" countBase="11"/>
                                    <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-3" timeBase="22" countDelta="0" countBase="10">
                                      <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-2" timeBase="4" countDelta="0" countBase="10">
                                        <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-10" countBase="10"/>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="11" countDelta="0" countBase="10">
                                        <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="0" countDelta="10" countBase="0"/>
                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="4" countDelta="0" countBase="20"/>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.Pred" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-4" timeBase="11" countDelta="0" countBase="11">
                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="countVars" methodSignature="(Ljava/util/Map;)V" timeDelta="-1" timeBase="7" countDelta="0" countBase="11"/>
                                    </node>
                                    <node leaf="false" class="java.util.Map" methodName="containsKey" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-6" timeBase="41" countDelta="0" countBase="11">
                                      <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-4" timeBase="21" countDelta="0" countBase="11">
                                        <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="11"/>
                                        <node leaf="false" class="jason.asSyntax.VarTerm" methodName="calcHashCode" methodSignature="()I" timeDelta="-2" timeBase="11" countDelta="0" countBase="11">
                                          <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="1" countDelta="0" countBase="11"/>
                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="11"/>
                                        </node>
                                        <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-2" timeBase="4" countDelta="0" countBase="11"/>
                                      </node>
                                    </node>
                                    <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-51" timeBase="74" countDelta="0" countBase="11">
                                      <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-3" timeBase="9" countDelta="0" countBase="11">
                                        <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-6" timeBase="8" countDelta="0" countBase="11"/>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-48" timeBase="59" countDelta="0" countBase="10">
                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="2" countDelta="0" countBase="20"/>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                        </node>
                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-137" timeBase="2088" countDelta="0" countBase="25">
                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-128" timeBase="2065" countDelta="0" countBase="25">
                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-2" timeBase="9" countDelta="0" countBase="58"/>
                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-3" timeBase="322" countDelta="0" countBase="121">
                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="4" timeBase="270" countDelta="0" countBase="121">
                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="FillBuff" methodSignature="()V" timeDelta="11" timeBase="184" countDelta="0" countBase="3">
                                  <node leaf="true" class="java.io.Reader" methodName="read" methodSignature="([CII)I" timeDelta="11" timeBase="161" countDelta="0" countBase="3"/>
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                </node>
                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="3" timeBase="15" countDelta="0" countBase="95"/>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-4" timeBase="101" countDelta="0" countBase="25">
                              <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="6" timeBase="17" countDelta="0" countBase="25">
                                <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-3" timeBase="7" countDelta="0" countBase="25"/>
                              </node>
                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="2" timeBase="1" countDelta="0" countBase="25"/>
                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="9" countDelta="0" countBase="25"/>
                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-2" timeBase="8" countDelta="0" countBase="25"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-127" timeBase="1541" countDelta="0" countBase="53">
                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-11" timeBase="34" countDelta="0" countBase="4">
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-6" timeBase="13" countDelta="0" countBase="16">
                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-4" timeBase="7" countDelta="0" countBase="32"/>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-8" timeBase="13" countDelta="0" countBase="16">
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-10" timeBase="12" countDelta="0" countBase="16"/>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="-129" timeBase="1459" countDelta="0" countBase="29">
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-118" timeBase="1414" countDelta="0" countBase="29">
                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="17" timeBase="413" countDelta="0" countBase="1141">
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="12" timeBase="133" countDelta="0" countBase="1141"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddStates" methodSignature="(II)V" timeDelta="-24" timeBase="255" countDelta="0" countBase="258">
                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="1" timeBase="81" countDelta="0" countBase="774"/>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjAddStates" methodSignature="(II)V" timeDelta="-30" timeBase="126" countDelta="0" countBase="682"/>
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-44" timeBase="128" countDelta="0" countBase="201">
                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-24" timeBase="55" countDelta="0" countBase="402"/>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                        </node>
                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan" methodSignature="()Ljason/asSyntax/Plan;" timeDelta="-2512" timeBase="39636" countDelta="0" countBase="20">
                          <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="2" timeBase="111" countDelta="0" countBase="20">
                            <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="3" timeBase="88" countDelta="0" countBase="20">
                              <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="13" timeBase="2" countDelta="0" countBase="20"/>
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="2" timeBase="47" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="28" countDelta="0" countBase="20">
                                  <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="11" countDelta="0" countBase="20">
                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="4" countDelta="0" countBase="20"/>
                                  </node>
                                </node>
                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-3" timeBase="5" countDelta="0" countBase="20"/>
                              </node>
                              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="cloneLT" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="6" countDelta="0" countBase="1">
                                <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
                              </node>
                              <node leaf="true" class="jason.asSyntax.Pred" methodName="getAnnots" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                            </node>
                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-2" timeBase="4" countDelta="0" countBase="20"/>
                          </node>
                          <node leaf="true" class="jason.asSyntax.VarTerm" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                          <node leaf="true" class="jason.asSyntax.Structure" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="9" countDelta="0" countBase="13"/>
                          <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="16" countDelta="0" countBase="3">
                            <node leaf="false" class="jason.asSyntax.Pred" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="10" countDelta="0" countBase="3">
                              <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                              <node leaf="true" class="jason.asSyntax.Structure" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="7" countDelta="0" countBase="3"/>
                            </node>
                            <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                          </node>
                          <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;II)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="20"/>
                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="38" countDelta="0" countBase="65"/>
                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-2" timeBase="3" countDelta="0" countBase="20"/>
                          <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getBodyTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-4" timeBase="6" countDelta="0" countBase="18"/>
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="checkInternalActionsInContext" methodSignature="(Ljason/asSyntax/LogicalFormula;Ljason/asSemantics/Agent;)Ljason/asSyntax/InternalActionLiteral;" timeDelta="-13" timeBase="86" countDelta="0" countBase="20">
                            <node leaf="true" class="jason.asSemantics.DefaultInternalAction" methodName="canBeUsedInContext" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                            <node leaf="true" class="jason.asSyntax.LogExpr" methodName="getLHS" methodSignature="()Ljason/asSyntax/LogicalFormula;" timeDelta="-2" timeBase="10" countDelta="0" countBase="4"/>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="checkInternalActionsInContext" methodSignature="(Ljason/asSyntax/LogicalFormula;Ljason/asSemantics/Agent;)Ljason/asSyntax/InternalActionLiteral;" timeDelta="-11" timeBase="51" countDelta="0" countBase="8">
                              <node leaf="true" class="jason.asSyntax.InternalActionLiteral" methodName="getIA" methodSignature="(Ljason/asSemantics/Agent;)Ljason/asSemantics/InternalAction;" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                              <node leaf="true" class="jason.asSemantics.DefaultInternalAction" methodName="canBeUsedInContext" methodSignature="()Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="5"/>
                              <node leaf="false" class="jason.asSyntax.LogExpr" methodName="getLHS" methodSignature="()Ljason/asSyntax/LogicalFormula;" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                              </node>
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="checkInternalActionsInContext" methodSignature="(Ljason/asSyntax/LogicalFormula;Ljason/asSemantics/Agent;)Ljason/asSyntax/InternalActionLiteral;" timeDelta="-11" timeBase="25" countDelta="0" countBase="4">
                                <node leaf="true" class="jason.asSyntax.InternalActionLiteral" methodName="getIA" methodSignature="(Ljason/asSemantics/Agent;)Ljason/asSemantics/InternalAction;" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                <node leaf="true" class="jason.asSemantics.DefaultInternalAction" methodName="canBeUsedInContext" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                              </node>
                            </node>
                          </node>
                          <node leaf="false" class="jason.asSyntax.Plan" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Pred;Ljason/asSyntax/Trigger;Ljason/asSyntax/LogicalFormula;Ljason/asSyntax/PlanBody;)V" timeDelta="-17" timeBase="212" countDelta="0" countBase="20">
                            <node leaf="false" class="jason.asSyntax.Plan" methodName="setContext" methodSignature="(Ljason/asSyntax/LogicalFormula;)V" timeDelta="10" timeBase="35" countDelta="0" countBase="20">
                              <node leaf="false" class="java.lang.Object" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="16" timeBase="26" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.Atom" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="3" timeBase="17" countDelta="0" countBase="20">
                                  <node leaf="true" class="jason.asSyntax.InternalActionLiteral" methodName="isAtom" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                </node>
                              </node>
                            </node>
                            <node leaf="true" class="jason.asSyntax.Trigger" methodName="setAsTriggerTerm" methodSignature="(Z)V" timeDelta="3" timeBase="4" countDelta="0" countBase="20"/>
                            <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="setAsBodyTerm" methodSignature="(Z)V" timeDelta="2" timeBase="5" countDelta="0" countBase="18"/>
                            <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="8" countDelta="0" countBase="2">
                              <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;)V" timeDelta="1" timeBase="4" countDelta="0" countBase="2">
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-2" timeBase="4" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="1" countDelta="0" countBase="2">
                                      <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-3" timeBase="44" countDelta="0" countBase="20">
                              <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-2" timeBase="33" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="2" timeBase="16" countDelta="0" countBase="20">
                                  <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="11" countDelta="0" countBase="20">
                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="4" countDelta="0" countBase="20"/>
                                  </node>
                                </node>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.Plan" methodName="setLabel" methodSignature="(Ljason/asSyntax/Pred;)V" timeDelta="-24" timeBase="74" countDelta="0" countBase="20">
                              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                                <node leaf="true" class="jason.asSyntax.ListTermImpl$3" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/ListTermImpl;Ljason/asSyntax/ListTerm;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                              </node>
                              <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-3" timeBase="8" countDelta="0" countBase="2">
                                <node leaf="false" class="jason.asSyntax.ListTermImpl$3" methodName="hasNext" methodSignature="()Z" timeDelta="-2" timeBase="3" countDelta="0" countBase="2">
                                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isList" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                </node>
                              </node>
                              <node leaf="false" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-4" timeBase="8" countDelta="0" countBase="1">
                                <node leaf="false" class="jason.asSyntax.ListTermImpl$3" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1">
                                  <node leaf="true" class="jason.asSyntax.ListTermImpl$3" methodName="next" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.Atom" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-5" timeBase="15" countDelta="0" countBase="3">
                                <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="5" countDelta="0" countBase="3"/>
                              </node>
                            </node>
                          </node>
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-41" timeBase="731" countDelta="0" countBase="22">
                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-40" timeBase="719" countDelta="0" countBase="22">
                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="7" timeBase="22" countDelta="0" countBase="30">
                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="12" timeBase="11" countDelta="0" countBase="30">
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="14" timeBase="3" countDelta="0" countBase="30"/>
                                </node>
                              </node>
                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-2" timeBase="7" countDelta="0" countBase="42"/>
                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-5" timeBase="89" countDelta="0" countBase="22">
                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="2" timeBase="3" countDelta="0" countBase="22"/>
                                <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="13" countDelta="0" countBase="22">
                                  <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="1" timeBase="8" countDelta="0" countBase="22"/>
                                </node>
                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="1" timeBase="3" countDelta="0" countBase="22"/>
                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-4" timeBase="25" countDelta="0" countBase="20">
                                  <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="1" timeBase="4" countDelta="0" countBase="20"/>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-33" timeBase="569" countDelta="0" countBase="22">
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-1" timeBase="4" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="2" countDelta="0" countBase="2">
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-32" timeBase="552" countDelta="0" countBase="20">
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="4" timeBase="228" countDelta="0" countBase="400">
                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="4" timeBase="98" countDelta="0" countBase="800"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-8" timeBase="139" countDelta="0" countBase="400">
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="45" countDelta="0" countBase="400"/>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-61" timeBase="964" countDelta="0" countBase="20">
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="26" timeBase="226" countDelta="0" countBase="20">
                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="15" timeBase="43" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="12" timeBase="38" countDelta="0" countBase="20">
                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="10" timeBase="31" countDelta="0" countBase="20"/>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="list" methodSignature="()Ljason/asSyntax/ListTermImpl;" timeDelta="14" timeBase="84" countDelta="0" countBase="1">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="10" timeBase="21" countDelta="0" countBase="1">
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="10" timeBase="20" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="11" timeBase="7" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="11" timeBase="1" countDelta="0" countBase="1">
                                        <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="12" timeBase="0" countDelta="1" countBase="0"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term_in_list" methodSignature="()Ljason/asSyntax/Term;" timeDelta="2" timeBase="54" countDelta="0" countBase="1">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="45" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="3" timeBase="44" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="44" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="43" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="3" timeBase="42" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="2" timeBase="36" countDelta="0" countBase="1">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="2" timeBase="10" countDelta="0" countBase="1">
                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="1" timeBase="10" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-1" timeBase="5" countDelta="0" countBase="1">
                                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                </node>
                                                <node leaf="false" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="5" countDelta="0" countBase="1">
                                                  <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                  <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="1">
                                                    <node leaf="true" class="java.lang.Object" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                    <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="1" timeBase="5" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="1">
                                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="1">
                                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="5" countDelta="0" countBase="1">
                                              <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="append" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="3" countDelta="0" countBase="1">
                                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isEmpty" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                </node>
                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="1"/>
                              </node>
                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="3" timeBase="11" countDelta="0" countBase="20"/>
                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="2" timeBase="2" countDelta="0" countBase="20"/>
                              <node leaf="false" class="jason.asSyntax.Pred" methodName="setAnnots" methodSignature="(Ljason/asSyntax/ListTerm;)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="32" countDelta="0" countBase="1">
                                <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isTail" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                                <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="listTermIterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                <node leaf="false" class="jason.asSyntax.Pred" methodName="addAnnot" methodSignature="(Ljason/asSyntax/Term;)Z" timeDelta="-1" timeBase="13" countDelta="0" countBase="1">
                                  <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="insert" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="2" countDelta="0" countBase="1">
                                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljason/asSyntax/Term;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="listTermIterator" methodSignature="()Ljava/util/Iterator;" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljava/lang/Object;)I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                </node>
                                <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-1" timeBase="5" countDelta="0" countBase="2"/>
                              </node>
                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="8" countDelta="0" countBase="20"/>
                            </node>
                            <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="4" timeBase="4" countDelta="0" countBase="20"/>
                            <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="3" timeBase="6" countDelta="0" countBase="20"/>
                            <node leaf="false" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="29" countDelta="0" countBase="20">
                              <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-2" timeBase="21" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-2" timeBase="13" countDelta="0" countBase="20">
                                  <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-3" timeBase="5" countDelta="0" countBase="20"/>
                                </node>
                              </node>
                            </node>
                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="7" countDelta="0" countBase="40"/>
                            <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-12" timeBase="135" countDelta="0" countBase="20">
                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-18" timeBase="126" countDelta="0" countBase="20">
                                <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="cloneLT" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="7" countDelta="0" countBase="1"/>
                                <node leaf="true" class="jason.asSyntax.Pred" methodName="getAnnots" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="81" countDelta="0" countBase="20">
                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="20"/>
                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-5" timeBase="50" countDelta="0" countBase="20">
                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="2" countDelta="0" countBase="20"/>
                                    <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="16" countDelta="0" countBase="20"/>
                                  </node>
                                </node>
                                <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-4" timeBase="8" countDelta="0" countBase="20"/>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-15" timeBase="133" countDelta="0" countBase="20">
                              <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-7" timeBase="86" countDelta="0" countBase="20">
                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="3" countDelta="0" countBase="20"/>
                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-4" timeBase="5" countDelta="0" countBase="20"/>
                                <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="-7" timeBase="53" countDelta="0" countBase="20">
                                  <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="-4" timeBase="36" countDelta="0" countBase="20">
                                    <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="3" countDelta="0" countBase="20"/>
                                    <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-2" timeBase="12" countDelta="0" countBase="20">
                                      <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-3" timeBase="9" countDelta="0" countBase="20"/>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="true" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-9" timeBase="35" countDelta="0" countBase="20"/>
                            </node>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-45" timeBase="352" countDelta="0" countBase="20">
                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="2" timeBase="5" countDelta="0" countBase="20"/>
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-41" timeBase="326" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-4" timeBase="32" countDelta="0" countBase="20">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="-5" timeBase="24" countDelta="0" countBase="20">
                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-6" timeBase="15" countDelta="0" countBase="20"/>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-41" timeBase="279" countDelta="0" countBase="20">
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-34" timeBase="260" countDelta="0" countBase="20">
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="22"/>
                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-3" timeBase="27" countDelta="0" countBase="41">
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-3" timeBase="14" countDelta="0" countBase="41">
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="21"/>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-9" timeBase="51" countDelta="0" countBase="20">
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="2" timeBase="1" countDelta="0" countBase="20"/>
                                      <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="10" countDelta="0" countBase="20">
                                        <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="1" timeBase="5" countDelta="0" countBase="20"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="5" countDelta="0" countBase="20"/>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-2" timeBase="5" countDelta="0" countBase="20"/>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-4" timeBase="4" countDelta="-20" countBase="20"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-12" timeBase="140" countDelta="0" countBase="22">
                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="4" timeBase="4" countDelta="0" countBase="20"/>
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="-12" timeBase="102" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-11" timeBase="99" countDelta="0" countBase="2">
                                          <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjAddStates" methodSignature="(II)V" timeDelta="-6" timeBase="10" countDelta="0" countBase="54"/>
                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddStates" methodSignature="(II)V" timeDelta="-7" timeBase="30" countDelta="0" countBase="25">
                                            <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="6" timeBase="6" countDelta="0" countBase="75"/>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-220" timeBase="10111" countDelta="0" countBase="7">
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-215" timeBase="10104" countDelta="0" countBase="7">
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="50" timeBase="3317" countDelta="0" countBase="7">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="48" timeBase="2876" countDelta="0" countBase="5">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="51" timeBase="2872" countDelta="0" countBase="5">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="48" timeBase="2871" countDelta="0" countBase="5">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="48" timeBase="2869" countDelta="0" countBase="5">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="49" timeBase="2865" countDelta="0" countBase="5">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="50" timeBase="2862" countDelta="0" countBase="5">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="53" timeBase="2827" countDelta="0" countBase="5">
                                              <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="133" timeBase="1397" countDelta="0" countBase="4">
                                                <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="131" timeBase="1389" countDelta="0" countBase="4">
                                                  <node leaf="false" class="jason.asSemantics.Agent" methodName="getIA" methodSignature="(Ljava/lang/String;)Ljason/asSemantics/InternalAction;" timeDelta="129" timeBase="1324" countDelta="0" countBase="4">
                                                    <node leaf="false" class="java.lang.Class" methodName="forName" methodSignature="(Ljava/lang/String;)Ljava/lang/Class;" timeDelta="115" timeBase="1251" countDelta="0" countBase="1">
                                                      <node leaf="true" class="jason.stdlib.literal" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-1" timeBase="7" countDelta="0" countBase="1"/>
                                                    </node>
                                                    <node leaf="true" class="java.lang.Class" methodName="getMethod" methodSignature="(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;" timeDelta="6" timeBase="27" countDelta="0" countBase="1"/>
                                                    <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="3" timeBase="4" countDelta="0" countBase="8"/>
                                                    <node leaf="true" class="java.lang.reflect.Method" methodName="invoke" methodSignature="(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="3" timeBase="20" countDelta="0" countBase="1"/>
                                                    <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                    <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="4" countDelta="0" countBase="4"/>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="3" timeBase="52" countDelta="0" countBase="4">
                                                    <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="2" timeBase="3" countDelta="0" countBase="4"/>
                                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="3" countDelta="0" countBase="4">
                                                      <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-1" timeBase="3" countDelta="0" countBase="4"/>
                                                    </node>
                                                    <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="4"/>
                                                  </node>
                                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                </node>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="13" timeBase="51" countDelta="0" countBase="1">
                                                <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="12" timeBase="38" countDelta="0" countBase="1"/>
                                                <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="3" timeBase="6" countDelta="0" countBase="1"/>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                              <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="1" timeBase="2" countDelta="0" countBase="5"/>
                                              <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="6"/>
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-2" timeBase="61" countDelta="0" countBase="5">
                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="5"/>
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-2" timeBase="53" countDelta="0" countBase="5">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="1" timeBase="7" countDelta="0" countBase="5">
                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="-1" timeBase="5" countDelta="0" countBase="5"/>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="35" countDelta="0" countBase="5">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-4" timeBase="35" countDelta="0" countBase="5">
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="15" countDelta="0" countBase="5">
                                                        <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="3" timeBase="2" countDelta="0" countBase="5">
                                                          <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="5" countBase="0"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-5" countBase="5"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-3" timeBase="7" countDelta="0" countBase="5">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-1" timeBase="3" countDelta="0" countBase="1">
                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                              <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-3" timeBase="37" countDelta="0" countBase="5">
                                                <node leaf="false" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="7" countDelta="0" countBase="5">
                                                  <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="5"/>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-2" timeBase="25" countDelta="0" countBase="5">
                                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                                                  <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="-1" timeBase="13" countDelta="0" countBase="5">
                                                    <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="-1" timeBase="10" countDelta="0" countBase="5">
                                                      <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="1" countDelta="0" countBase="5"/>
                                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="4" countDelta="0" countBase="5"/>
                                                    </node>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="5">
                                                    <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-3" timeBase="8" countDelta="0" countBase="1">
                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-2" timeBase="3" countDelta="0" countBase="1"/>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="-5" timeBase="23" countDelta="0" countBase="5">
                                                <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-8" timeBase="22" countDelta="0" countBase="5">
                                                  <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-7" timeBase="20" countDelta="0" countBase="5">
                                                    <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="calcHashCode" methodSignature="()I" timeDelta="-6" timeBase="14" countDelta="0" countBase="1">
                                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                      <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="-2" timeBase="5" countDelta="0" countBase="1"/>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-22" timeBase="46" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-22" timeBase="46" countDelta="0" countBase="1">
                                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-22" timeBase="44" countDelta="0" countBase="1">
                                                    <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-16" timeBase="28" countDelta="0" countBase="2">
                                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-15" timeBase="25" countDelta="0" countBase="2">
                                                        <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                        <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-13" timeBase="21" countDelta="0" countBase="2">
                                                          <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-13" timeBase="21" countDelta="0" countBase="2">
                                                            <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-4" timeBase="8" countDelta="0" countBase="2">
                                                              <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                              <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="5" countDelta="0" countBase="2">
                                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                              </node>
                                                            </node>
                                                            <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-11" timeBase="11" countDelta="-2" countBase="2"/>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-22" timeBase="68" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-22" timeBase="67" countDelta="0" countBase="1">
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="8" countDelta="0" countBase="1">
                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                    <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-17" timeBase="54" countDelta="0" countBase="1">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-17" timeBase="54" countDelta="0" countBase="1">
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJJJ)I" timeDelta="-17" timeBase="52" countDelta="0" countBase="1">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa3_0" methodSignature="(JJ)I" timeDelta="-13" timeBase="45" countDelta="0" countBase="1">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfa_0" methodSignature="(IJJ)I" timeDelta="-14" timeBase="44" countDelta="0" countBase="1">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-13" timeBase="42" countDelta="0" countBase="1">
                                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-4" timeBase="10" countDelta="0" countBase="16">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="16"/>
                                                              </node>
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-4" timeBase="16" countDelta="0" countBase="16">
                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-2" timeBase="5" countDelta="0" countBase="32"/>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="-82" timeBase="580" countDelta="0" countBase="5">
                                                <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="2" timeBase="1" countDelta="0" countBase="5"/>
                                                <node leaf="true" class="jason.asSyntax.Structure" methodName="setTerms" methodSignature="(Ljava/util/List;)Ljason/asSyntax/Literal;" timeDelta="2" timeBase="3" countDelta="0" countBase="5"/>
                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="4" countDelta="0" countBase="15"/>
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-13" timeBase="83" countDelta="0" countBase="10">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-14" timeBase="78" countDelta="0" countBase="6">
                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-3" timeBase="3" countDelta="-6" countBase="6"/>
                                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-5" timeBase="18" countDelta="0" countBase="20">
                                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-7" timeBase="15" countDelta="0" countBase="20">
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-5" timeBase="6" countDelta="0" countBase="19"/>
                                                      </node>
                                                    </node>
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-5" timeBase="26" countDelta="0" countBase="6">
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="6"/>
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-6" countBase="6"/>
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-3" timeBase="3" countDelta="-6" countBase="6"/>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="-64" timeBase="449" countDelta="0" countBase="5">
                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                  <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="5" countDelta="0" countBase="6"/>
                                                  <node leaf="true" class="java.util.ArrayList" methodName="trimToSize" methodSignature="()V" timeDelta="-2" timeBase="5" countDelta="0" countBase="5"/>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-62" timeBase="430" countDelta="0" countBase="6">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="-3" timeBase="8" countDelta="0" countBase="6">
                                                      <node leaf="true" class="jason.asSyntax.VarTerm" methodName="isAtom" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="6"/>
                                                    </node>
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-59" timeBase="421" countDelta="0" countBase="6">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-59" timeBase="418" countDelta="0" countBase="6">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-59" timeBase="414" countDelta="0" countBase="6">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-27" timeBase="127" countDelta="0" countBase="6">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-24" timeBase="124" countDelta="0" countBase="6">
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="3" timeBase="2" countDelta="0" countBase="12"/>
                                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-2" timeBase="9" countDelta="0" countBase="7">
                                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="5" countDelta="0" countBase="7">
                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="7"/>
                                                                </node>
                                                              </node>
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-2" timeBase="57" countDelta="0" countBase="6">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-2" timeBase="55" countDelta="0" countBase="6">
                                                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="15" countDelta="0" countBase="27">
                                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-3" timeBase="5" countDelta="0" countBase="27"/>
                                                                  </node>
                                                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="1" timeBase="6" countDelta="0" countBase="27"/>
                                                                </node>
                                                              </node>
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-18" timeBase="42" countDelta="0" countBase="6">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="3" timeBase="1" countDelta="0" countBase="6"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="6" countBase="0"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="6"/>
                                                                <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-13" timeBase="17" countDelta="0" countBase="6">
                                                                  <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="2" timeBase="0" countDelta="6" countBase="0"/>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-33" timeBase="282" countDelta="0" countBase="6">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-32" timeBase="277" countDelta="0" countBase="6">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-31" timeBase="274" countDelta="0" countBase="6">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-35" timeBase="273" countDelta="0" countBase="6">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-29" timeBase="265" countDelta="0" countBase="6">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-29" timeBase="263" countDelta="0" countBase="6">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-6" timeBase="41" countDelta="0" countBase="6">
                                                                        <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="12"/>
                                                                        <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-2" timeBase="15" countDelta="0" countBase="6">
                                                                          <node leaf="true" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="7" countDelta="0" countBase="6"/>
                                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-3" timeBase="5" countDelta="0" countBase="6"/>
                                                                        </node>
                                                                        <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-4" timeBase="6" countDelta="0" countBase="6">
                                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="2" countDelta="0" countBase="6"/>
                                                                        </node>
                                                                      </node>
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-28" timeBase="221" countDelta="0" countBase="6">
                                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="-2" timeBase="65" countDelta="0" countBase="7">
                                                                          <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="3" timeBase="28" countDelta="0" countBase="7">
                                                                            <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjava/lang/String;)V" timeDelta="2" timeBase="22" countDelta="0" countBase="7">
                                                                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="19" countDelta="0" countBase="7">
                                                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="6" timeBase="13" countDelta="0" countBase="7">
                                                                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="4" timeBase="11" countDelta="0" countBase="7">
                                                                                    <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="5" timeBase="5" countDelta="0" countBase="7">
                                                                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="7"/>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="1" timeBase="1" countDelta="0" countBase="7"/>
                                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="3" countDelta="0" countBase="7"/>
                                                                          <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="7"/>
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-3" timeBase="12" countDelta="0" countBase="7">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="10" countDelta="0" countBase="1">
                                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                              </node>
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="6" countDelta="0" countBase="1">
                                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-6" timeBase="107" countDelta="0" countBase="6">
                                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="-2" timeBase="3" countDelta="0" countBase="6"/>
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-8" timeBase="100" countDelta="0" countBase="6">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-19" timeBase="94" countDelta="0" countBase="6">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="-14" timeBase="80" countDelta="0" countBase="6">
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="-16" timeBase="79" countDelta="0" countBase="6">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_55" methodSignature="()Z" timeDelta="1" timeBase="5" countDelta="0" countBase="6">
                                                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-2" timeBase="2" countDelta="-6" countBase="6"/>
                                                                                  </node>
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_58" methodSignature="()Z" timeDelta="-17" timeBase="68" countDelta="0" countBase="6">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_38" methodSignature="()Z" timeDelta="-15" timeBase="62" countDelta="0" countBase="6">
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-14" timeBase="60" countDelta="0" countBase="6">
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-17" timeBase="58" countDelta="0" countBase="6">
                                                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="6"/>
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-3" timeBase="10" countDelta="0" countBase="6">
                                                                                            <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                                                                                          </node>
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-8" timeBase="29" countDelta="0" countBase="6">
                                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-6" countBase="6"/>
                                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="6"/>
                                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="6"/>
                                                                                            <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="7" countDelta="0" countBase="6"/>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-10" timeBase="28" countDelta="0" countBase="1">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-9" timeBase="26" countDelta="0" countBase="1">
                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="8" countDelta="0" countBase="1">
                                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                              <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                                                            </node>
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-4" timeBase="13" countDelta="0" countBase="1">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-3" timeBase="12" countDelta="0" countBase="1">
                                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-3" timeBase="4" countDelta="0" countBase="7"/>
                                                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-4" timeBase="6" countDelta="0" countBase="7">
                                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="7"/>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="31" countDelta="0" countBase="5">
                                              <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="3" timeBase="1" countDelta="0" countBase="5">
                                                <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="3" timeBase="1" countDelta="0" countBase="5"/>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="2" timeBase="5" countDelta="0" countBase="10"/>
                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="3" countDelta="0" countBase="10"/>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="13" timeBase="282" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="13" timeBase="30" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="11" timeBase="30" countDelta="0" countBase="2">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="10" timeBase="7" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="10" timeBase="2" countDelta="0" countBase="2">
                                          <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                        </node>
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-2" timeBase="4" countDelta="0" countBase="4">
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="3" timeBase="248" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="247" countDelta="0" countBase="2">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="246" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="245" countDelta="0" countBase="2">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="245" countDelta="0" countBase="2">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="3" timeBase="243" countDelta="0" countBase="2">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="2" timeBase="231" countDelta="0" countBase="2">
                                                <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="3" timeBase="36" countDelta="0" countBase="2">
                                                  <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="4" timeBase="35" countDelta="0" countBase="2">
                                                    <node leaf="false" class="jason.asSemantics.Agent" methodName="getIA" methodSignature="(Ljava/lang/String;)Ljason/asSemantics/InternalAction;" timeDelta="2" timeBase="9" countDelta="0" countBase="2">
                                                      <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                      <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                      <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                      <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                      <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                    </node>
                                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="25" countDelta="0" countBase="2">
                                                      <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="2">
                                                        <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                      </node>
                                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="12" countDelta="0" countBase="2">
                                                        <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="2">
                                                          <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="1" timeBase="8" countDelta="0" countBase="2">
                                                            <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="2">
                                                              <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="1" countDelta="0" countBase="6"/>
                                                <node leaf="true" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="1" timeBase="2" countDelta="0" countBase="2"/>
                                                <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-1" timeBase="14" countDelta="0" countBase="2">
                                                  <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="1" timeBase="9" countDelta="0" countBase="2">
                                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                    <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="2">
                                                      <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="-1" timeBase="5" countDelta="0" countBase="2">
                                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                                        <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                      </node>
                                                    </node>
                                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                  </node>
                                                  <node leaf="false" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="1" countDelta="0" countBase="2">
                                                    <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                  </node>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="10" countDelta="0" countBase="2"/>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.LogExpr" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/LogExpr$LogicalOp;Ljason/asSyntax/LogicalFormula;)V" timeDelta="1" timeBase="14" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.BinaryStructure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;Ljason/asSyntax/Term;)V" timeDelta="1" timeBase="11" countDelta="0" countBase="2">
                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="2">
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="2"/>
                                    </node>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.LogExpr$LogicalOp$2" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-10" timeBase="138" countDelta="0" countBase="7">
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-10" timeBase="134" countDelta="0" countBase="7">
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="3" timeBase="0" countDelta="14" countBase="0"/>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-3" timeBase="78" countDelta="0" countBase="7">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="1" timeBase="10" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJJJ)I" timeDelta="2" timeBase="7" countDelta="0" countBase="2">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="2">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-4" timeBase="10" countDelta="0" countBase="1">
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="4" countDelta="0" countBase="4"/>
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-2" timeBase="4" countDelta="0" countBase="4">
                                          <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-2" timeBase="3" countDelta="0" countBase="8"/>
                                        </node>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-7" timeBase="30" countDelta="0" countBase="7">
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="4" countDelta="0" countBase="5">
                                        <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="-2" timeBase="2" countDelta="-5" countBase="5"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="7"/>
                                      <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="7" countDelta="0" countBase="7">
                                        <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-2" timeBase="4" countDelta="0" countBase="7"/>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-8" timeBase="14" countDelta="0" countBase="17">
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-5" timeBase="7" countDelta="0" countBase="17">
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-2" timeBase="3" countDelta="0" countBase="10"/>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-270" timeBase="6753" countDelta="0" countBase="4">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-105" timeBase="5095" countDelta="0" countBase="1">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="3808" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.LogExpr$LogicalOp" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="4" timeBase="132" countDelta="0" countBase="1">
                                      <node leaf="true" class="jason.asSyntax.LogExpr$LogicalOp$4" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="3" timeBase="7" countDelta="0" countBase="1"/>
                                      <node leaf="false" class="jason.asSyntax.LogExpr$LogicalOp$1" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="16" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.LogExpr$LogicalOp" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;ILjason/asSyntax/LogExpr$1;)V" timeDelta="-1" timeBase="12" countDelta="0" countBase="1">
                                          <node leaf="true" class="jason.asSyntax.LogExpr$LogicalOp" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
                                        </node>
                                      </node>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                    <node leaf="false" class="jason.asSyntax.LogExpr" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-4" timeBase="77" countDelta="0" countBase="1">
                                      <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="8" countDelta="0" countBase="1"/>
                                      <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-2" timeBase="57" countDelta="0" countBase="1"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.LogExpr" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/LogExpr$LogicalOp;Ljason/asSyntax/LogicalFormula;)V" timeDelta="-14" timeBase="45" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.BinaryStructure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;Ljason/asSyntax/Term;)V" timeDelta="-3" timeBase="25" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-3" timeBase="9" countDelta="0" countBase="1">
                                          <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                        </node>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-44" timeBase="795" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-3" timeBase="23" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="22" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="2">
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                          <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="11" countDelta="0" countBase="1"/>
                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="8" countDelta="0" countBase="1">
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                          </node>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-42" timeBase="772" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-41" timeBase="770" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-41" timeBase="770" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-42" timeBase="770" countDelta="0" countBase="1">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-42" timeBase="769" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-41" timeBase="768" countDelta="0" countBase="1">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-41" timeBase="760" countDelta="0" countBase="1">
                                                    <node leaf="true" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-1" timeBase="12" countDelta="0" countBase="1">
                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                    </node>
                                                    <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                    <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="-41" timeBase="649" countDelta="0" countBase="1">
                                                      <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="-41" timeBase="649" countDelta="0" countBase="1">
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                        <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="15" countDelta="0" countBase="1"/>
                                                        <node leaf="false" class="jason.asSemantics.Agent" methodName="getIA" methodSignature="(Ljava/lang/String;)Ljason/asSemantics/InternalAction;" timeDelta="-41" timeBase="633" countDelta="0" countBase="1">
                                                          <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="11" timeBase="1" countDelta="0" countBase="1"/>
                                                          <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                          <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                          <node leaf="true" class="java.lang.reflect.Method" methodName="invoke" methodSignature="(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="15" countDelta="0" countBase="1"/>
                                                          <node leaf="true" class="java.lang.Class" methodName="getMethod" methodSignature="(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;" timeDelta="-2" timeBase="20" countDelta="0" countBase="1"/>
                                                          <node leaf="false" class="java.lang.Class" methodName="forName" methodSignature="(Ljava/lang/String;)Ljava/lang/Class;" timeDelta="-49" timeBase="590" countDelta="0" countBase="1">
                                                            <node leaf="true" class="jason.stdlib.list" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.LogExpr" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/LogicalFormula;Ljason/asSyntax/LogExpr$LogicalOp;Ljason/asSyntax/LogicalFormula;)V" timeDelta="-3" timeBase="18" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.BinaryStructure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljava/lang/String;Ljason/asSyntax/Term;)V" timeDelta="-2" timeBase="12" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="addTerm" methodSignature="(Ljason/asSyntax/Term;)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="2">
                                        <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-105" timeBase="1265" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-103" timeBase="1263" countDelta="0" countBase="1">
                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="52" countDelta="0" countBase="1"/>
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-104" timeBase="1211" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-104" timeBase="1210" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-104" timeBase="1210" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-102" timeBase="1208" countDelta="0" countBase="1">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-103" timeBase="1208" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-104" timeBase="1208" countDelta="0" countBase="1">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-102" timeBase="1198" countDelta="0" countBase="1">
                                                    <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                    <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                    <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-1" timeBase="9" countDelta="0" countBase="1">
                                                      <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-1" timeBase="7" countDelta="0" countBase="1">
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                        <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="-2" timeBase="4" countDelta="0" countBase="1"/>
                                                      </node>
                                                      <node leaf="true" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                                    </node>
                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-1" timeBase="13" countDelta="0" countBase="1"/>
                                                    <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="-14" timeBase="209" countDelta="0" countBase="1">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="14" countDelta="0" countBase="2">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="14" countDelta="0" countBase="1">
                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="2" timeBase="3" countDelta="0" countBase="5"/>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="4" countDelta="0" countBase="1">
                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                          </node>
                                                        </node>
                                                      </node>
                                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="setTerms" methodSignature="(Ljava/util/List;)Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="-14" timeBase="185" countDelta="0" countBase="1">
                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                        <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                        <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-12" timeBase="177" countDelta="0" countBase="3">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                                            <node leaf="true" class="jason.asSyntax.VarTerm" methodName="isAtom" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                          </node>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-11" timeBase="172" countDelta="0" countBase="3">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-13" timeBase="171" countDelta="0" countBase="3">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-13" timeBase="169" countDelta="0" countBase="3">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="51" countDelta="0" countBase="3">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="47" countDelta="0" countBase="3">
                                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-2" timeBase="4" countDelta="0" countBase="6"/>
                                                                  </node>
                                                                </node>
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-13" timeBase="118" countDelta="0" countBase="3">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-13" timeBase="117" countDelta="0" countBase="3">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-12" timeBase="114" countDelta="0" countBase="3">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-14" timeBase="113" countDelta="0" countBase="3">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-13" timeBase="111" countDelta="0" countBase="3">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-13" timeBase="111" countDelta="0" countBase="3">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-3" timeBase="22" countDelta="0" countBase="3">
                                                                              <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3">
                                                                                <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                                              </node>
                                                                              <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="6"/>
                                                                              <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-3" timeBase="10" countDelta="0" countBase="3">
                                                                                <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-2" timeBase="3" countDelta="0" countBase="3"/>
                                                                              </node>
                                                                            </node>
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-11" timeBase="86" countDelta="0" countBase="3">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="2" timeBase="47" countDelta="0" countBase="3">
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="2" timeBase="44" countDelta="0" countBase="3">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="1" timeBase="40" countDelta="0" countBase="3">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="1" timeBase="35" countDelta="0" countBase="3">
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="1" timeBase="34" countDelta="0" countBase="3">
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_58" methodSignature="()Z" timeDelta="1" timeBase="28" countDelta="0" countBase="3">
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_38" methodSignature="()Z" timeDelta="1" timeBase="26" countDelta="0" countBase="3">
                                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="1" timeBase="25" countDelta="0" countBase="3">
                                                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="23" countDelta="0" countBase="3">
                                                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="10" countDelta="0" countBase="3"/>
                                                                                              </node>
                                                                                            </node>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                  </node>
                                                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                                </node>
                                                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                              </node>
                                                                              <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="2" countDelta="0" countBase="3"/>
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="-10" timeBase="31" countDelta="0" countBase="3">
                                                                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                                                <node leaf="true" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="3"/>
                                                                                <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                    <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="-84" timeBase="957" countDelta="0" countBase="1">
                                                      <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="-85" timeBase="956" countDelta="0" countBase="1">
                                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="7" timeBase="31" countDelta="0" countBase="1">
                                                          <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="7" timeBase="21" countDelta="0" countBase="3">
                                                            <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="18" countDelta="0" countBase="3">
                                                              <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                                              <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="1" timeBase="11" countDelta="0" countBase="3"/>
                                                            </node>
                                                          </node>
                                                          <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                                            <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                          </node>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                        <node leaf="false" class="jason.asSemantics.Agent" methodName="getIA" methodSignature="(Ljava/lang/String;)Ljason/asSemantics/InternalAction;" timeDelta="-91" timeBase="923" countDelta="0" countBase="1">
                                                          <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                          <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                          <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                          <node leaf="true" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-3" timeBase="4" countDelta="0" countBase="1"/>
                                                          <node leaf="true" class="java.lang.reflect.Method" methodName="invoke" methodSignature="(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-4" timeBase="18" countDelta="0" countBase="1"/>
                                                          <node leaf="true" class="java.lang.Class" methodName="getMethod" methodSignature="(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;" timeDelta="-5" timeBase="26" countDelta="0" countBase="1"/>
                                                          <node leaf="true" class="java.lang.Class" methodName="forName" methodSignature="(Ljava/lang/String;)Ljava/lang/Class;" timeDelta="-79" timeBase="867" countDelta="0" countBase="1"/>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-164" timeBase="1645" countDelta="0" countBase="4">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-79" timeBase="1411" countDelta="0" countBase="4">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-80" timeBase="1409" countDelta="0" countBase="4">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-80" timeBase="1408" countDelta="0" countBase="4">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-80" timeBase="1406" countDelta="0" countBase="4">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-81" timeBase="1404" countDelta="0" countBase="4">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-80" timeBase="1400" countDelta="0" countBase="4">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="21" countDelta="0" countBase="4">
                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="3" timeBase="3" countDelta="0" countBase="8">
                                                  <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="3" timeBase="1" countDelta="0" countBase="8"/>
                                                </node>
                                                <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="7" countDelta="0" countBase="4">
                                                  <node leaf="true" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-2" timeBase="3" countDelta="0" countBase="4"/>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="2" countDelta="0" countBase="4"/>
                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="8"/>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-82" timeBase="1377" countDelta="0" countBase="4">
                                                <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="10" timeBase="2" countDelta="0" countBase="4"/>
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="3" timeBase="40" countDelta="0" countBase="4">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="2" timeBase="34" countDelta="0" countBase="4">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="3" timeBase="25" countDelta="0" countBase="4">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="4" timeBase="22" countDelta="0" countBase="4">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="3" timeBase="10" countDelta="0" countBase="4">
                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                          <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="4" countDelta="0" countBase="4">
                                                            <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-2" timeBase="3" countDelta="0" countBase="4"/>
                                                          </node>
                                                        </node>
                                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="2" timeBase="2" countDelta="0" countBase="4">
                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="4"/>
                                                      </node>
                                                    </node>
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="1" timeBase="5" countDelta="0" countBase="4">
                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="4"/>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="12"/>
                                                <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="-8" timeBase="497" countDelta="0" countBase="4">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="5" timeBase="403" countDelta="0" countBase="4">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="7" timeBase="386" countDelta="0" countBase="8">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="5" timeBase="374" countDelta="0" countBase="8">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="4" timeBase="371" countDelta="0" countBase="8">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="6" timeBase="368" countDelta="0" countBase="8">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="6" timeBase="107" countDelta="0" countBase="8">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="3" timeBase="104" countDelta="0" countBase="8">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="3" timeBase="48" countDelta="0" countBase="8">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="3" timeBase="43" countDelta="0" countBase="8">
                                                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="6" timeBase="17" countDelta="0" countBase="38">
                                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="7" countDelta="0" countBase="38"/>
                                                                    </node>
                                                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="4" timeBase="3" countDelta="0" countBase="38"/>
                                                                  </node>
                                                                </node>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="12" countDelta="0" countBase="12"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-2" timeBase="5" countDelta="0" countBase="16"/>
                                                              </node>
                                                            </node>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="4" timeBase="254" countDelta="0" countBase="8">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="5" timeBase="249" countDelta="0" countBase="8">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="5" timeBase="244" countDelta="0" countBase="8">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="243" countDelta="0" countBase="8">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="240" countDelta="0" countBase="8">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="5" timeBase="234" countDelta="0" countBase="8">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="5" timeBase="186" countDelta="0" countBase="8">
                                                                          <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="6" countDelta="0" countBase="8">
                                                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="1" timeBase="1" countDelta="0" countBase="8"/>
                                                                          </node>
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="-1" timeBase="49" countDelta="0" countBase="8">
                                                                            <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="24" countDelta="0" countBase="8">
                                                                              <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjava/lang/String;)V" timeDelta="-1" timeBase="20" countDelta="0" countBase="8">
                                                                                <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-1" timeBase="18" countDelta="0" countBase="8">
                                                                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="13" countDelta="0" countBase="8"/>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                            <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-2" timeBase="3" countDelta="0" countBase="8"/>
                                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="8"/>
                                                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-3" timeBase="4" countDelta="0" countBase="8"/>
                                                                          </node>
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-6" timeBase="123" countDelta="0" countBase="8">
                                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="-2" timeBase="5" countDelta="0" countBase="8"/>
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-3" timeBase="113" countDelta="0" countBase="8">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="8" timeBase="92" countDelta="0" countBase="8">
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="8" timeBase="81" countDelta="0" countBase="8">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="8" timeBase="78" countDelta="0" countBase="8">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_58" methodSignature="()Z" timeDelta="7" timeBase="65" countDelta="0" countBase="8">
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_38" methodSignature="()Z" timeDelta="8" timeBase="59" countDelta="0" countBase="8">
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="7" timeBase="56" countDelta="0" countBase="8">
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="9" timeBase="53" countDelta="0" countBase="8">
                                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="9" timeBase="27" countDelta="0" countBase="8">
                                                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="10" timeBase="2" countDelta="0" countBase="8"/>
                                                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="8" countBase="0"/>
                                                                                              <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="5" countDelta="0" countBase="8">
                                                                                                <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-2" timeBase="4" countDelta="0" countBase="8"/>
                                                                                              </node>
                                                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="8"/>
                                                                                            </node>
                                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="2" timeBase="4" countDelta="0" countBase="8"/>
                                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-2" timeBase="7" countDelta="0" countBase="8">
                                                                                              <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-2" timeBase="4" countDelta="0" countBase="8"/>
                                                                                            </node>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="1" timeBase="7" countDelta="0" countBase="8">
                                                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="8"/>
                                                                                </node>
                                                                              </node>
                                                                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-11" timeBase="13" countDelta="0" countBase="8"/>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                    <node leaf="true" class="java.util.ArrayList" methodName="trimToSize" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="4"/>
                                                    <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="3" countDelta="0" countBase="4"/>
                                                    <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-4" timeBase="6" countDelta="0" countBase="8"/>
                                                  </node>
                                                  <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="3" timeBase="0" countDelta="4" countBase="0"/>
                                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="setTerms" methodSignature="(Ljava/util/List;)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="3" countDelta="0" countBase="4">
                                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                  </node>
                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="6" countDelta="0" countBase="12"/>
                                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-9" timeBase="61" countDelta="0" countBase="8">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-11" timeBase="59" countDelta="0" countBase="4">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="2" timeBase="7" countDelta="0" countBase="4">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-1" timeBase="5" countDelta="0" countBase="3">
                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                                          <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                        </node>
                                                      </node>
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-3" timeBase="3" countDelta="-4" countBase="4"/>
                                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-5" timeBase="12" countDelta="0" countBase="17">
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-2" timeBase="7" countDelta="0" countBase="17"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-10" timeBase="21" countDelta="0" countBase="4">
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="4" countDelta="0" countBase="4"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-11" timeBase="12" countDelta="0" countBase="4"/>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="-9" timeBase="14" countDelta="0" countBase="4">
                                                  <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-7" timeBase="12" countDelta="0" countBase="4">
                                                    <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-8" timeBase="11" countDelta="0" countBase="4">
                                                      <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-8" timeBase="8" countDelta="-4" countBase="4"/>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="-76" timeBase="775" countDelta="0" countBase="4">
                                                  <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="-73" timeBase="770" countDelta="0" countBase="4">
                                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="77" countDelta="0" countBase="4">
                                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="4">
                                                        <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="43" countDelta="0" countBase="8">
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="2" timeBase="2" countDelta="0" countBase="8"/>
                                                        <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="34" countDelta="0" countBase="8">
                                                          <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-1" timeBase="29" countDelta="0" countBase="8">
                                                            <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="25" countDelta="0" countBase="8">
                                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="2" timeBase="17" countDelta="0" countBase="8">
                                                                <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="8"/>
                                                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="13" countDelta="0" countBase="8">
                                                                  <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="5" timeBase="1" countDelta="0" countBase="8">
                                                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="3" timeBase="0" countDelta="8" countBase="0"/>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                              <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-3" timeBase="4" countDelta="0" countBase="8"/>
                                                            </node>
                                                          </node>
                                                          <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="8"/>
                                                        </node>
                                                      </node>
                                                      <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="1" timeBase="3" countDelta="0" countBase="4"/>
                                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="4"/>
                                                      <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-3" timeBase="5" countDelta="0" countBase="8"/>
                                                    </node>
                                                    <node leaf="false" class="jason.asSemantics.Agent" methodName="getIA" methodSignature="(Ljava/lang/String;)Ljason/asSemantics/InternalAction;" timeDelta="-70" timeBase="688" countDelta="0" countBase="4">
                                                      <node leaf="true" class="java.lang.Class" methodName="getMethod" methodSignature="(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;" timeDelta="1" timeBase="21" countDelta="0" countBase="1"/>
                                                      <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="4" countDelta="0" countBase="4"/>
                                                      <node leaf="true" class="java.lang.reflect.Method" methodName="invoke" methodSignature="(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="16" countDelta="0" countBase="1"/>
                                                      <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="3" countDelta="0" countBase="4"/>
                                                      <node leaf="true" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                                      <node leaf="true" class="java.lang.Class" methodName="forName" methodSignature="(Ljava/lang/String;)Ljava/lang/Class;" timeDelta="-67" timeBase="628" countDelta="0" countBase="1"/>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-83" timeBase="229" countDelta="0" countBase="4">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-83" timeBase="228" countDelta="0" countBase="4">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="17" countDelta="0" countBase="4">
                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="5" countDelta="0" countBase="4">
                                          <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                                        </node>
                                        <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="4" countDelta="0" countBase="4"/>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-6" timeBase="100" countDelta="0" countBase="4">
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="-6" timeBase="98" countDelta="0" countBase="4">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-2" timeBase="4" countDelta="0" countBase="4"/>
                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-2" timeBase="90" countDelta="0" countBase="4">
                                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-3" timeBase="19" countDelta="0" countBase="46">
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-5" timeBase="10" countDelta="0" countBase="46"/>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-5" timeBase="47" countDelta="0" countBase="46">
                                              <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="3" timeBase="12" countDelta="0" countBase="92"/>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-76" timeBase="96" countDelta="0" countBase="20">
                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-66" timeBase="85" countDelta="0" countBase="20">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-7" timeBase="11" countDelta="0" countBase="20"/>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="trigger" methodSignature="()Ljason/asSyntax/Trigger;" timeDelta="-552" timeBase="8073" countDelta="0" countBase="20">
                            <node leaf="false" class="jason.asSyntax.Trigger" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Trigger$TEOperator;Ljason/asSyntax/Trigger$TEType;Ljason/asSyntax/Literal;)V" timeDelta="3" timeBase="73" countDelta="0" countBase="20">
                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="3" timeBase="2" countDelta="0" countBase="20"/>
                              <node leaf="true" class="jason.asSyntax.Trigger" methodName="setTrigOp" methodSignature="(Ljason/asSyntax/Trigger$TEOperator;)V" timeDelta="3" timeBase="4" countDelta="0" countBase="20"/>
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="35" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="2" timeBase="25" countDelta="0" countBase="20">
                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-2" timeBase="19" countDelta="0" countBase="20">
                                    <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="10" countDelta="0" countBase="20">
                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="4" countDelta="0" countBase="20"/>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="-2" timeBase="3" countDelta="0" countBase="20"/>
                            </node>
                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-8" timeBase="21" countDelta="0" countBase="40"/>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-14" timeBase="202" countDelta="0" countBase="21">
                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-8" timeBase="185" countDelta="0" countBase="21">
                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="16" countDelta="0" countBase="22">
                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="12" countDelta="0" countBase="22">
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="22"/>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="52" countDelta="0" countBase="21">
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="2" timeBase="3" countDelta="0" countBase="21"/>
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="2" timeBase="2" countDelta="0" countBase="21"/>
                                  <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-8" timeBase="15" countDelta="0" countBase="21">
                                    <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-4" timeBase="7" countDelta="0" countBase="21"/>
                                  </node>
                                </node>
                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-5" timeBase="12" countDelta="0" countBase="41"/>
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-6" timeBase="84" countDelta="0" countBase="21">
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-5" timeBase="65" countDelta="0" countBase="20">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfa_0" methodSignature="(IJJ)I" timeDelta="-1" timeBase="24" countDelta="0" countBase="15">
                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="1" timeBase="7" countDelta="0" countBase="15"/>
                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopStringLiteralDfa_0" methodSignature="(IJJ)I" timeDelta="-6" timeBase="8" countDelta="0" countBase="15"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-2" timeBase="12" countDelta="0" countBase="20">
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="0" countDelta="20" countBase="0"/>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJJJ)I" timeDelta="-2" timeBase="13" countDelta="0" countBase="5"/>
                                  </node>
                                </node>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-527" timeBase="7677" countDelta="0" countBase="20">
                              <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="1" timeBase="5" countDelta="0" countBase="20"/>
                              <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="-2" timeBase="6" countDelta="0" countBase="20"/>
                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-4" timeBase="7" countDelta="0" countBase="40"/>
                              <node leaf="false" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="-6" timeBase="32" countDelta="0" countBase="20">
                                <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-3" timeBase="20" countDelta="0" countBase="20">
                                  <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-2" timeBase="9" countDelta="0" countBase="20">
                                    <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="20"/>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-24" timeBase="145" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-7" timeBase="95" countDelta="0" countBase="20">
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="3" countDelta="0" countBase="20"/>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="12" countDelta="0" countBase="20">
                                    <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-8" timeBase="11" countDelta="0" countBase="20"/>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="4" countDelta="0" countBase="20"/>
                                  <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="-3" timeBase="46" countDelta="0" countBase="20">
                                    <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="-2" timeBase="34" countDelta="0" countBase="20">
                                      <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="4" countDelta="0" countBase="20"/>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-11" timeBase="31" countDelta="0" countBase="20">
                                  <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="5" countDelta="0" countBase="20"/>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-32" timeBase="731" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-32" timeBase="722" countDelta="0" countBase="20">
                                  <node leaf="true" class="jason.asSyntax.Pred" methodName="getAnnots" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                  <node leaf="false" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-4" timeBase="16" countDelta="0" countBase="20">
                                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isEmpty" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="cloneLT" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-16" timeBase="90" countDelta="0" countBase="2">
                                    <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-17" timeBase="89" countDelta="0" countBase="2">
                                      <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="4" countDelta="0" countBase="2"/>
                                      <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-3" timeBase="26" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-2" timeBase="24" countDelta="0" countBase="2">
                                          <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="4" countDelta="0" countBase="2">
                                            <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                                          <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-2" timeBase="15" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="15" countDelta="0" countBase="1">
                                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="13" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="12" countDelta="0" countBase="1">
                                                  <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="11" countDelta="0" countBase="1">
                                                    <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                    <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                    </node>
                                                    <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                    <node leaf="true" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="6" countDelta="0" countBase="1"/>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-16" timeBase="57" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-14" timeBase="50" countDelta="0" countBase="2">
                                          <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-16" timeBase="42" countDelta="0" countBase="2">
                                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                            <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-16" timeBase="39" countDelta="0" countBase="2">
                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-7" timeBase="29" countDelta="0" countBase="2">
                                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="2">
                                                  <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                </node>
                                                <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2">
                                                  <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-6" timeBase="12" countDelta="0" countBase="1">
                                                  <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-6" timeBase="11" countDelta="0" countBase="1">
                                                    <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-6" timeBase="10" countDelta="0" countBase="1">
                                                      <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-5" timeBase="9" countDelta="0" countBase="1">
                                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="5" countDelta="0" countBase="1">
                                                          <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                          <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                                                            <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-21" timeBase="606" countDelta="0" countBase="20">
                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="7" timeBase="9" countDelta="0" countBase="20">
                                      <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="2" timeBase="4" countDelta="0" countBase="20"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="2" timeBase="60" countDelta="0" countBase="5">
                                      <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="3" timeBase="53" countDelta="0" countBase="5">
                                        <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="2" timeBase="25" countDelta="0" countBase="5">
                                          <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="20" countDelta="0" countBase="5">
                                            <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="2" timeBase="0" countDelta="5" countBase="0"/>
                                            <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-1" timeBase="17" countDelta="0" countBase="5">
                                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="2" timeBase="13" countDelta="0" countBase="5">
                                                <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="5">
                                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="3" timeBase="6" countDelta="0" countBase="5">
                                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="3" timeBase="0" countDelta="5" countBase="0"/>
                                                    <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="5">
                                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="2" countDelta="-5" countBase="5"/>
                                                    </node>
                                                  </node>
                                                  <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-5" countBase="5"/>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-3" timeBase="3" countDelta="-5" countBase="5"/>
                                        </node>
                                      </node>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="14"/>
                                    <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="192" countDelta="0" countBase="35">
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="3" timeBase="1" countDelta="0" countBase="35"/>
                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-7" timeBase="160" countDelta="0" countBase="35">
                                        <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-9" timeBase="121" countDelta="0" countBase="35">
                                          <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-7" timeBase="107" countDelta="0" countBase="35">
                                            <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-2" timeBase="7" countDelta="0" countBase="35"/>
                                            <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="80" countDelta="0" countBase="35">
                                              <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="7" countDelta="0" countBase="35"/>
                                              <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="50" countDelta="0" countBase="35">
                                                <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="23" countDelta="0" countBase="35">
                                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="11" countDelta="0" countBase="35"/>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                    <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-1" timeBase="40" countDelta="0" countBase="20"/>
                                    <node leaf="false" class="jason.asSyntax.UnnamedVar" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-3" timeBase="83" countDelta="0" countBase="16">
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="4" countDelta="0" countBase="16"/>
                                      <node leaf="false" class="jason.asSyntax.UnnamedVar" methodName="cloneNS" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Literal;" timeDelta="-4" timeBase="71" countDelta="0" countBase="16">
                                        <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="16"/>
                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="5" countDelta="0" countBase="16"/>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-4" timeBase="53" countDelta="0" countBase="70">
                                      <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-9" timeBase="24" countDelta="0" countBase="70"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-5" timeBase="36" countDelta="0" countBase="20">
                                      <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="3" timeBase="10" countDelta="0" countBase="20">
                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="5" timeBase="2" countDelta="0" countBase="20"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="20"/>
                                    </node>
                                    <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-6" timeBase="26" countDelta="0" countBase="70"/>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-43" timeBase="621" countDelta="0" countBase="20">
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-42" timeBase="609" countDelta="0" countBase="20">
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="7" countDelta="0" countBase="40"/>
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-16" timeBase="95" countDelta="0" countBase="20">
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="2" timeBase="3" countDelta="0" countBase="20"/>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="32" countDelta="0" countBase="20"/>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-3" timeBase="5" countDelta="0" countBase="20"/>
                                    <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="15" countDelta="0" countBase="20">
                                      <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="20"/>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-13" timeBase="16" countDelta="0" countBase="20"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-19" timeBase="472" countDelta="0" countBase="20">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-18" timeBase="463" countDelta="0" countBase="20">
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="7" timeBase="142" countDelta="0" countBase="298">
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-3" timeBase="37" countDelta="0" countBase="298"/>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-10" timeBase="178" countDelta="0" countBase="298">
                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-1" timeBase="62" countDelta="0" countBase="596"/>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="-417" timeBase="5900" countDelta="0" countBase="20">
                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="20"/>
                                <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="20"/>
                                <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-2" timeBase="45" countDelta="0" countBase="20">
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-5" timeBase="40" countDelta="0" countBase="20">
                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-5" timeBase="29" countDelta="0" countBase="20">
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-1" timeBase="18" countDelta="0" countBase="20"/>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.Pred" methodName="setAnnots" methodSignature="(Ljason/asSyntax/ListTerm;)Ljason/asSyntax/Literal;" timeDelta="-2" timeBase="69" countDelta="0" countBase="2">
                                  <node leaf="false" class="jason.asSyntax.Pred" methodName="addAnnot" methodSignature="(Ljason/asSyntax/Term;)Z" timeDelta="-2" timeBase="39" countDelta="0" countBase="3">
                                    <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="4"/>
                                    <node leaf="false" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="6" countDelta="0" countBase="4">
                                      <node leaf="false" class="jason.asSyntax.ListTermImpl$2" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="3" timeBase="4" countDelta="0" countBase="4">
                                        <node leaf="false" class="jason.asSyntax.ListTermImpl$2" methodName="next" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-2" timeBase="4" countDelta="0" countBase="4">
                                          <node leaf="false" class="jason.asSyntax.ListTermImpl$ListTermIterator" methodName="moveNext" methodSignature="()V" timeDelta="-2" timeBase="4" countDelta="0" countBase="4">
                                            <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getNext" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-2" timeBase="3" countDelta="0" countBase="4"/>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljava/lang/Object;)I" timeDelta="-1" timeBase="8" countDelta="0" countBase="4">
                                      <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljason/asSyntax/Term;)I" timeDelta="-2" timeBase="7" countDelta="0" countBase="4">
                                        <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isList" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="insert" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="8" countDelta="0" countBase="3">
                                      <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljason/asSyntax/Term;)V" timeDelta="1" timeBase="6" countDelta="0" countBase="3">
                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="4" countDelta="0" countBase="3">
                                          <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="3">
                                            <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                              <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="3">
                                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-2" timeBase="12" countDelta="0" countBase="5"/>
                                </node>
                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-10" timeBase="24" countDelta="0" countBase="60"/>
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="setTerms" methodSignature="(Ljava/util/List;)Ljason/asSyntax/Literal;" timeDelta="-18" timeBase="29" countDelta="0" countBase="20">
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="-2" timeBase="3" countDelta="0" countBase="20"/>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-28" timeBase="256" countDelta="0" countBase="40">
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-19" timeBase="232" countDelta="0" countBase="20">
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="5" countDelta="0" countBase="29"/>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="50" countDelta="0" countBase="20">
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="4" timeBase="2" countDelta="0" countBase="20"/>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="20"/>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="20"/>
                                      <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="10" countDelta="0" countBase="20">
                                        <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-4" timeBase="5" countDelta="0" countBase="20"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="7" countDelta="0" countBase="20"/>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-5" timeBase="63" countDelta="0" countBase="88"/>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-5" timeBase="70" countDelta="0" countBase="20">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-1" timeBase="35" countDelta="0" countBase="16">
                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="7" countDelta="0" countBase="16">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="3" timeBase="0" countDelta="16" countBase="0"/>
                                        </node>
                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-3" timeBase="3" countDelta="-9" countBase="9"/>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="list" methodSignature="()Ljason/asSyntax/ListTermImpl;" timeDelta="-49" timeBase="538" countDelta="0" countBase="2">
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="15" countDelta="0" countBase="2"/>
                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                  <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="append" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="14" countDelta="0" countBase="3">
                                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isEmpty" methodSignature="()Z" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                    <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isTail" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term_in_list" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-50" timeBase="459" countDelta="0" countBase="3">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-2" timeBase="23" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="22" countDelta="0" countBase="1">
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="16" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-1" timeBase="15" countDelta="0" countBase="1">
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-49" timeBase="423" countDelta="0" countBase="3">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-47" timeBase="421" countDelta="0" countBase="3">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-48" timeBase="421" countDelta="0" countBase="3">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-49" timeBase="420" countDelta="0" countBase="3">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-48" timeBase="418" countDelta="0" countBase="3">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="16" countDelta="0" countBase="3">
                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="1" countDelta="0" countBase="6"/>
                                                <node leaf="true" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="4" countDelta="0" countBase="6">
                                                  <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="6"/>
                                                </node>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-47" timeBase="400" countDelta="0" countBase="3">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="6" timeBase="250" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="12" timeBase="27" countDelta="0" countBase="6">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="10" timeBase="25" countDelta="0" countBase="3">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="10" timeBase="8" countDelta="0" countBase="3">
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="11" timeBase="0" countDelta="3" countBase="0"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                      </node>
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-3" timeBase="3" countDelta="-3" countBase="3"/>
                                                      </node>
                                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="11" countDelta="0" countBase="3"/>
                                                    </node>
                                                  </node>
                                                  <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="3" timeBase="0" countDelta="3" countBase="0"/>
                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="0" countDelta="9" countBase="0"/>
                                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="setTerms" methodSignature="(Ljava/util/List;)Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="-7" timeBase="201" countDelta="0" countBase="3">
                                                    <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="3" timeBase="0" countDelta="3" countBase="0"/>
                                                    <node leaf="true" class="java.util.ArrayList" methodName="trimToSize" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-9" timeBase="194" countDelta="0" countBase="3">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="1" timeBase="10" countDelta="0" countBase="3">
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-6" timeBase="178" countDelta="0" countBase="3">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-6" timeBase="177" countDelta="0" countBase="3">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-10" timeBase="177" countDelta="0" countBase="3">
                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="59" countDelta="0" countBase="3"/>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-9" timeBase="116" countDelta="0" countBase="3">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-10" timeBase="114" countDelta="0" countBase="3">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-9" timeBase="112" countDelta="0" countBase="3">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-9" timeBase="111" countDelta="0" countBase="3">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-9" timeBase="110" countDelta="0" countBase="3">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-10" timeBase="108" countDelta="0" countBase="3">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-10" timeBase="90" countDelta="0" countBase="3">
                                                                          <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                                                          <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-11" timeBase="48" countDelta="0" countBase="3">
                                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-12" timeBase="44" countDelta="0" countBase="3">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-9" timeBase="33" countDelta="0" countBase="3">
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="-10" timeBase="29" countDelta="0" countBase="2">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="-11" timeBase="28" countDelta="0" countBase="2">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_58" methodSignature="()Z" timeDelta="1" timeBase="14" countDelta="0" countBase="2">
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_38" methodSignature="()Z" timeDelta="1" timeBase="13" countDelta="0" countBase="2">
                                                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="13" countDelta="0" countBase="2"/>
                                                                                      </node>
                                                                                    </node>
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_55" methodSignature="()Z" timeDelta="-11" timeBase="12" countDelta="0" countBase="2">
                                                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-11" timeBase="11" countDelta="-2" countBase="2"/>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                <node leaf="false" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="5" countDelta="0" countBase="3">
                                                  <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="4" countDelta="0" countBase="3">
                                                    <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="3">
                                                      <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-2" timeBase="21" countDelta="0" countBase="3"/>
                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="2" countDelta="-6" countBase="6"/>
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-3" timeBase="27" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-1" timeBase="21" countDelta="0" countBase="3">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-2" timeBase="16" countDelta="0" countBase="3">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="15" countDelta="0" countBase="3">
                                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="2" countDelta="0" countBase="3">
                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                                        </node>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="3">
                                                          <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="8" countDelta="0" countBase="3">
                                                          <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="1" countDelta="0" countBase="3">
                                                            <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                          </node>
                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-48" timeBase="86" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-48" timeBase="84" countDelta="0" countBase="3">
                                                    <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-47" timeBase="80" countDelta="0" countBase="3">
                                                      <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                                        <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="3">
                                                        <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-13" timeBase="17" countDelta="0" countBase="3">
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                        <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-10" timeBase="12" countDelta="0" countBase="3">
                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-11" timeBase="11" countDelta="-3" countBase="3"/>
                                                        </node>
                                                      </node>
                                                      <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-13" timeBase="15" countDelta="0" countBase="3"/>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="-312" timeBase="4873" countDelta="0" countBase="20">
                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="7" timeBase="10" countDelta="0" countBase="50"/>
                                  <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="4" timeBase="26" countDelta="0" countBase="70"/>
                                  <node leaf="true" class="java.util.ArrayList" methodName="trimToSize" methodSignature="()V" timeDelta="-3" timeBase="18" countDelta="0" countBase="20"/>
                                  <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-4" timeBase="12" countDelta="0" countBase="20"/>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-281" timeBase="4709" countDelta="0" countBase="70">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="-16" timeBase="172" countDelta="0" countBase="70">
                                      <node leaf="true" class="jason.asSyntax.VarTerm" methodName="isAtom" methodSignature="()Z" timeDelta="-1" timeBase="14" countDelta="0" countBase="51"/>
                                      <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="32" countDelta="0" countBase="14">
                                        <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="20" countDelta="0" countBase="14">
                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="3" countDelta="0" countBase="14"/>
                                          <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="9" countDelta="0" countBase="14">
                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="3" countDelta="0" countBase="14"/>
                                          </node>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="isAtom" methodSignature="()Z" timeDelta="-5" timeBase="45" countDelta="0" countBase="14">
                                        <node leaf="false" class="jason.asSyntax.Pred" methodName="isAtom" methodSignature="()Z" timeDelta="-1" timeBase="31" countDelta="0" countBase="14">
                                          <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="14"/>
                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="isAtom" methodSignature="()Z" timeDelta="-2" timeBase="17" countDelta="0" countBase="14">
                                            <node leaf="true" class="jason.asSyntax.Structure" methodName="hasTerm" methodSignature="()Z" timeDelta="2" timeBase="8" countDelta="0" countBase="14"/>
                                          </node>
                                        </node>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-10" timeBase="16" countDelta="0" countBase="28"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-243" timeBase="4486" countDelta="0" countBase="70">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-236" timeBase="4451" countDelta="0" countBase="70">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-234" timeBase="4420" countDelta="0" countBase="70">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-85" timeBase="1038" countDelta="0" countBase="70">
                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-85" timeBase="1000" countDelta="0" countBase="70">
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="8" timeBase="15" countDelta="0" countBase="135"/>
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-8" timeBase="287" countDelta="0" countBase="70">
                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="7" timeBase="67" countDelta="0" countBase="65">
                                                  <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="12" timeBase="25" countDelta="0" countBase="65"/>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="3" timeBase="10" countDelta="0" countBase="70"/>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="2" timeBase="11" countDelta="0" countBase="70"/>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="14" countDelta="0" countBase="70"/>
                                                <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-5" timeBase="50" countDelta="0" countBase="70">
                                                  <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-7" timeBase="20" countDelta="0" countBase="70"/>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-6" timeBase="16" countDelta="0" countBase="70"/>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-15" timeBase="113" countDelta="0" countBase="115">
                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-9" timeBase="65" countDelta="0" countBase="115">
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-3" timeBase="24" countDelta="0" countBase="115"/>
                                                </node>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-48" timeBase="474" countDelta="0" countBase="70">
                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="1" timeBase="2" countDelta="0" countBase="5"/>
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-2" timeBase="34" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="2" countDelta="0" countBase="3">
                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJJJ)I" timeDelta="-2" timeBase="29" countDelta="0" countBase="3">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfa_0" methodSignature="(IJJ)I" timeDelta="-1" timeBase="27" countDelta="0" countBase="3">
                                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-1" timeBase="24" countDelta="0" countBase="3"/>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-43" timeBase="407" countDelta="0" countBase="62">
                                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-8" timeBase="32" countDelta="0" countBase="195"/>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-14" timeBase="72" countDelta="0" countBase="90">
                                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-2" timeBase="23" countDelta="0" countBase="180"/>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-15" timeBase="145" countDelta="0" countBase="285">
                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="3" timeBase="38" countDelta="0" countBase="285"/>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-153" timeBase="3330" countDelta="0" countBase="70">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="list" methodSignature="()Ljason/asSyntax/ListTermImpl;" timeDelta="6" timeBase="401" countDelta="0" countBase="5">
                                              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="append" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="15" timeBase="10" countDelta="0" countBase="3">
                                                <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="7" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="7" countDelta="0" countBase="3">
                                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="3">
                                                      <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="3">
                                                        <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isEmpty" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="2" timeBase="50" countDelta="0" countBase="3">
                                                <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="2" timeBase="10" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="2" timeBase="6" countDelta="0" countBase="3">
                                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="3">
                                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-2" timeBase="6" countDelta="0" countBase="3">
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="3"/>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                              <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="setNext" methodSignature="(Ljason/asSyntax/Term;)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="26" countDelta="0" countBase="16">
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="16" countDelta="0" countBase="3">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="7" countDelta="0" countBase="3">
                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                    <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="3" countDelta="0" countBase="3">
                                                      <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                    </node>
                                                  </node>
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                </node>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term_in_list" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-3" timeBase="176" countDelta="0" countBase="3">
                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-3" timeBase="173" countDelta="0" countBase="3"/>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-4" timeBase="17" countDelta="0" countBase="5"/>
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-10" timeBase="83" countDelta="0" countBase="8">
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-9" timeBase="78" countDelta="0" countBase="8">
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="4" countDelta="0" countBase="14"/>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="18" countDelta="0" countBase="8">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-2" timeBase="17" countDelta="0" countBase="6">
                                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="2" timeBase="1" countDelta="0" countBase="7"/>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1">
                                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                      </node>
                                                    </node>
                                                  </node>
                                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-10" timeBase="15" countDelta="0" countBase="8">
                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-14" timeBase="14" countDelta="-8" countBase="8"/>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-2" timeBase="30" countDelta="0" countBase="5">
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="25" countDelta="0" countBase="5">
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="3" timeBase="11" countDelta="0" countBase="5">
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="3" timeBase="0" countDelta="5" countBase="0"/>
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="5" countBase="0"/>
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                                                  <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="4" countDelta="0" countBase="5"/>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="2" timeBase="2" countDelta="0" countBase="5">
                                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="2" timeBase="0" countDelta="5" countBase="0"/>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="4" countDelta="0" countBase="5">
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="5"/>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                                              </node>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-168" timeBase="2846" countDelta="0" countBase="65">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-182" timeBase="2814" countDelta="0" countBase="65">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-171" timeBase="2776" countDelta="0" countBase="65">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-171" timeBase="2735" countDelta="0" countBase="65">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-165" timeBase="2702" countDelta="0" countBase="65">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-42" timeBase="388" countDelta="0" countBase="65">
                                                        <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="5" timeBase="20" countDelta="0" countBase="102"/>
                                                        <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="2" timeBase="38" countDelta="0" countBase="65">
                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="5" timeBase="12" countDelta="0" countBase="65"/>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-11" timeBase="31" countDelta="0" countBase="130"/>
                                                        <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-18" timeBase="158" countDelta="0" countBase="65">
                                                          <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="3" timeBase="58" countDelta="0" countBase="65">
                                                            <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="10" timeBase="31" countDelta="0" countBase="65"/>
                                                          </node>
                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-2" timeBase="27" countDelta="0" countBase="65"/>
                                                        </node>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-124" timeBase="2263" countDelta="0" countBase="65">
                                                        <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="21" timeBase="160" countDelta="0" countBase="14">
                                                          <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="27" timeBase="70" countDelta="0" countBase="14">
                                                            <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="35" timeBase="38" countDelta="0" countBase="14">
                                                              <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="-1" timeBase="31" countDelta="0" countBase="14"/>
                                                            </node>
                                                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="3" timeBase="3" countDelta="0" countBase="14"/>
                                                            <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="2" timeBase="1" countDelta="0" countBase="14"/>
                                                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="14"/>
                                                          </node>
                                                          <node leaf="false" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-10" timeBase="81" countDelta="0" countBase="14">
                                                            <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="6" countDelta="0" countBase="14"/>
                                                            <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="45" countDelta="0" countBase="13">
                                                              <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="5" countDelta="0" countBase="13"/>
                                                              <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="4" countDelta="0" countBase="13"/>
                                                            </node>
                                                          </node>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="3" timeBase="2" countDelta="0" countBase="9"/>
                                                        <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="2" timeBase="4" countDelta="0" countBase="14"/>
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="2" countDelta="0" countBase="28"/>
                                                        <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-2" timeBase="62" countDelta="0" countBase="14">
                                                          <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="54" countDelta="0" countBase="14">
                                                            <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-1" timeBase="5" countDelta="0" countBase="14"/>
                                                            <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="40" countDelta="0" countBase="14">
                                                              <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="3" timeBase="21" countDelta="0" countBase="14">
                                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="0" countDelta="14" countBase="0"/>
                                                              </node>
                                                              <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="14"/>
                                                            </node>
                                                          </node>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="3" countDelta="-9" countBase="9"/>
                                                        <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="-3" timeBase="6" countDelta="0" countBase="14"/>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="-6" timeBase="85" countDelta="0" countBase="14">
                                                          <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="2" timeBase="2" countDelta="0" countBase="14"/>
                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="5" countDelta="0" countBase="14"/>
                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="14"/>
                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-2" timeBase="5" countDelta="0" countBase="14"/>
                                                          <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-4" timeBase="41" countDelta="0" countBase="14">
                                                            <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="2" timeBase="27" countDelta="0" countBase="14">
                                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-1" timeBase="21" countDelta="0" countBase="14">
                                                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-1" timeBase="15" countDelta="0" countBase="14">
                                                                  <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-3" timeBase="12" countDelta="0" countBase="14">
                                                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-4" timeBase="6" countDelta="0" countBase="14"/>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                        <node leaf="false" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="-11" timeBase="38" countDelta="0" countBase="14">
                                                          <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="17" countDelta="0" countBase="14">
                                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="7" countDelta="0" countBase="14"/>
                                                          </node>
                                                        </node>
                                                        <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="-15" timeBase="50" countDelta="0" countBase="51">
                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="-2" timeBase="14" countDelta="0" countBase="51"/>
                                                        </node>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-16" timeBase="166" countDelta="0" countBase="9">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-12" timeBase="160" countDelta="0" countBase="9">
                                                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="11" timeBase="10" countDelta="0" countBase="9">
                                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="12" timeBase="4" countDelta="0" countBase="9">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="1" countDelta="0" countBase="9"/>
                                                              </node>
                                                            </node>
                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="1" countDelta="0" countBase="18"/>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-11" timeBase="47" countDelta="0" countBase="9">
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="9"/>
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-3" timeBase="3" countDelta="-9" countBase="9"/>
                                                              <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-4" timeBase="9" countDelta="0" countBase="9">
                                                                <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="9"/>
                                                              </node>
                                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-6" timeBase="14" countDelta="0" countBase="9">
                                                                <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="-4" timeBase="5" countDelta="0" countBase="9"/>
                                                              </node>
                                                            </node>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-12" timeBase="85" countDelta="0" countBase="9">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-12" timeBase="80" countDelta="0" countBase="9">
                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="63"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-10" timeBase="40" countDelta="0" countBase="63"/>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="-51" timeBase="587" countDelta="0" countBase="60">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="13" timeBase="75" countDelta="0" countBase="60">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="15" timeBase="57" countDelta="0" countBase="9">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="8" timeBase="6" countDelta="0" countBase="9">
                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="1" timeBase="1" countDelta="0" countBase="9"/>
                                                              </node>
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="6" timeBase="29" countDelta="0" countBase="9">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-9" countBase="9"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="9"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-9" countBase="9"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="4" countDelta="0" countBase="9"/>
                                                                <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="8" countDelta="0" countBase="9">
                                                                  <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-3" timeBase="4" countDelta="0" countBase="9"/>
                                                                </node>
                                                              </node>
                                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="2" timeBase="6" countDelta="0" countBase="9">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="2" timeBase="2" countDelta="0" countBase="9"/>
                                                              </node>
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-2" timeBase="4" countDelta="0" countBase="9"/>
                                                            </node>
                                                          </node>
                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="17" countDelta="0" countBase="60"/>
                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="9" countDelta="0" countBase="44"/>
                                                          <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-2" timeBase="16" countDelta="0" countBase="44"/>
                                                          <node leaf="false" class="jason.asSyntax.UnnamedVar" methodName="create" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)Ljason/asSyntax/UnnamedVar;" timeDelta="-15" timeBase="170" countDelta="0" countBase="16">
                                                            <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="3" timeBase="0" countDelta="4" countBase="0"/>
                                                            <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="3" countDelta="0" countBase="8"/>
                                                            <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                            <node leaf="false" class="jason.asSyntax.UnnamedVar" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;)V" timeDelta="-13" timeBase="118" countDelta="0" countBase="12">
                                                              <node leaf="false" class="jason.asSyntax.UnnamedVar" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;I)V" timeDelta="-5" timeBase="84" countDelta="0" countBase="12">
                                                                <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="6" countDelta="0" countBase="12"/>
                                                                <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="4" countDelta="0" countBase="12"/>
                                                                <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="5" countDelta="0" countBase="12"/>
                                                                <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-6" timeBase="43" countDelta="0" countBase="12">
                                                                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjava/lang/String;)V" timeDelta="-3" timeBase="37" countDelta="0" countBase="12">
                                                                    <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-3" timeBase="29" countDelta="0" countBase="12">
                                                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-2" timeBase="20" countDelta="0" countBase="12"/>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                          <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-27" timeBase="173" countDelta="0" countBase="44">
                                                            <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjava/lang/String;)V" timeDelta="-27" timeBase="149" countDelta="0" countBase="44">
                                                              <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-22" timeBase="120" countDelta="0" countBase="44">
                                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-26" timeBase="102" countDelta="0" countBase="44">
                                                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-20" timeBase="81" countDelta="0" countBase="44">
                                                                    <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="38" countDelta="0" countBase="44">
                                                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="13" countDelta="0" countBase="44"/>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-80" timeBase="954" countDelta="0" countBase="65">
                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="2" timeBase="21" countDelta="0" countBase="65"/>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-66" timeBase="863" countDelta="0" countBase="65">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-13" timeBase="115" countDelta="0" countBase="65">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="6" timeBase="84" countDelta="0" countBase="14">
                                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="8" timeBase="10" countDelta="0" countBase="14">
                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="5" timeBase="7" countDelta="0" countBase="14"/>
                                                                </node>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="3" timeBase="3" countDelta="0" countBase="14"/>
                                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="40" countDelta="0" countBase="14">
                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="3" timeBase="1" countDelta="0" countBase="14"/>
                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-2" timeBase="5" countDelta="0" countBase="14"/>
                                                                  <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="9" countDelta="0" countBase="14"/>
                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-3" timeBase="5" countDelta="0" countBase="14"/>
                                                                </node>
                                                              </node>
                                                            </node>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-61" timeBase="707" countDelta="0" countBase="65">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="-7" timeBase="53" countDelta="0" countBase="65">
                                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-4" timeBase="17" countDelta="0" countBase="65"/>
                                                              </node>
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="-38" timeBase="599" countDelta="0" countBase="51">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="-43" timeBase="577" countDelta="0" countBase="51">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_56" methodSignature="()Z" timeDelta="-3" timeBase="11" countDelta="0" countBase="16">
                                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-3" timeBase="4" countDelta="0" countBase="16"/>
                                                                  </node>
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_55" methodSignature="()Z" timeDelta="-4" timeBase="42" countDelta="0" countBase="51">
                                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-2" timeBase="12" countDelta="0" countBase="51"/>
                                                                  </node>
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_57" methodSignature="()Z" timeDelta="-4" timeBase="16" countDelta="0" countBase="16">
                                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-3" timeBase="7" countDelta="0" countBase="16"/>
                                                                  </node>
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_58" methodSignature="()Z" timeDelta="-36" timeBase="464" countDelta="0" countBase="51">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_38" methodSignature="()Z" timeDelta="-15" timeBase="422" countDelta="0" countBase="51">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-17" timeBase="401" countDelta="0" countBase="51">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-17" timeBase="376" countDelta="0" countBase="51">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-3" timeBase="96" countDelta="0" countBase="51">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-2" timeBase="19" countDelta="0" countBase="9">
                                                                              <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="1" timeBase="2" countDelta="0" countBase="9"/>
                                                                            </node>
                                                                            <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-14" timeBase="22" countDelta="0" countBase="42"/>
                                                                          </node>
                                                                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-8" timeBase="38" countDelta="0" countBase="51">
                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-9" timeBase="14" countDelta="0" countBase="51"/>
                                                                          </node>
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-9" timeBase="166" countDelta="0" countBase="51">
                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="11" countDelta="0" countBase="51"/>
                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-5" timeBase="10" countDelta="0" countBase="51"/>
                                                                            <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-7" timeBase="47" countDelta="0" countBase="51">
                                                                              <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-3" timeBase="14" countDelta="0" countBase="51"/>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-1607" timeBase="19099" countDelta="0" countBase="18">
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="68" timeBase="4692" countDelta="0" countBase="7">
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body_term" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="95" timeBase="2211" countDelta="0" countBase="7">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body_factor" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="94" timeBase="2209" countDelta="0" countBase="7">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="body_formula" methodSignature="()Ljava/lang/Object;" timeDelta="97" timeBase="2203" countDelta="0" countBase="7">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="86" timeBase="2134" countDelta="0" countBase="7">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="85" timeBase="2130" countDelta="0" countBase="7">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="84" timeBase="2128" countDelta="0" countBase="7">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="94" timeBase="2072" countDelta="0" countBase="7">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="93" timeBase="2069" countDelta="0" countBase="7">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="94" timeBase="2066" countDelta="0" countBase="7">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="95" timeBase="2060" countDelta="0" countBase="7">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="96" timeBase="2058" countDelta="0" countBase="7">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="91" timeBase="2056" countDelta="0" countBase="7">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="95" timeBase="2011" countDelta="0" countBase="7">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="68" timeBase="530" countDelta="0" countBase="3">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="65" timeBase="480" countDelta="0" countBase="3">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="64" timeBase="460" countDelta="0" countBase="8">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="63" timeBase="440" countDelta="0" countBase="8">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="65" timeBase="435" countDelta="0" countBase="8">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="70" timeBase="428" countDelta="0" countBase="8">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="65" timeBase="283" countDelta="0" countBase="8">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="60" timeBase="281" countDelta="0" countBase="8">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="62" timeBase="276" countDelta="0" countBase="8">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="68" timeBase="270" countDelta="0" countBase="8">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="63" timeBase="267" countDelta="0" countBase="8">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="62" timeBase="263" countDelta="0" countBase="8">
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="61" timeBase="213" countDelta="0" countBase="8">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="43" timeBase="116" countDelta="0" countBase="8">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="41" timeBase="106" countDelta="0" countBase="8">
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="41" timeBase="16" countDelta="0" countBase="8">
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="41" timeBase="15" countDelta="0" countBase="1">
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="41" timeBase="12" countDelta="0" countBase="1">
                                                                                            <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="1" countDelta="0" countBase="1">
                                                                                              <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                            </node>
                                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-1" timeBase="84" countDelta="0" countBase="8">
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="2" timeBase="68" countDelta="0" countBase="7">
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="-1" timeBase="66" countDelta="0" countBase="7">
                                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_55" methodSignature="()Z" timeDelta="-1" timeBase="6" countDelta="0" countBase="7">
                                                                                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="7"/>
                                                                                            </node>
                                                                                          </node>
                                                                                        </node>
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="1" timeBase="5" countDelta="0" countBase="8">
                                                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="4" timeBase="0" countDelta="8" countBase="0"/>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="8"/>
                                                                                  </node>
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="17" timeBase="46" countDelta="0" countBase="7">
                                                                                    <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="13" timeBase="22" countDelta="0" countBase="7">
                                                                                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjava/lang/String;)V" timeDelta="11" timeBase="20" countDelta="0" countBase="7">
                                                                                        <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="12" timeBase="16" countDelta="0" countBase="7">
                                                                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="11" timeBase="13" countDelta="0" countBase="7">
                                                                                            <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="7" countDelta="0" countBase="7">
                                                                                              <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="3" countDelta="0" countBase="7">
                                                                                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="1" countDelta="0" countBase="7"/>
                                                                                              </node>
                                                                                            </node>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                    <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="2" timeBase="1" countDelta="0" countBase="7"/>
                                                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-7" countBase="7"/>
                                                                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-2" timeBase="4" countDelta="0" countBase="7"/>
                                                                                  </node>
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="2" timeBase="7" countDelta="0" countBase="1">
                                                                                    <node leaf="true" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                                                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                  </node>
                                                                                  <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="1" timeBase="13" countDelta="0" countBase="1">
                                                                                    <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-1" timeBase="7" countDelta="0" countBase="1">
                                                                                      <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                                                                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                    </node>
                                                                                  </node>
                                                                                  <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                                                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="6" countDelta="0" countBase="7">
                                                                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="7"/>
                                                                                  </node>
                                                                                </node>
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="3" timeBase="43" countDelta="0" countBase="8">
                                                                                  <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="16" countDelta="0" countBase="8">
                                                                                    <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="6" countDelta="0" countBase="8">
                                                                                      <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="3" countDelta="0" countBase="8"/>
                                                                                    </node>
                                                                                    <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-4" timeBase="5" countDelta="0" countBase="8"/>
                                                                                  </node>
                                                                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                                  <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="-5" timeBase="6" countDelta="0" countBase="14"/>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="141" countDelta="0" countBase="8"/>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="2" timeBase="17" countDelta="0" countBase="8">
                                                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="1">
                                                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                                                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                </node>
                                                                <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                <node leaf="true" class="jason.asSyntax.VarTerm" methodName="isAtom" methodSignature="()Z" timeDelta="-2" timeBase="5" countDelta="0" countBase="7"/>
                                                              </node>
                                                            </node>
                                                            <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="5" countDelta="0" countBase="8"/>
                                                            <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                          </node>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="2" timeBase="25" countDelta="0" countBase="6">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="21" countDelta="0" countBase="3">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="8" countDelta="0" countBase="3">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="2" timeBase="1" countDelta="0" countBase="3"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                                <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                                                  <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                                </node>
                                                              </node>
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="5" countDelta="0" countBase="3">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="-1" timeBase="4" countDelta="0" countBase="2">
                                                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                          <node leaf="true" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="8" countDelta="0" countBase="3"/>
                                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="setTerms" methodSignature="(Ljava/util/List;)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="2" countDelta="0" countBase="3">
                                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                                          </node>
                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="3" countDelta="0" countBase="9"/>
                                                        </node>
                                                        <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="31" timeBase="1200" countDelta="0" countBase="3">
                                                          <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="30" timeBase="1199" countDelta="0" countBase="3">
                                                            <node leaf="false" class="jason.asSemantics.Agent" methodName="getIA" methodSignature="(Ljava/lang/String;)Ljason/asSemantics/InternalAction;" timeDelta="38" timeBase="1117" countDelta="0" countBase="3">
                                                              <node leaf="true" class="java.lang.Class" methodName="forName" methodSignature="(Ljava/lang/String;)Ljava/lang/Class;" timeDelta="36" timeBase="1026" countDelta="0" countBase="1"/>
                                                              <node leaf="true" class="java.lang.Class" methodName="getConstructor" methodSignature="([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" timeDelta="2" timeBase="7" countDelta="0" countBase="1"/>
                                                              <node leaf="true" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="2" timeBase="2" countDelta="0" countBase="1"/>
                                                              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="2" countDelta="0" countBase="6"/>
                                                              <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                              <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                              <node leaf="true" class="java.lang.Class" methodName="getMethod" methodSignature="(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;" timeDelta="-1" timeBase="46" countDelta="0" countBase="1"/>
                                                              <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                            </node>
                                                            <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-7" timeBase="77" countDelta="0" countBase="3">
                                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="4" timeBase="3" countDelta="0" countBase="8">
                                                                <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="3" timeBase="0" countDelta="8" countBase="0"/>
                                                              </node>
                                                              <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="3" timeBase="1" countDelta="0" countBase="8"/>
                                                              <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="2" timeBase="3" countDelta="0" countBase="3"/>
                                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="3"/>
                                                              <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-11" timeBase="50" countDelta="0" countBase="7">
                                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="3" timeBase="0" countDelta="7" countBase="0"/>
                                                                <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-12" timeBase="45" countDelta="0" countBase="7">
                                                                  <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="7"/>
                                                                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-7" timeBase="35" countDelta="0" countBase="7">
                                                                    <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-8" timeBase="32" countDelta="0" countBase="7">
                                                                      <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="7"/>
                                                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="18" countDelta="0" countBase="7">
                                                                        <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="10" countDelta="0" countBase="7">
                                                                          <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="3" timeBase="4" countDelta="0" countBase="7">
                                                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="4" timeBase="0" countDelta="7" countBase="0"/>
                                                                          </node>
                                                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="2" countDelta="-7" countBase="7"/>
                                                                        </node>
                                                                        <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-7" countBase="7"/>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                        <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="1" timeBase="2" countDelta="0" countBase="3"/>
                                                        <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="3" countDelta="0" countBase="4">
                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-7" countBase="7"/>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="-2" timeBase="87" countDelta="0" countBase="8">
                                                          <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="2" timeBase="2" countDelta="0" countBase="8"/>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="38" countDelta="0" countBase="8">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="37" countDelta="0" countBase="4">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="12" timeBase="5" countDelta="0" countBase="4">
                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="11" timeBase="3" countDelta="0" countBase="1"/>
                                                              </node>
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="2" timeBase="0" countDelta="5" countBase="0"/>
                                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-3" timeBase="4" countDelta="0" countBase="4">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                              </node>
                                                            </node>
                                                          </node>
                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="8"/>
                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="3" countDelta="0" countBase="8"/>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="3" countDelta="-9" countBase="9"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-3" timeBase="44" countDelta="0" countBase="4"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-3" timeBase="39" countDelta="0" countBase="7">
                                                        <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="3" timeBase="3" countDelta="0" countBase="7">
                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="7" countBase="0"/>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="0" countDelta="14" countBase="0"/>
                                                        <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-2" timeBase="15" countDelta="0" countBase="7">
                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="4" countDelta="0" countBase="7"/>
                                                        </node>
                                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="6" countDelta="0" countBase="6">
                                                          <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="6"/>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="-4" timeBase="4" countDelta="-8" countBase="8"/>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-10" timeBase="52" countDelta="0" countBase="4">
                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-9" timeBase="50" countDelta="0" countBase="4">
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="16" countDelta="0" countBase="4">
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-8" countBase="8"/>
                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-5" timeBase="9" countDelta="0" countBase="4">
                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="2" countDelta="0" countBase="4">
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="13" timeBase="12" countDelta="0" countBase="2">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="13" timeBase="10" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="3" timeBase="5" countDelta="0" countBase="2">
                                          <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="3" timeBase="1" countDelta="0" countBase="2">
                                            <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                          </node>
                                        </node>
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                      </node>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.VarTerm" methodName="isInternalAction" methodSignature="()Z" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                                    <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;Ljason/asSyntax/Term;)V" timeDelta="1" timeBase="34" countDelta="0" countBase="7">
                                      <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;Ljason/asSyntax/Term;Z)V" timeDelta="1" timeBase="32" countDelta="0" countBase="7">
                                        <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;Z)V" timeDelta="3" timeBase="22" countDelta="0" countBase="7">
                                          <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="setAsBodyTerm" methodSignature="(Z)V" timeDelta="2" timeBase="1" countDelta="0" countBase="7"/>
                                        </node>
                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="-1" timeBase="1" countDelta="-7" countBase="7"/>
                                      </node>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="1" countDelta="0" countBase="6"/>
                                  </node>
                                </node>
                              </node>
                              <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="setBodyNext" methodSignature="(Ljason/asSyntax/PlanBody;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-9" timeBase="129" countDelta="0" countBase="4">
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-11" timeBase="128" countDelta="0" countBase="4">
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="13" countDelta="0" countBase="4">
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="4"/>
                                    <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-3" timeBase="3" countDelta="-9" countBase="9"/>
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-6" timeBase="76" countDelta="0" countBase="5">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-1" timeBase="7" countDelta="0" countBase="2">
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJJJ)I" timeDelta="-1" timeBase="5" countDelta="0" countBase="2">
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfa_0" methodSignature="(IJJ)I" timeDelta="-1" timeBase="4" countDelta="0" countBase="2">
                                          <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopStringLiteralDfa_0" methodSignature="(IJJ)I" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                        </node>
                                      </node>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="-8" timeBase="69" countDelta="0" countBase="3">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-8" timeBase="65" countDelta="0" countBase="3">
                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-3" timeBase="18" countDelta="0" countBase="52">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="52"/>
                                        </node>
                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjAddStates" methodSignature="(II)V" timeDelta="-4" timeBase="7" countDelta="0" countBase="23"/>
                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-4" timeBase="15" countDelta="0" countBase="23"/>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-7" timeBase="29" countDelta="0" countBase="39">
                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="15" countDelta="0" countBase="39">
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="4" countDelta="0" countBase="39"/>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-15" timeBase="2336" countDelta="0" countBase="4">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="20" timeBase="416" countDelta="0" countBase="1">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body_term" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="21" timeBase="415" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body_factor" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="21" timeBase="414" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="body_formula" methodSignature="()Ljava/lang/Object;" timeDelta="20" timeBase="414" countDelta="0" countBase="1">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="21" timeBase="406" countDelta="0" countBase="1">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="22" timeBase="405" countDelta="0" countBase="1">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="21" timeBase="405" countDelta="0" countBase="1">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="21" timeBase="405" countDelta="0" countBase="1">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="20" timeBase="404" countDelta="0" countBase="1">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="21" timeBase="403" countDelta="0" countBase="1">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="21" timeBase="403" countDelta="0" countBase="1">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="21" timeBase="402" countDelta="0" countBase="1">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="20" timeBase="402" countDelta="0" countBase="1">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="9" timeBase="395" countDelta="0" countBase="1">
                                                            <node leaf="false" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="12" timeBase="1" countDelta="0" countBase="1">
                                                              <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="1" countDelta="0" countBase="1">
                                                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                              </node>
                                                            </node>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="3" timeBase="327" countDelta="0" countBase="1">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="2" timeBase="308" countDelta="0" countBase="1">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="3" timeBase="299" countDelta="0" countBase="4">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="3" timeBase="283" countDelta="0" countBase="4">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="281" countDelta="0" countBase="4">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="277" countDelta="0" countBase="4">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="5" timeBase="76" countDelta="0" countBase="4">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="6" timeBase="72" countDelta="0" countBase="4">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="17" countDelta="0" countBase="4">
                                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                                                            </node>
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="40" countDelta="0" countBase="4">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="1" timeBase="15" countDelta="0" countBase="3">
                                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="2" timeBase="0" countDelta="13" countBase="0"/>
                                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-3" timeBase="10" countDelta="0" countBase="13"/>
                                                                              </node>
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="1" timeBase="11" countDelta="0" countBase="1">
                                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJJJ)I" timeDelta="1" timeBase="9" countDelta="0" countBase="1"/>
                                                                              </node>
                                                                            </node>
                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-2" timeBase="3" countDelta="0" countBase="8"/>
                                                                          </node>
                                                                        </node>
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-2" timeBase="199" countDelta="0" countBase="4">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-4" timeBase="196" countDelta="0" countBase="4">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-4" timeBase="194" countDelta="0" countBase="4">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-2" timeBase="191" countDelta="0" countBase="4">
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-3" timeBase="190" countDelta="0" countBase="4">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-5" timeBase="188" countDelta="0" countBase="4">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-5" timeBase="161" countDelta="0" countBase="4">
                                                                                      <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="2" timeBase="18" countDelta="0" countBase="1">
                                                                                        <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="1" timeBase="12" countDelta="0" countBase="1">
                                                                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                        </node>
                                                                                        <node leaf="false" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="5" countDelta="0" countBase="1">
                                                                                          <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                        </node>
                                                                                      </node>
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="2" timeBase="32" countDelta="0" countBase="4">
                                                                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                                                        <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="8" countDelta="0" countBase="4"/>
                                                                                      </node>
                                                                                      <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="1" timeBase="5" countDelta="0" countBase="1"/>
                                                                                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="2" countDelta="0" countBase="3">
                                                                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                                                                      </node>
                                                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="14" countDelta="0" countBase="1"/>
                                                                                      <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                      <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-10" timeBase="68" countDelta="0" countBase="4">
                                                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-10" timeBase="62" countDelta="0" countBase="4">
                                                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="1" timeBase="8" countDelta="0" countBase="4"/>
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-9" timeBase="50" countDelta="0" countBase="4">
                                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="4">
                                                                                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                                                            </node>
                                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="-10" timeBase="45" countDelta="0" countBase="3">
                                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="-10" timeBase="43" countDelta="0" countBase="3">
                                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_55" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="3">
                                                                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                                                                </node>
                                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_58" methodSignature="()Z" timeDelta="-11" timeBase="39" countDelta="0" countBase="3">
                                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_38" methodSignature="()Z" timeDelta="-9" timeBase="36" countDelta="0" countBase="3">
                                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-11" timeBase="35" countDelta="0" countBase="3">
                                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-11" timeBase="34" countDelta="0" countBase="3">
                                                                                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="2" countDelta="0" countBase="3">
                                                                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                                                                        </node>
                                                                                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="5" countDelta="0" countBase="3"/>
                                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-11" timeBase="22" countDelta="0" countBase="3">
                                                                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                                                                          <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="4" countDelta="0" countBase="3">
                                                                                                            <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                                                                                          </node>
                                                                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-9" timeBase="11" countDelta="0" countBase="3"/>
                                                                                                        </node>
                                                                                                      </node>
                                                                                                    </node>
                                                                                                  </node>
                                                                                                </node>
                                                                                              </node>
                                                                                            </node>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="13" countDelta="0" countBase="4">
                                                                    <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="isAtom" methodSignature="()Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                                                                    <node leaf="true" class="jason.asSyntax.VarTerm" methodName="isAtom" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                                  </node>
                                                                </node>
                                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="4"/>
                                                              </node>
                                                              <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                            </node>
                                                            <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                            <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-1" timeBase="13" countDelta="0" countBase="1">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-1" timeBase="11" countDelta="0" countBase="1">
                                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="8" countDelta="0" countBase="1">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="8" countDelta="0" countBase="1">
                                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                            <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                            <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                            <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="-2" timeBase="39" countDelta="0" countBase="1">
                                                              <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="-2" timeBase="39" countDelta="0" countBase="1">
                                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="33" countDelta="0" countBase="1">
                                                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="2" timeBase="1" countDelta="0" countBase="4">
                                                                    <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                                  </node>
                                                                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="1" countDelta="0" countBase="1">
                                                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                  </node>
                                                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                  <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                  <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="19" countDelta="0" countBase="3">
                                                                    <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="14" countDelta="0" countBase="3">
                                                                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="1" timeBase="11" countDelta="0" countBase="3">
                                                                        <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="11" countDelta="0" countBase="3">
                                                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="7" countDelta="0" countBase="3">
                                                                            <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="4" countDelta="0" countBase="3">
                                                                              <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                                            </node>
                                                                          </node>
                                                                          <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                  <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="6" countDelta="0" countBase="1">
                                                            <node leaf="true" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="setBodyNext" methodSignature="(Ljason/asSyntax/PlanBody;)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="25" countDelta="0" countBase="1">
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="23" countDelta="0" countBase="1">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="5" countDelta="0" countBase="1">
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="9" countDelta="0" countBase="1">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="-1" timeBase="8" countDelta="0" countBase="1">
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-1" timeBase="7" countDelta="0" countBase="1">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body_term" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-33" timeBase="1890" countDelta="0" countBase="4">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body_factor" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-38" timeBase="1889" countDelta="0" countBase="4">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="body_formula" methodSignature="()Ljava/lang/Object;" timeDelta="-36" timeBase="1886" countDelta="0" countBase="4">
                                      <node leaf="true" class="jason.asSyntax.InternalActionLiteral" methodName="isInternalAction" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                      <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;Ljason/asSyntax/Term;)V" timeDelta="-2" timeBase="24" countDelta="0" countBase="4"/>
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-32" timeBase="1854" countDelta="0" countBase="4">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-34" timeBase="1853" countDelta="0" countBase="4">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-34" timeBase="1850" countDelta="0" countBase="4">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-5" timeBase="77" countDelta="0" countBase="2">
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-4" timeBase="76" countDelta="0" countBase="2">
                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="2">
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="62" countDelta="0" countBase="2">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-4" timeBase="62" countDelta="0" countBase="2">
                                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="17" countDelta="0" countBase="41">
                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="7" countDelta="0" countBase="41"/>
                                                    </node>
                                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="1" timeBase="24" countDelta="0" countBase="41"/>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-29" timeBase="1772" countDelta="0" countBase="4">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-20" timeBase="1759" countDelta="0" countBase="4">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-19" timeBase="1757" countDelta="0" countBase="4">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-19" timeBase="1756" countDelta="0" countBase="4">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-18" timeBase="1753" countDelta="0" countBase="4">
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-19" timeBase="1751" countDelta="0" countBase="4">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-2" timeBase="24" countDelta="0" countBase="4">
                                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="2" countDelta="0" countBase="8"/>
                                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="4" countDelta="0" countBase="8">
                                                            <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-2" timeBase="4" countDelta="0" countBase="8"/>
                                                          </node>
                                                          <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="3" countDelta="0" countBase="4">
                                                            <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                          </node>
                                                          <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="7" countDelta="0" countBase="4">
                                                            <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                          </node>
                                                        </node>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-6" timeBase="1712" countDelta="0" countBase="4">
                                                          <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="51" timeBase="819" countDelta="0" countBase="2">
                                                            <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="53" timeBase="817" countDelta="0" countBase="2">
                                                              <node leaf="false" class="jason.asSemantics.Agent" methodName="getIA" methodSignature="(Ljava/lang/String;)Ljason/asSemantics/InternalAction;" timeDelta="51" timeBase="765" countDelta="0" countBase="2">
                                                                <node leaf="true" class="java.lang.Class" methodName="forName" methodSignature="(Ljava/lang/String;)Ljava/lang/Class;" timeDelta="42" timeBase="716" countDelta="0" countBase="1"/>
                                                                <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                                <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                              </node>
                                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="51" countDelta="0" countBase="2">
                                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="2" timeBase="2" countDelta="0" countBase="2"/>
                                                                <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="2" timeBase="29" countDelta="0" countBase="5">
                                                                  <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="26" countDelta="0" countBase="5">
                                                                    <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                                                                  </node>
                                                                </node>
                                                                <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="2" timeBase="1" countDelta="0" countBase="6"/>
                                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="1" timeBase="4" countDelta="0" countBase="6">
                                                                  <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="1" timeBase="1" countDelta="0" countBase="6"/>
                                                                </node>
                                                                <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="2"/>
                                                              </node>
                                                            </node>
                                                          </node>
                                                          <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="1" timeBase="42" countDelta="0" countBase="4">
                                                            <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="1" timeBase="36" countDelta="0" countBase="4">
                                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="16" countDelta="0" countBase="4">
                                                                <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="1" timeBase="8" countDelta="0" countBase="4"/>
                                                              </node>
                                                            </node>
                                                          </node>
                                                          <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                          <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-1" timeBase="40" countDelta="0" countBase="4">
                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                          </node>
                                                          <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-2" timeBase="46" countDelta="0" countBase="2">
                                                            <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="44" countDelta="0" countBase="2">
                                                              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="42" countDelta="0" countBase="2">
                                                                <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="25" countDelta="0" countBase="4">
                                                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                                                                </node>
                                                                <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                                <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-2" timeBase="4" countDelta="0" countBase="4">
                                                                  <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                                </node>
                                                                <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="2" countDelta="-4" countBase="4"/>
                                                              </node>
                                                            </node>
                                                          </node>
                                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="5" countDelta="0" countBase="10"/>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="-59" timeBase="743" countDelta="0" countBase="4">
                                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="1" timeBase="0" countDelta="4" countBase="0"/>
                                                            <node leaf="true" class="jason.asSyntax.Structure" methodName="setTerms" methodSignature="(Ljava/util/List;)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="3" countDelta="0" countBase="4"/>
                                                            <node leaf="true" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="9" countDelta="0" countBase="4"/>
                                                            <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-1" timeBase="35" countDelta="0" countBase="8"/>
                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="5" countDelta="0" countBase="12"/>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="-56" timeBase="674" countDelta="0" countBase="4">
                                                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="1" countDelta="0" countBase="6"/>
                                                              <node leaf="true" class="java.util.ArrayList" methodName="trimToSize" methodSignature="()V" timeDelta="-1" timeBase="4" countDelta="0" countBase="4"/>
                                                              <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="6" countDelta="0" countBase="10"/>
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-56" timeBase="654" countDelta="0" countBase="10">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="-2" timeBase="18" countDelta="0" countBase="10">
                                                                  <node leaf="true" class="jason.asSyntax.VarTerm" methodName="isAtom" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="9"/>
                                                                  <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                                </node>
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-56" timeBase="628" countDelta="0" countBase="10">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-55" timeBase="626" countDelta="0" countBase="10">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-58" timeBase="622" countDelta="0" countBase="10">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="8" timeBase="184" countDelta="0" countBase="10">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="11" timeBase="177" countDelta="0" countBase="10">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="12" timeBase="67" countDelta="0" countBase="10">
                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="4" timeBase="1" countDelta="0" countBase="10"/>
                                                                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="3" timeBase="20" countDelta="0" countBase="10">
                                                                              <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="1" timeBase="10" countDelta="0" countBase="10"/>
                                                                            </node>
                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="2" timeBase="1" countDelta="0" countBase="10"/>
                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="10"/>
                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-3" timeBase="3" countDelta="-10" countBase="10"/>
                                                                            <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-11" timeBase="18" countDelta="0" countBase="10">
                                                                              <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-12" timeBase="14" countDelta="0" countBase="10"/>
                                                                            </node>
                                                                          </node>
                                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="5" timeBase="1" countDelta="0" countBase="20"/>
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="74" countDelta="0" countBase="10">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-2" timeBase="52" countDelta="0" countBase="9">
                                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="15" timeBase="12" countDelta="0" countBase="43"/>
                                                                              <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-8" timeBase="10" countDelta="0" countBase="42"/>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-68" timeBase="433" countDelta="0" countBase="10">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-67" timeBase="425" countDelta="0" countBase="10">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-65" timeBase="419" countDelta="0" countBase="10">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-66" timeBase="414" countDelta="0" countBase="10">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-67" timeBase="410" countDelta="0" countBase="10">
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-66" timeBase="404" countDelta="0" countBase="10">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-13" timeBase="66" countDelta="0" countBase="10">
                                                                                    <node leaf="true" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="7" countDelta="0" countBase="10"/>
                                                                                    <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-2" timeBase="22" countDelta="0" countBase="10">
                                                                                      <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-2" timeBase="7" countDelta="0" countBase="10">
                                                                                        <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="3" countDelta="0" countBase="10"/>
                                                                                      </node>
                                                                                      <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-3" timeBase="5" countDelta="0" countBase="10"/>
                                                                                    </node>
                                                                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="4" countDelta="0" countBase="20"/>
                                                                                    <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="5" countDelta="0" countBase="18"/>
                                                                                  </node>
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-55" timeBase="329" countDelta="0" countBase="10">
                                                                                    <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="2" timeBase="13" countDelta="0" countBase="9"/>
                                                                                    <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="1" timeBase="12" countDelta="0" countBase="1">
                                                                                      <node leaf="false" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="6" countDelta="0" countBase="1">
                                                                                        <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                      </node>
                                                                                    </node>
                                                                                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                                    <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="1" timeBase="5" countDelta="0" countBase="1"/>
                                                                                    <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="-12" timeBase="69" countDelta="0" countBase="9">
                                                                                      <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="4" timeBase="0" countDelta="9" countBase="0"/>
                                                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="2" timeBase="1" countDelta="0" countBase="9"/>
                                                                                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="9"/>
                                                                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-12" timeBase="42" countDelta="0" countBase="9">
                                                                                        <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjava/lang/String;)V" timeDelta="-9" timeBase="35" countDelta="0" countBase="9">
                                                                                          <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-9" timeBase="30" countDelta="0" countBase="9">
                                                                                            <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-14" timeBase="29" countDelta="0" countBase="9">
                                                                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-11" timeBase="23" countDelta="0" countBase="9"/>
                                                                                            </node>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-43" timeBase="202" countDelta="0" countBase="10">
                                                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="1" timeBase="4" countDelta="0" countBase="10"/>
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-44" timeBase="189" countDelta="0" countBase="10">
                                                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="4" timeBase="8" countDelta="0" countBase="10"/>
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-40" timeBase="169" countDelta="0" countBase="10">
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="-3" timeBase="10" countDelta="0" countBase="10">
                                                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-2" timeBase="3" countDelta="0" countBase="10"/>
                                                                                          </node>
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="-44" timeBase="155" countDelta="0" countBase="9">
                                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="-45" timeBase="153" countDelta="0" countBase="9">
                                                                                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_55" methodSignature="()Z" timeDelta="12" timeBase="6" countDelta="0" countBase="9"/>
                                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_58" methodSignature="()Z" timeDelta="-53" timeBase="135" countDelta="0" countBase="9">
                                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_38" methodSignature="()Z" timeDelta="-64" timeBase="130" countDelta="0" countBase="9">
                                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-66" timeBase="127" countDelta="0" countBase="9">
                                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="59" countDelta="0" countBase="9">
                                                                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="6" countDelta="0" countBase="9"/>
                                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="32" countDelta="0" countBase="9">
                                                                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="9" countBase="0"/>
                                                                                                        <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="5" countDelta="0" countBase="9"/>
                                                                                                      </node>
                                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="8" countDelta="0" countBase="9">
                                                                                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="3" timeBase="0" countDelta="9" countBase="0"/>
                                                                                                      </node>
                                                                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-2" timeBase="3" countDelta="0" countBase="9"/>
                                                                                                    </node>
                                                                                                  </node>
                                                                                                </node>
                                                                                              </node>
                                                                                            </node>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="6" timeBase="164" countDelta="0" countBase="7">
                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="7" timeBase="156" countDelta="0" countBase="7">
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="22" countDelta="0" countBase="7">
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="7" countBase="0"/>
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="7" countBase="0"/>
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="7" countBase="0"/>
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-3" timeBase="4" countDelta="0" countBase="7"/>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="35" countDelta="0" countBase="56">
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-6" timeBase="19" countDelta="0" countBase="56"/>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="59" countDelta="0" countBase="7">
                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="-3" timeBase="47" countDelta="0" countBase="3">
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-5" timeBase="42" countDelta="0" countBase="3">
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="12" countDelta="0" countBase="31">
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="3" timeBase="1" countDelta="0" countBase="31"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-1" timeBase="17" countDelta="0" countBase="31"/>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="10"/>
                              </node>
                            </node>
                            <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="setBodyNext" methodSignature="(Ljason/asSyntax/PlanBody;)V" timeDelta="2" timeBase="0" countDelta="7" countBase="0"/>
                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="3" countDelta="0" countBase="7"/>
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body_term" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-1682" timeBase="14218" countDelta="0" countBase="18">
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="plan_body_factor" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-1681" timeBase="14209" countDelta="0" countBase="18">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-14" timeBase="409" countDelta="0" countBase="18">
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-12" timeBase="400" countDelta="0" countBase="18">
                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="6" timeBase="24" countDelta="0" countBase="36">
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="9" timeBase="15" countDelta="0" countBase="36">
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="4" timeBase="7" countDelta="0" countBase="36"/>
                                      </node>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="34"/>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-4" timeBase="65" countDelta="0" countBase="18">
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="3" timeBase="1" countDelta="0" countBase="18"/>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="2" timeBase="3" countDelta="0" countBase="18"/>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="4" countDelta="0" countBase="18"/>
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-2" timeBase="4" countDelta="0" countBase="18"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-6" timeBase="275" countDelta="0" countBase="18">
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="1" timeBase="13" countDelta="0" countBase="4">
                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="4">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                                        </node>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="-6" timeBase="248" countDelta="0" countBase="13">
                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="8" timeBase="8" countDelta="0" countBase="13">
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="13"/>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-17" timeBase="231" countDelta="0" countBase="13">
                                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-10" timeBase="66" countDelta="0" countBase="149">
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="3" timeBase="14" countDelta="0" countBase="149"/>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="body_formula" methodSignature="()Ljava/lang/Object;" timeDelta="-1667" timeBase="13780" countDelta="0" countBase="18">
                                  <node leaf="true" class="jason.asSyntax.InternalActionLiteral" methodName="isInternalAction" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="13"/>
                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="1" countDelta="0" countBase="6"/>
                                  <node leaf="true" class="jason.asSyntax.VarTerm" methodName="isInternalAction" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                  <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;Ljason/asSyntax/Term;)V" timeDelta="-7" timeBase="105" countDelta="0" countBase="18">
                                    <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;Ljason/asSyntax/Term;Z)V" timeDelta="-9" timeBase="97" countDelta="0" countBase="18">
                                      <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;Z)V" timeDelta="-3" timeBase="71" countDelta="0" countBase="18">
                                        <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;)V" timeDelta="2" timeBase="50" countDelta="0" countBase="18">
                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-2" timeBase="39" countDelta="0" countBase="18">
                                            <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-3" timeBase="33" countDelta="0" countBase="18">
                                              <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="3" timeBase="19" countDelta="0" countBase="18">
                                                <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="8" countDelta="0" countBase="18">
                                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="1" countDelta="0" countBase="18"/>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-1655" timeBase="13614" countDelta="0" countBase="18">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-1659" timeBase="13609" countDelta="0" countBase="18">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-1656" timeBase="13601" countDelta="0" countBase="18">
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-3" timeBase="136" countDelta="0" countBase="5">
                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="133" countDelta="0" countBase="5">
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="3" countDelta="0" countBase="5"/>
                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="20" countDelta="0" countBase="5">
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="2" timeBase="1" countDelta="0" countBase="5"/>
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="5"/>
                                            </node>
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="2" countDelta="0" countBase="10"/>
                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-2" timeBase="102" countDelta="0" countBase="5">
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-3" timeBase="99" countDelta="0" countBase="5">
                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="26" countDelta="0" countBase="66">
                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="7" timeBase="7" countDelta="0" countBase="66"/>
                                                </node>
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-5" timeBase="40" countDelta="0" countBase="62">
                                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-9" timeBase="20" countDelta="0" countBase="124"/>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-1652" timeBase="13455" countDelta="0" countBase="18">
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-1653" timeBase="13439" countDelta="0" countBase="18">
                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-1688" timeBase="13435" countDelta="0" countBase="18">
                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-1688" timeBase="13428" countDelta="0" countBase="18">
                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-1686" timeBase="13413" countDelta="0" countBase="18">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1685" timeBase="13401" countDelta="0" countBase="18">
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-11" timeBase="117" countDelta="0" countBase="18">
                                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="3" timeBase="17" countDelta="0" countBase="32">
                                                        <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-2" timeBase="8" countDelta="0" countBase="32"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-1" timeBase="36" countDelta="0" countBase="18">
                                                        <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="2" timeBase="7" countDelta="0" countBase="18"/>
                                                        <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="1" timeBase="15" countDelta="0" countBase="18">
                                                          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="3" timeBase="8" countDelta="0" countBase="18"/>
                                                        </node>
                                                      </node>
                                                    </node>
                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-1676" timeBase="13272" countDelta="0" countBase="18">
                                                      <node leaf="false" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="29" timeBase="21" countDelta="0" countBase="16">
                                                        <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="3" timeBase="17" countDelta="0" countBase="16">
                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="12" countDelta="0" countBase="16"/>
                                                        </node>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="4" timeBase="27" countDelta="0" countBase="2">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="4" timeBase="25" countDelta="0" countBase="2">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="5" timeBase="10" countDelta="0" countBase="2">
                                                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="2" timeBase="2" countDelta="0" countBase="2">
                                                              <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                                            </node>
                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                            <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="2" countDelta="0" countBase="2">
                                                              <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                            </node>
                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
                                                          </node>
                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="3" countDelta="0" countBase="2">
                                                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="2">
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="2" timeBase="63" countDelta="0" countBase="3">
                                                        <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="63" countDelta="0" countBase="3">
                                                          <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="60" countDelta="0" countBase="3">
                                                            <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="3"/>
                                                            <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="3"/>
                                                            <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="8" countDelta="0" countBase="3">
                                                              <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="2" countDelta="0" countBase="3"/>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                      <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="1" timeBase="3" countDelta="0" countBase="16"/>
                                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="8" countDelta="0" countBase="45"/>
                                                      <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                                                      <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="5" countDelta="0" countBase="13"/>
                                                      <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="-1" timeBase="6" countDelta="0" countBase="16"/>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-4" timeBase="191" countDelta="0" countBase="18">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-5" timeBase="165" countDelta="0" countBase="18">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="100" countDelta="0" countBase="18">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="94" countDelta="0" countBase="16">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="5" timeBase="45" countDelta="0" countBase="16">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="5" timeBase="2" countDelta="0" countBase="16"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="3" timeBase="2" countDelta="0" countBase="16"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="2" timeBase="3" countDelta="0" countBase="16"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="9" countDelta="0" countBase="16"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-3" timeBase="6" countDelta="0" countBase="16"/>
                                                              </node>
                                                              <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="2" timeBase="9" countDelta="0" countBase="16"/>
                                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="13" countDelta="0" countBase="16">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="3" timeBase="2" countDelta="0" countBase="16"/>
                                                              </node>
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-16" countBase="16"/>
                                                            </node>
                                                          </node>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-3" timeBase="53" countDelta="0" countBase="18">
                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="1" timeBase="24" countDelta="0" countBase="2"/>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="-4" timeBase="16" countDelta="0" countBase="18">
                                                              <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="4" timeBase="3" countDelta="0" countBase="18"/>
                                                            </node>
                                                          </node>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="-6" timeBase="11" countDelta="0" countBase="18"/>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-10" timeBase="122" countDelta="0" countBase="16">
                                                        <node leaf="false" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="16" countDelta="0" countBase="16">
                                                          <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="16"/>
                                                        </node>
                                                        <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-15" timeBase="95" countDelta="0" countBase="16">
                                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="6" timeBase="1" countDelta="0" countBase="16"/>
                                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-4" timeBase="11" countDelta="0" countBase="16">
                                                            <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-2" timeBase="4" countDelta="0" countBase="16"/>
                                                          </node>
                                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-5" timeBase="5" countDelta="-16" countBase="16"/>
                                                          <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="-17" timeBase="57" countDelta="0" countBase="16">
                                                            <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="-7" timeBase="41" countDelta="0" countBase="16">
                                                              <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="5" timeBase="4" countDelta="0" countBase="16"/>
                                                              <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-4" timeBase="16" countDelta="0" countBase="16">
                                                                <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-4" timeBase="7" countDelta="0" countBase="16"/>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="-230" timeBase="3491" countDelta="0" countBase="16">
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="8" timeBase="148" countDelta="0" countBase="32">
                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="5" timeBase="137" countDelta="0" countBase="16">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="12" timeBase="51" countDelta="0" countBase="16">
                                                              <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="12" timeBase="12" countDelta="0" countBase="16">
                                                                <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="2" timeBase="3" countDelta="0" countBase="16"/>
                                                              </node>
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="5" countDelta="0" countBase="16"/>
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-2" timeBase="4" countDelta="0" countBase="16"/>
                                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-4" timeBase="5" countDelta="0" countBase="16"/>
                                                            </node>
                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="4" countDelta="0" countBase="25"/>
                                                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="17" countDelta="0" countBase="16">
                                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="2" timeBase="8" countDelta="0" countBase="16">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="16"/>
                                                              </node>
                                                            </node>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-3" timeBase="42" countDelta="0" countBase="16">
                                                              <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="1" timeBase="1" countDelta="0" countBase="7"/>
                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfaWithStates_0" methodSignature="(III)I" timeDelta="-2" timeBase="19" countDelta="0" countBase="9">
                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="5" countDelta="0" countBase="9"/>
                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-4" timeBase="7" countDelta="0" countBase="9"/>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                        <node leaf="true" class="jason.asSyntax.Structure" methodName="setTerms" methodSignature="(Ljava/util/List;)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="12" countDelta="0" countBase="16"/>
                                                        <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="16"/>
                                                        <node leaf="true" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-8" timeBase="44" countDelta="0" countBase="16"/>
                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-9" timeBase="19" countDelta="0" countBase="48"/>
                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="-226" timeBase="3206" countDelta="0" countBase="16">
                                                          <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="4" timeBase="3" countDelta="0" countBase="16"/>
                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="6" countDelta="0" countBase="25"/>
                                                          <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="18" countDelta="0" countBase="41"/>
                                                          <node leaf="true" class="java.util.ArrayList" methodName="trimToSize" methodSignature="()V" timeDelta="-3" timeBase="16" countDelta="0" countBase="16"/>
                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-215" timeBase="3111" countDelta="0" countBase="41">
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="-15" timeBase="66" countDelta="0" countBase="41">
                                                              <node leaf="true" class="jason.asSyntax.VarTerm" methodName="isAtom" methodSignature="()Z" timeDelta="1" timeBase="11" countDelta="0" countBase="35"/>
                                                              <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="isAtom" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-3" timeBase="3" countDelta="-4" countBase="4"/>
                                                              <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="isAtom" methodSignature="()Z" timeDelta="-3" timeBase="12" countDelta="0" countBase="3">
                                                                <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                              </node>
                                                            </node>
                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-201" timeBase="3018" countDelta="0" countBase="41">
                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-202" timeBase="3001" countDelta="0" countBase="41">
                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-208" timeBase="2983" countDelta="0" countBase="41">
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-93" timeBase="2167" countDelta="0" countBase="41">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="18" countDelta="0" countBase="3">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="16" countDelta="0" countBase="3">
                                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="1" timeBase="2" countDelta="0" countBase="3"/>
                                                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                                                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="3">
                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="string" methodSignature="()Ljason/asSyntax/StringTerm;" timeDelta="1" timeBase="93" countDelta="0" countBase="2">
                                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                      <node leaf="true" class="java.lang.String" methodName="replaceAll" methodSignature="(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;" timeDelta="1" timeBase="63" countDelta="0" countBase="4"/>
                                                                      <node leaf="true" class="java.lang.String" methodName="substring" methodSignature="(II)Ljava/lang/String;" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
                                                                      <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                                      <node leaf="true" class="java.lang.String" methodName="length" methodSignature="()I" timeDelta="-1" timeBase="4" countDelta="0" countBase="2"/>
                                                                    </node>
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rule_plan_term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-10" timeBase="234" countDelta="0" countBase="1">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="trigger" methodSignature="()Ljason/asSyntax/Trigger;" timeDelta="10" timeBase="52" countDelta="0" countBase="1">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="10" timeBase="43" countDelta="0" countBase="1">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="10" timeBase="30" countDelta="0" countBase="2">
                                                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                            <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="7" countDelta="0" countBase="2">
                                                                              <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjava/lang/String;)V" timeDelta="-1" timeBase="7" countDelta="0" countBase="2"/>
                                                                            </node>
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="16" countDelta="0" countBase="2">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="16" countDelta="0" countBase="1">
                                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="4" countDelta="0" countBase="1">
                                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                </node>
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="9" countDelta="0" countBase="1">
                                                                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
                                                                        </node>
                                                                        <node leaf="false" class="jason.asSyntax.Trigger" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Trigger$TEOperator;Ljason/asSyntax/Trigger$TEType;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="1">
                                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                          <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                                                                        </node>
                                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                      </node>
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_3" methodSignature="(I)Z" timeDelta="2" timeBase="23" countDelta="0" countBase="1">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_3" methodSignature="()Z" timeDelta="2" timeBase="20" countDelta="0" countBase="1">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_15" methodSignature="()Z" timeDelta="1" timeBase="20" countDelta="0" countBase="1">
                                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_31" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                      <node leaf="true" class="jason.asSyntax.Trigger" methodName="getType" methodSignature="()Ljason/asSyntax/Trigger$TEType;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                      <node leaf="true" class="jason.asSyntax.Trigger" methodName="isAddition" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_2" methodSignature="(I)Z" timeDelta="-16" timeBase="126" countDelta="0" countBase="1">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_2" methodSignature="()Z" timeDelta="-15" timeBase="117" countDelta="0" countBase="1">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_11" methodSignature="()Z" timeDelta="-2" timeBase="11" countDelta="0" countBase="1">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="10" countDelta="0" countBase="1">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="9" countDelta="0" countBase="1">
                                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_12" methodSignature="()Z" timeDelta="-8" timeBase="96" countDelta="0" countBase="1">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_27" methodSignature="()Z" timeDelta="-1" timeBase="17" countDelta="0" countBase="1">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_42" methodSignature="()Z" timeDelta="-1" timeBase="12" countDelta="0" countBase="1">
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="12" countDelta="0" countBase="1">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="12" countDelta="0" countBase="1">
                                                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                                                                                  </node>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_15" methodSignature="()Z" timeDelta="-5" timeBase="71" countDelta="0" countBase="1">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_30" methodSignature="()Z" timeDelta="-4" timeBase="68" countDelta="0" countBase="1">
                                                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_45" methodSignature="()Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_46" methodSignature="()Z" timeDelta="-2" timeBase="28" countDelta="0" countBase="1">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="-1" timeBase="27" countDelta="0" countBase="1">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_55" methodSignature="()Z" timeDelta="-2" timeBase="26" countDelta="0" countBase="1">
                                                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="23" countDelta="0" countBase="1"/>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_44" methodSignature="()Z" timeDelta="-3" timeBase="14" countDelta="0" countBase="1">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-1" timeBase="12" countDelta="0" countBase="1">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="12" countDelta="0" countBase="1">
                                                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="5" countDelta="0" countBase="1"/>
                                                                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-3" timeBase="17" countDelta="0" countBase="1">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-2" timeBase="16" countDelta="0" countBase="1">
                                                                                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="-3" timeBase="14" countDelta="0" countBase="1">
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="-2" timeBase="13" countDelta="0" countBase="1">
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_58" methodSignature="()Z" timeDelta="-2" timeBase="12" countDelta="0" countBase="1">
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_38" methodSignature="()Z" timeDelta="-2" timeBase="11" countDelta="0" countBase="1">
                                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-2" timeBase="10" countDelta="0" countBase="1">
                                                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="10" countDelta="0" countBase="1">
                                                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-1" timeBase="4" countDelta="0" countBase="1">
                                                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                                </node>
                                                                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="4" countDelta="0" countBase="1">
                                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-1" timeBase="3" countDelta="0" countBase="1">
                                                                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                                  </node>
                                                                                                </node>
                                                                                              </node>
                                                                                            </node>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-72" timeBase="1776" countDelta="0" countBase="38">
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-75" timeBase="1764" countDelta="0" countBase="38">
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-76" timeBase="1743" countDelta="0" countBase="38">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-76" timeBase="1723" countDelta="0" countBase="38">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="function" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-68" timeBase="1698" countDelta="0" countBase="38">
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="getArithFunction" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSemantics/ArithFunction;" timeDelta="-13" timeBase="227" countDelta="0" countBase="38">
                                                                                <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="3" timeBase="13" countDelta="0" countBase="70"/>
                                                                                <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="6"/>
                                                                                <node leaf="false" class="jason.asSemantics.Agent" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-7" timeBase="85" countDelta="0" countBase="38">
                                                                                  <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-4" timeBase="18" countDelta="0" countBase="38"/>
                                                                                  <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-7" timeBase="33" countDelta="0" countBase="38">
                                                                                    <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-10" timeBase="14" countDelta="0" countBase="38"/>
                                                                                  </node>
                                                                                </node>
                                                                                <node leaf="false" class="jason.asSyntax.directives.FunctionRegister" methodName="getFunction" methodSignature="(Ljava/lang/String;I)Ljason/asSemantics/ArithFunction;" timeDelta="-9" timeBase="32" countDelta="0" countBase="38">
                                                                                  <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-3" timeBase="10" countDelta="0" countBase="38"/>
                                                                                </node>
                                                                              </node>
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-52" timeBase="1439" countDelta="0" countBase="38">
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="48" timeBase="112" countDelta="0" countBase="3">
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="49" timeBase="109" countDelta="0" countBase="3">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="56" timeBase="5" countDelta="0" countBase="3">
                                                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="1" timeBase="2" countDelta="0" countBase="3"/>
                                                                                    </node>
                                                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="3" timeBase="0" countDelta="6" countBase="0"/>
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="18" countDelta="0" countBase="3">
                                                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                                                                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="4" countDelta="0" countBase="3">
                                                                                        <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="3"/>
                                                                                      </node>
                                                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                                                                      <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="5" countDelta="0" countBase="3">
                                                                                        <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                                                                      </node>
                                                                                    </node>
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-4" timeBase="78" countDelta="0" countBase="3">
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="1" timeBase="42" countDelta="0" countBase="1">
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJJJ)I" timeDelta="2" timeBase="39" countDelta="0" countBase="1">
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa3_0" methodSignature="(JJ)I" timeDelta="2" timeBase="37" countDelta="0" countBase="1">
                                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfa_0" methodSignature="(IJJ)I" timeDelta="2" timeBase="37" countDelta="0" countBase="1">
                                                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="1" timeBase="35" countDelta="0" countBase="1">
                                                                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="2" timeBase="9" countDelta="0" countBase="16"/>
                                                                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="1" timeBase="16" countDelta="0" countBase="16">
                                                                                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="2" timeBase="6" countDelta="0" countBase="32"/>
                                                                                                </node>
                                                                                              </node>
                                                                                              <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopStringLiteralDfa_0" methodSignature="(IJJ)I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                            </node>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-4" timeBase="23" countDelta="0" countBase="2">
                                                                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-1" timeBase="10" countDelta="0" countBase="14">
                                                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="1" timeBase="1" countDelta="0" countBase="14"/>
                                                                                        </node>
                                                                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-1" timeBase="5" countDelta="0" countBase="14"/>
                                                                                      </node>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                                <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                                <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                                                                                <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="1" timeBase="2" countDelta="0" countBase="3"/>
                                                                                <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="setNegated" methodSignature="(Z)Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="32" countDelta="0" countBase="35">
                                                                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="-2" timeBase="10" countDelta="0" countBase="35"/>
                                                                                </node>
                                                                                <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="3" countDelta="0" countBase="6"/>
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="-2" timeBase="212" countDelta="0" countBase="3">
                                                                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                                  <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="1" timeBase="2" countDelta="0" countBase="5"/>
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="1" timeBase="172" countDelta="0" countBase="1">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="2" timeBase="166" countDelta="0" countBase="2">
                                                                                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="162" countDelta="0" countBase="2"/>
                                                                                    </node>
                                                                                    <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                    <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                                                                                  </node>
                                                                                  <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-2" timeBase="10" countDelta="0" countBase="3">
                                                                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-2" timeBase="10" countDelta="0" countBase="3">
                                                                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="5" countDelta="0" countBase="3">
                                                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="3"/>
                                                                                      </node>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                                <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-4" timeBase="44" countDelta="0" countBase="3">
                                                                                  <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-2" timeBase="27" countDelta="0" countBase="3">
                                                                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="3">
                                                                                      <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                                    </node>
                                                                                  </node>
                                                                                  <node leaf="false" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="13" countDelta="0" countBase="3">
                                                                                    <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-3" timeBase="9" countDelta="0" countBase="2">
                                                                                      <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                                <node leaf="false" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="-9" timeBase="28" countDelta="0" countBase="3">
                                                                                  <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-8" timeBase="25" countDelta="0" countBase="3">
                                                                                    <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-5" timeBase="22" countDelta="0" countBase="3">
                                                                                      <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                                                                                      <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                      <node leaf="false" class="jason.asSyntax.Atom" methodName="calcHashCode" methodSignature="()I" timeDelta="-7" timeBase="11" countDelta="0" countBase="1">
                                                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-7" timeBase="7" countDelta="-1" countBase="1"/>
                                                                                      </node>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                                <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-14" timeBase="50" countDelta="0" countBase="3">
                                                                                  <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-13" timeBase="48" countDelta="0" countBase="3">
                                                                                    <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-13" timeBase="42" countDelta="0" countBase="3">
                                                                                      <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="14" countDelta="0" countBase="2">
                                                                                        <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="13" countDelta="0" countBase="2">
                                                                                          <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-2" timeBase="11" countDelta="0" countBase="2">
                                                                                            <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="8" countDelta="0" countBase="2">
                                                                                              <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                                                            </node>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                      <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-1" timeBase="7" countDelta="0" countBase="3">
                                                                                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                                                                                        <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="3" countDelta="0" countBase="3">
                                                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                                                        </node>
                                                                                      </node>
                                                                                      <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                                                                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-11" timeBase="13" countDelta="0" countBase="2">
                                                                                        <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-10" timeBase="11" countDelta="0" countBase="2"/>
                                                                                      </node>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="-17" timeBase="576" countDelta="0" countBase="38">
                                                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="3" timeBase="12" countDelta="0" countBase="38"/>
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="-28" timeBase="527" countDelta="0" countBase="38">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-6" timeBase="47" countDelta="0" countBase="38">
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-6" timeBase="35" countDelta="0" countBase="3">
                                                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="2" timeBase="1" countDelta="0" countBase="3"/>
                                                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-4" timeBase="21" countDelta="0" countBase="3">
                                                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="3" countBase="0"/>
                                                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="2" countDelta="-3" countBase="3"/>
                                                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-3" timeBase="3" countDelta="-3" countBase="3"/>
                                                                                          <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="12" countDelta="0" countBase="3">
                                                                                            <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-2" timeBase="11" countDelta="0" countBase="3"/>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-16" timeBase="450" countDelta="0" countBase="38">
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="3" timeBase="31" countDelta="0" countBase="38">
                                                                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="6" timeBase="11" countDelta="0" countBase="38"/>
                                                                                      </node>
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_36" methodSignature="()Z" timeDelta="-12" timeBase="389" countDelta="0" countBase="35">
                                                                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_41" methodSignature="()Z" timeDelta="-11" timeBase="368" countDelta="0" countBase="35">
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_55" methodSignature="()Z" timeDelta="-3" timeBase="29" countDelta="0" countBase="35">
                                                                                            <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-4" timeBase="12" countDelta="0" countBase="35"/>
                                                                                          </node>
                                                                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_58" methodSignature="()Z" timeDelta="-20" timeBase="307" countDelta="0" countBase="35">
                                                                                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_38" methodSignature="()Z" timeDelta="-19" timeBase="287" countDelta="0" countBase="35">
                                                                                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="-17" timeBase="269" countDelta="0" countBase="35">
                                                                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-16" timeBase="252" countDelta="0" countBase="35">
                                                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="7" countDelta="0" countBase="35"/>
                                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-4" timeBase="37" countDelta="0" countBase="35">
                                                                                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="1" timeBase="11" countDelta="0" countBase="33"/>
                                                                                                  </node>
                                                                                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-5" timeBase="25" countDelta="0" countBase="35"/>
                                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-10" timeBase="130" countDelta="0" countBase="35">
                                                                                                    <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="30" countDelta="0" countBase="35">
                                                                                                      <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-2" timeBase="10" countDelta="0" countBase="35"/>
                                                                                                    </node>
                                                                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="1" timeBase="8" countDelta="0" countBase="35"/>
                                                                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="9" countDelta="0" countBase="35"/>
                                                                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="12" countDelta="0" countBase="35"/>
                                                                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-3" timeBase="13" countDelta="0" countBase="35"/>
                                                                                                  </node>
                                                                                                </node>
                                                                                              </node>
                                                                                            </node>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                  </node>
                                                                                </node>
                                                                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="var" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/VarTerm;" timeDelta="-40" timeBase="299" countDelta="0" countBase="37">
                                                                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-1" timeBase="7" countDelta="0" countBase="37"/>
                                                                                  <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-4" timeBase="132" countDelta="0" countBase="37">
                                                                                    <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjava/lang/String;)V" timeDelta="-4" timeBase="111" countDelta="0" countBase="37">
                                                                                      <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-2" timeBase="89" countDelta="0" countBase="37">
                                                                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="67" countDelta="0" countBase="37">
                                                                                          <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-1" timeBase="50" countDelta="0" countBase="37">
                                                                                            <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="28" countDelta="0" countBase="37"/>
                                                                                          </node>
                                                                                        </node>
                                                                                      </node>
                                                                                    </node>
                                                                                  </node>
                                                                                  <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-7" timeBase="14" countDelta="0" countBase="37"/>
                                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-7" timeBase="30" countDelta="0" countBase="37">
                                                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-4" timeBase="17" countDelta="0" countBase="2">
                                                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="2" timeBase="0" countDelta="2" countBase="0"/>
                                                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="2">
                                                                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                                                                                      </node>
                                                                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-3" timeBase="10" countDelta="0" countBase="2"/>
                                                                                    </node>
                                                                                  </node>
                                                                                  <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-12" timeBase="28" countDelta="0" countBase="37"/>
                                                                                </node>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-109" timeBase="780" countDelta="0" countBase="41">
                                                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-104" timeBase="756" countDelta="0" countBase="41">
                                                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-11" timeBase="20" countDelta="0" countBase="79"/>
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-18" timeBase="182" countDelta="0" countBase="41">
                                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="5" timeBase="7" countDelta="0" countBase="41"/>
                                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="37" countDelta="0" countBase="40"/>
                                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="11" countDelta="0" countBase="41"/>
                                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="6" countDelta="0" countBase="41"/>
                                                                        <node leaf="true" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="30" countDelta="0" countBase="41"/>
                                                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-4" timeBase="7" countDelta="0" countBase="41"/>
                                                                      </node>
                                                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-34" timeBase="377" countDelta="0" countBase="41">
                                                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa1_0" methodSignature="(JJ)I" timeDelta="-5" timeBase="15" countDelta="0" countBase="1">
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa2_0" methodSignature="(JJJJ)I" timeDelta="-5" timeBase="13" countDelta="0" countBase="1">
                                                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStartNfa_0" methodSignature="(IJJ)I" timeDelta="-4" timeBase="11" countDelta="0" countBase="1">
                                                                              <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopStringLiteralDfa_0" methodSignature="(IJJ)I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-3" timeBase="9" countDelta="0" countBase="1">
                                                                                <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-2" timeBase="5" countDelta="0" countBase="3"/>
                                                                              </node>
                                                                            </node>
                                                                          </node>
                                                                        </node>
                                                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-22" timeBase="323" countDelta="0" countBase="39">
                                                                          <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="18" timeBase="28" countDelta="0" countBase="171"/>
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="1" timeBase="8" countDelta="0" countBase="10">
                                                                            <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-1" timeBase="3" countDelta="0" countBase="20"/>
                                                                          </node>
                                                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddStates" methodSignature="(II)V" timeDelta="-2" timeBase="31" countDelta="0" countBase="27">
                                                                            <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-5" timeBase="11" countDelta="0" countBase="81"/>
                                                                          </node>
                                                                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-27" timeBase="123" countDelta="0" countBase="208">
                                                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-22" timeBase="53" countDelta="0" countBase="208"/>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-46" timeBase="118" countDelta="0" countBase="63">
                                                                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-60" timeBase="94" countDelta="0" countBase="63">
                                                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-57" timeBase="66" countDelta="0" countBase="63"/>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                      <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="-1454" timeBase="9210" countDelta="0" countBase="13">
                                                        <node leaf="false" class="jason.asSyntax.InternalActionLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Structure;Ljason/asSemantics/Agent;)V" timeDelta="-1455" timeBase="9203" countDelta="0" countBase="13">
                                                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="4" countDelta="0" countBase="13"/>
                                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-9" timeBase="393" countDelta="0" countBase="13">
                                                            <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="9" timeBase="195" countDelta="0" countBase="29">
                                                              <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="8" timeBase="160" countDelta="0" countBase="29">
                                                                <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="14" timeBase="125" countDelta="0" countBase="29">
                                                                  <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="10" timeBase="114" countDelta="0" countBase="29">
                                                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="5" timeBase="87" countDelta="0" countBase="29">
                                                                      <node leaf="true" class="jason.asSyntax.VarTerm" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="5" countDelta="0" countBase="29"/>
                                                                      <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-18" timeBase="60" countDelta="0" countBase="29">
                                                                        <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-8" timeBase="27" countDelta="0" countBase="29">
                                                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-10" timeBase="18" countDelta="0" countBase="29"/>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                                <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-8" timeBase="9" countDelta="0" countBase="29"/>
                                                              </node>
                                                              <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="5" countDelta="0" countBase="29"/>
                                                            </node>
                                                            <node leaf="true" class="jason.asSyntax.Atom" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="1" countDelta="0" countBase="2"/>
                                                            <node leaf="true" class="jason.asSyntax.StringTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="4" countDelta="0" countBase="2"/>
                                                            <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="10" countDelta="0" countBase="13">
                                                              <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="13"/>
                                                            </node>
                                                            <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-2" timeBase="14" countDelta="0" countBase="13"/>
                                                            <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="12" countDelta="0" countBase="35"/>
                                                            <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="25" countDelta="0" countBase="13">
                                                              <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-3" timeBase="10" countDelta="0" countBase="13">
                                                                <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="4" countDelta="0" countBase="13"/>
                                                              </node>
                                                            </node>
                                                            <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-10" timeBase="30" countDelta="0" countBase="1">
                                                              <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="clone" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="-10" timeBase="27" countDelta="0" countBase="1">
                                                                <node leaf="false" class="jason.asSyntax.PlanBodyImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/PlanBody$BodyType;Ljason/asSyntax/Term;Z)V" timeDelta="1" timeBase="6" countDelta="0" countBase="1">
                                                                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                                                                </node>
                                                                <node leaf="false" class="jason.asSyntax.VarTerm" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-11" timeBase="18" countDelta="0" countBase="1">
                                                                  <node leaf="false" class="jason.asSyntax.VarTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-11" timeBase="17" countDelta="0" countBase="1">
                                                                    <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-10" timeBase="15" countDelta="0" countBase="1">
                                                                      <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-10" timeBase="14" countDelta="0" countBase="1">
                                                                        <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-9" timeBase="13" countDelta="0" countBase="1">
                                                                          <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-11" timeBase="13" countDelta="0" countBase="1">
                                                                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                                                                          </node>
                                                                        </node>
                                                                      </node>
                                                                    </node>
                                                                  </node>
                                                                </node>
                                                              </node>
                                                            </node>
                                                          </node>
                                                          <node leaf="false" class="jason.asSemantics.Agent" methodName="getIA" methodSignature="(Ljava/lang/String;)Ljason/asSemantics/InternalAction;" timeDelta="-1433" timeBase="8783" countDelta="0" countBase="13">
                                                            <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="35" timeBase="10" countDelta="0" countBase="26"/>
                                                            <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="3" timeBase="4" countDelta="0" countBase="13"/>
                                                            <node leaf="false" class="java.lang.reflect.Method" methodName="invoke" methodSignature="(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="2" timeBase="33" countDelta="0" countBase="2">
                                                              <node leaf="false" class="jason.stdlib.print" methodName="create" methodSignature="()Ljason/asSemantics/InternalAction;" timeDelta="1" timeBase="12" countDelta="0" countBase="1">
                                                                <node leaf="true" class="jason.stdlib.print" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="3" timeBase="7" countDelta="0" countBase="1"/>
                                                              </node>
                                                              <node leaf="false" class="jason.stdlib.signal" methodName="create" methodSignature="()Ljason/asSemantics/InternalAction;" timeDelta="-1" timeBase="9" countDelta="0" countBase="1">
                                                                <node leaf="true" class="jason.stdlib.signal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="5" countDelta="0" countBase="1"/>
                                                              </node>
                                                            </node>
                                                            <node leaf="true" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="2" timeBase="8" countDelta="0" countBase="7"/>
                                                            <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="10" countDelta="0" countBase="13"/>
                                                            <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="8" countDelta="0" countBase="13"/>
                                                            <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="-4" timeBase="9" countDelta="0" countBase="13"/>
                                                            <node leaf="true" class="java.lang.Class" methodName="getConstructor" methodSignature="([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" timeDelta="-12" timeBase="52" countDelta="0" countBase="5"/>
                                                            <node leaf="false" class="java.lang.reflect.Constructor" methodName="newInstance" methodSignature="([Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-17" timeBase="105" countDelta="0" countBase="5">
                                                              <node leaf="true" class="jason.asSemantics.DefaultInternalAction" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="17" countDelta="0" countBase="4"/>
                                                              <node leaf="false" class="jason.stdlib.drop_intention" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-6" timeBase="14" countDelta="0" countBase="1">
                                                                <node leaf="true" class="jason.asSemantics.DefaultInternalAction" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-3" timeBase="5" countDelta="0" countBase="1"/>
                                                              </node>
                                                            </node>
                                                            <node leaf="true" class="java.lang.Class" methodName="getMethod" methodSignature="(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;" timeDelta="-51" timeBase="324" countDelta="0" countBase="7"/>
                                                            <node leaf="false" class="java.lang.Class" methodName="forName" methodSignature="(Ljava/lang/String;)Ljava/lang/Class;" timeDelta="-1379" timeBase="8163" countDelta="0" countBase="7">
                                                              <node leaf="true" class="jason.stdlib.print" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="1"/>
                                                              <node leaf="true" class="jason.stdlib.signal" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-1" timeBase="5" countDelta="0" countBase="1"/>
                                                            </node>
                                                          </node>
                                                        </node>
                                                      </node>
                                                    </node>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                        </node>
                      </node>
                    </node>
                  </node>
                </node>
              </node>
            </node>
          </node>
        </node>
      </node>
    </node>
    <node leaf="false" class="jason.infra.centralised.BaseCentralisedMAS" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="4" timeBase="190" countDelta="0" countBase="1">
      <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="3" timeBase="67" countDelta="0" countBase="1"/>
      <node leaf="true" class="java.lang.Class" methodName="getName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="52" countDelta="0" countBase="1"/>
    </node>
  </node>
  <node leaf="false" class="java.util.concurrent.ThreadPoolExecutor$Worker" methodName="run" methodSignature="()V" timeDelta="64" timeBase="374" countDelta="0" countBase="1">
    <node leaf="false" class="jason.environment.Environment$1" methodName="run" methodSignature="()V" timeDelta="63" timeBase="372" countDelta="0" countBase="1">
      <node leaf="false" class="DebugEnvironment" methodName="executeAction" methodSignature="(Ljava/lang/String;Ljason/asSyntax/Structure;)Z" timeDelta="75" timeBase="327" countDelta="0" countBase="1">
        <node leaf="false" class="java.util.logging.Logger" methodName="info" methodSignature="(Ljava/lang/String;)V" timeDelta="58" timeBase="223" countDelta="0" countBase="1">
          <node leaf="false" class="jason.runtime.MASConsoleLogHandler" methodName="publish" methodSignature="(Ljava/util/logging/LogRecord;)V" timeDelta="47" timeBase="178" countDelta="0" countBase="1">
            <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="append" methodSignature="(Ljava/lang/String;Ljava/lang/String;)V" timeDelta="47" timeBase="166" countDelta="0" countBase="1">
              <node leaf="true" class="javax.swing.JTextArea" methodName="append" methodSignature="(Ljava/lang/String;)V" timeDelta="46" timeBase="163" countDelta="0" countBase="1"/>
              <node leaf="true" class="javax.swing.JFrame" methodName="isVisible" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
              <node leaf="true" class="javax.swing.JTextArea" methodName="getDocument" methodSignature="()Ljavax/swing/text/Document;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
            </node>
            <node leaf="true" class="java.util.logging.Formatter" methodName="format" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="-1" timeBase="9" countDelta="0" countBase="1"/>
          </node>
        </node>
        <node leaf="false" class="jason.asSyntax.Structure" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="6" timeBase="38" countDelta="0" countBase="1">
          <node leaf="true" class="java.util.stream.Stream" methodName="collect" methodSignature="(Ljava/util/stream/Collector;)Ljava/lang/Object;" timeDelta="3" timeBase="19" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.util.List" methodName="stream" methodSignature="()Ljava/util/stream/Stream;" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.util.stream.Collectors" methodName="joining" methodSignature="(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
          <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(C)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
          <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
        </node>
        <node leaf="false" class="jason.environment.Environment" methodName="informAgsEnvironmentChanged" methodSignature="([Ljava/lang/String;)V" timeDelta="3" timeBase="48" countDelta="0" countBase="1">
          <node leaf="false" class="jason.infra.centralised.CentralisedEnvironment" methodName="informAgsEnvironmentChanged" methodSignature="([Ljava/lang/String;)V" timeDelta="3" timeBase="43" countDelta="0" countBase="1">
            <node leaf="true" class="java.util.Collection" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="2" timeBase="9" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="2"/>
            <node leaf="true" class="java.util.Map" methodName="values" methodSignature="()Ljava/util/Collection;" timeDelta="-1" timeBase="6" countDelta="0" countBase="1"/>
          </node>
        </node>
        <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="2" timeBase="0" countDelta="4" countBase="0"/>
      </node>
    </node>
  </node>
  <node leaf="false" class="java.awt.EventDispatchThread" methodName="run" methodSignature="()V" timeDelta="-178" timeBase="2307" countDelta="0" countBase="1">
    <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS$6" methodName="actionPerformed" methodSignature="(Ljava/awt/event/ActionEvent;)V" timeDelta="-178" timeBase="2307" countDelta="0" countBase="1">
      <node leaf="true" class="jason.runtime.MASConsoleGUI" methodName="setPause" methodSignature="(Z)V" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
      <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="finish" methodSignature="(IZI)V" timeDelta="-179" timeBase="2282" countDelta="0" countBase="1">
        <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS$9" methodName="&lt;init&gt;" methodSignature="(Ljason/infra/centralised/RunCentralisedMAS;IZI)V" timeDelta="1" timeBase="29" countDelta="0" countBase="1">
          <node leaf="true" class="java.lang.Thread" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="2" timeBase="16" countDelta="0" countBase="1"/>
        </node>
        <node leaf="true" class="java.util.concurrent.atomic.AtomicBoolean" methodName="getAndSet" methodSignature="(Z)Z" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
        <node leaf="true" class="jason.infra.centralised.RunCentralisedMAS$8" methodName="&lt;init&gt;" methodSignature="(Ljason/infra/centralised/RunCentralisedMAS;II)V" timeDelta="-1" timeBase="35" countDelta="0" countBase="1"/>
      </node>
    </node>
  </node>
  <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS$9" methodName="run" methodSignature="()V" timeDelta="-1653" timeBase="8791" countDelta="0" countBase="1">
    <node leaf="false" class="jason.infra.centralised.RunCentralisedMAS" methodName="stopAgs" methodSignature="(I)V" timeDelta="85" timeBase="261" countDelta="0" countBase="1">
      <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="stopAg" methodSignature="()V" timeDelta="61" timeBase="158" countDelta="0" countBase="1">
        <node leaf="false" class="jason.asSemantics.Agent" methodName="stopAg" methodSignature="()V" timeDelta="40" timeBase="106" countDelta="0" countBase="1">
          <node leaf="false" class="jason.architecture.MindInspectorWebImpl" methodName="removeAg" methodSignature="(Ljason/asSemantics/Agent;)V" timeDelta="27" timeBase="44" countDelta="0" countBase="1">
            <node leaf="true" class="java.util.Map" methodName="remove" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="21" timeBase="36" countDelta="0" countBase="2"/>
            <node leaf="true" class="jason.asSemantics.TransitionSystem" methodName="getAgArch" methodSignature="()Ljason/architecture/AgArch;" timeDelta="2" timeBase="2" countDelta="0" countBase="1"/>
            <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="getAgName" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
          </node>
          <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="5" timeBase="7" countDelta="0" countBase="13"/>
          <node leaf="true" class="jason.asSemantics.DefaultInternalAction" methodName="destroy" methodSignature="()V" timeDelta="3" timeBase="1" countDelta="0" countBase="13"/>
          <node leaf="true" class="java.util.Map" methodName="values" methodSignature="()Ljava/util/Collection;" timeDelta="2" timeBase="8" countDelta="0" countBase="1"/>
          <node leaf="true" class="jason.bb.BeliefBase" methodName="getLock" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
          <node leaf="true" class="jason.bb.BeliefBase" methodName="stop" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
          <node leaf="true" class="java.util.Collection" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
        </node>
        <node leaf="true" class="java.lang.Thread" methodName="interrupt" methodSignature="()V" timeDelta="3" timeBase="14" countDelta="0" countBase="1"/>
        <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="wake" methodSignature="()V" timeDelta="2" timeBase="9" countDelta="0" countBase="1">
          <node leaf="true" class="java.lang.Object" methodName="notifyAll" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
        </node>
        <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="getUserAgArch" methodSignature="()Ljason/architecture/AgArch;" timeDelta="1" timeBase="2" countDelta="0" countBase="1">
          <node leaf="true" class="jason.architecture.AgArch" methodName="getFirstAgArch" methodSignature="()Ljason/architecture/AgArch;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
        </node>
      </node>
      <node leaf="false" class="jason.infra.centralised.BaseCentralisedMAS" methodName="delAg" methodSignature="(Ljava/lang/String;)Ljason/infra/centralised/CentralisedAgArch;" timeDelta="14" timeBase="25" countDelta="0" countBase="1">
        <node leaf="true" class="java.util.Map" methodName="remove" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="6" timeBase="11" countDelta="0" countBase="1"/>
        <node leaf="false" class="jason.infra.centralised.BaseCentralisedMAS" methodName="getAg" methodSignature="(Ljava/lang/String;)Ljason/infra/centralised/CentralisedAgArch;" timeDelta="3" timeBase="2" countDelta="0" countBase="1">
          <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
        </node>
        <node leaf="true" class="jason.infra.centralised.BaseCentralisedMAS" methodName="getRunner" methodSignature="()Ljason/infra/centralised/BaseCentralisedMAS;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
      </node>
      <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="7" timeBase="0" countDelta="2" countBase="0"/>
      <node leaf="true" class="java.util.ArrayList" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="3" timeBase="6" countDelta="0" countBase="1"/>
      <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="getAgName" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
      <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
      <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(Ljava/util/Collection;)V" timeDelta="-4" timeBase="50" countDelta="0" countBase="1"/>
    </node>
    <node leaf="true" class="javax.management.MBeanServer" methodName="unregisterMBean" methodSignature="(Ljavax/management/ObjectName;)V" timeDelta="57" timeBase="111" countDelta="0" countBase="1"/>
    <node leaf="true" class="java.io.File" methodName="delete" methodSignature="()Z" timeDelta="8" timeBase="326" countDelta="0" countBase="1"/>
    <node leaf="true" class="javax.management.ObjectName" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="1" timeBase="23" countDelta="0" countBase="1"/>
    <node leaf="true" class="java.io.File" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="10" countDelta="0" countBase="1"/>
    <node leaf="true" class="java.io.File" methodName="exists" methodSignature="()Z" timeDelta="-1" timeBase="34" countDelta="0" countBase="1"/>
    <node leaf="false" class="jason.infra.centralised.CentralisedEnvironment" methodName="stop" methodSignature="()V" timeDelta="-8" timeBase="171" countDelta="0" countBase="1">
      <node leaf="false" class="jason.environment.Environment" methodName="stop" methodSignature="()V" timeDelta="-9" timeBase="165" countDelta="0" countBase="1">
        <node leaf="true" class="java.util.concurrent.ExecutorService" methodName="shutdownNow" methodSignature="()Ljava/util/List;" timeDelta="-11" timeBase="165" countDelta="0" countBase="1"/>
      </node>
    </node>
    <node leaf="true" class="java.io.PrintStream" methodName="flush" methodSignature="()V" timeDelta="-11" timeBase="34" countDelta="0" countBase="2"/>
    <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="close" methodSignature="()V" timeDelta="-1770" timeBase="7734" countDelta="0" countBase="1">
      <node leaf="true" class="java.io.FileWriter" methodName="write" methodSignature="(I)V" timeDelta="8" timeBase="35" countDelta="0" countBase="1"/>
      <node leaf="true" class="java.io.FileWriter" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="3" timeBase="276" countDelta="0" countBase="1"/>
      <node leaf="true" class="jason.runtime.MASConsoleGUI" methodName="setPause" methodSignature="(Z)V" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
      <node leaf="false" class="jason.runtime.OutputStreamAdapter" methodName="restoreOriginalOut" methodSignature="()V" timeDelta="-1" timeBase="11" countDelta="0" countBase="1">
        <node leaf="true" class="java.lang.System" methodName="setOut" methodSignature="(Ljava/io/PrintStream;)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="1"/>
      </node>
      <node leaf="true" class="java.io.FileWriter" methodName="close" methodSignature="()V" timeDelta="-21" timeBase="250" countDelta="0" countBase="1"/>
      <node leaf="true" class="javax.swing.JFrame" methodName="setVisible" methodSignature="(Z)V" timeDelta="-1754" timeBase="7090" countDelta="0" countBase="1"/>
    </node>
  </node>
  <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="run" methodSignature="()V" timeDelta="-2839" timeBase="187123" countDelta="0" countBase="1">
    <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="sleep" methodSignature="()V" timeDelta="15" timeBase="721" countDelta="0" countBase="51">
      <node leaf="true" class="java.lang.Object" methodName="wait" methodSignature="(J)V" timeDelta="14" timeBase="364" countDelta="0" countBase="51"/>
      <node leaf="true" class="jason.asSemantics.TransitionSystem" methodName="getSettings" methodSignature="()Ljason/runtime/Settings;" timeDelta="-1" timeBase="8" countDelta="0" countBase="51"/>
      <node leaf="true" class="jason.runtime.Settings" methodName="isSync" methodSignature="()Z" timeDelta="-3" timeBase="9" countDelta="0" countBase="51"/>
      <node leaf="true" class="jason.architecture.AgArch" methodName="getTS" methodSignature="()Ljason/asSemantics/TransitionSystem;" timeDelta="-11" timeBase="23" countDelta="0" countBase="51"/>
    </node>
    <node leaf="true" class="jason.asSemantics.TransitionSystem" methodName="getSettings" methodSignature="()Ljason/runtime/Settings;" timeDelta="14" timeBase="82" countDelta="0" countBase="51"/>
    <node leaf="true" class="jason.runtime.Settings" methodName="isSync" methodSignature="()Z" timeDelta="3" timeBase="19" countDelta="0" countBase="51"/>
    <node leaf="true" class="java.util.logging.Logger" methodName="fine" methodSignature="(Ljava/lang/String;)V" timeDelta="3" timeBase="10" countDelta="0" countBase="1"/>
    <node leaf="false" class="jason.architecture.AgArch" methodName="incCycleNumber" methodSignature="()V" timeDelta="2" timeBase="112" countDelta="0" countBase="51">
      <node leaf="true" class="jason.architecture.AgArch" methodName="setCycleNumber" methodSignature="(I)V" timeDelta="4" timeBase="36" countDelta="0" countBase="51"/>
    </node>
    <node leaf="true" class="jason.architecture.AgArch" methodName="getFirstAgArch" methodSignature="()Ljason/architecture/AgArch;" timeDelta="-3" timeBase="25" countDelta="0" countBase="51"/>
    <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="canSleep" methodSignature="()Z" timeDelta="-41" timeBase="338" countDelta="0" countBase="51">
      <node leaf="false" class="jason.asSemantics.Circumstance" methodName="hasEvent" methodSignature="()Z" timeDelta="3" timeBase="28" countDelta="0" countBase="51">
        <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="-4" timeBase="16" countDelta="0" countBase="51"/>
      </node>
      <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="getAgArch" methodSignature="()Ljason/architecture/AgArch;" timeDelta="2" timeBase="23" countDelta="0" countBase="51">
        <node leaf="true" class="jason.architecture.AgArch" methodName="getFirstAgArch" methodSignature="()Ljason/architecture/AgArch;" timeDelta="3" timeBase="5" countDelta="0" countBase="51"/>
      </node>
      <node leaf="false" class="jason.asSemantics.Circumstance" methodName="hasMsg" methodSignature="()Z" timeDelta="1" timeBase="24" countDelta="0" countBase="51">
        <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="3" timeBase="7" countDelta="0" countBase="51"/>
      </node>
      <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="-2" timeBase="18" countDelta="0" countBase="51"/>
      <node leaf="false" class="jason.asSemantics.Circumstance" methodName="hasRunningIntention" methodSignature="()Z" timeDelta="-3" timeBase="31" countDelta="0" countBase="51">
        <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="1" timeBase="15" countDelta="0" countBase="51"/>
      </node>
      <node leaf="false" class="jason.asSemantics.Circumstance" methodName="hasFeedbackAction" methodSignature="()Z" timeDelta="-4" timeBase="29" countDelta="0" countBase="51">
        <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="-3" timeBase="10" countDelta="0" countBase="51"/>
      </node>
      <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="canSleep" methodSignature="()Z" timeDelta="-11" timeBase="49" countDelta="0" countBase="51">
        <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="isRunning" methodSignature="()Z" timeDelta="-5" timeBase="8" countDelta="0" countBase="51"/>
        <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="-11" timeBase="23" countDelta="0" countBase="51"/>
      </node>
      <node leaf="true" class="jason.asSemantics.Circumstance" methodName="isAtomicIntentionSuspended" methodSignature="()Z" timeDelta="-24" timeBase="46" countDelta="0" countBase="51"/>
    </node>
    <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="reasoningCycle" methodSignature="()V" timeDelta="-2754" timeBase="185096" countDelta="0" countBase="51">
      <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="deliberate" methodSignature="()V" timeDelta="250" timeBase="5373" countDelta="0" countBase="51">
        <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="deliberate" methodSignature="()V" timeDelta="256" timeBase="4946" countDelta="0" countBase="2">
          <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applySemanticRuleDeliberate" methodSignature="()V" timeDelta="258" timeBase="4926" countDelta="0" countBase="6">
            <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applyAddIM" methodSignature="()V" timeDelta="218" timeBase="4539" countDelta="0" countBase="1">
              <node leaf="false" class="jason.asSemantics.Intention" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="175" timeBase="3227" countDelta="0" countBase="1">
                <node leaf="false" class="jason.asSemantics.Circumstance$IntentionPlace" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="9" timeBase="38" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.asSemantics.Circumstance$IntentionPlace" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="11" countDelta="0" countBase="8">
                    <node leaf="true" class="java.lang.Enum" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="1" timeBase="4" countDelta="0" countBase="8"/>
                  </node>
                </node>
                <node leaf="true" class="java.util.concurrent.atomic.AtomicInteger" methodName="incrementAndGet" methodSignature="()I" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.util.ArrayDeque" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="5" countDelta="0" countBase="1"/>
              </node>
              <node leaf="false" class="jason.asSemantics.IntendedMeans" methodName="&lt;init&gt;" methodSignature="(Ljason/asSemantics/Option;Ljason/asSyntax/Trigger;)V" timeDelta="2" timeBase="62" countDelta="0" countBase="1">
                <node leaf="false" class="jason.asSyntax.Trigger" methodName="capply" methodSignature="(Ljason/asSemantics/Unifier;)Ljason/asSyntax/Trigger;" timeDelta="1" timeBase="47" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="capply" methodSignature="(Ljason/asSemantics/Unifier;)Ljason/asSyntax/Term;" timeDelta="2" timeBase="40" countDelta="0" countBase="1">
                    <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;Ljason/asSemantics/Unifier;)V" timeDelta="2" timeBase="40" countDelta="0" countBase="1">
                      <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;Ljason/asSemantics/Unifier;)V" timeDelta="2" timeBase="38" countDelta="0" countBase="1">
                        <node leaf="false" class="jason.asSyntax.Pred" methodName="setAnnots" methodSignature="(Ljason/asSyntax/ListTerm;)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="22" countDelta="0" countBase="1">
                          <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="isTail" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                          <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="listTermIterator" methodSignature="()Ljava/util/Iterator;" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
                          <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                          <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                          <node leaf="false" class="jason.asSyntax.Pred" methodName="addAnnot" methodSignature="(Ljason/asSyntax/Term;)Z" timeDelta="-1" timeBase="11" countDelta="0" countBase="1">
                            <node leaf="true" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljava/lang/Object;)I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                          </node>
                        </node>
                        <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="capply" methodSignature="(Ljason/asSemantics/Unifier;)Ljason/asSyntax/Term;" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
                        <node leaf="true" class="jason.asSyntax.Pred" methodName="getAnnots" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                        <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                      </node>
                    </node>
                  </node>
                </node>
              </node>
              <node leaf="false" class="jason.asSemantics.Circumstance" methodName="addRunningIntention" methodSignature="(Ljason/asSemantics/Intention;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="1">
                <node leaf="true" class="java.util.Queue" methodName="offer" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
              </node>
              <node leaf="false" class="jason.asSemantics.Intention" methodName="push" methodSignature="(Ljason/asSemantics/IntendedMeans;)V" timeDelta="1" timeBase="13" countDelta="0" countBase="1">
                <node leaf="false" class="jason.asSemantics.IntendedMeans" methodName="isAtomic" methodSignature="()Z" timeDelta="1" timeBase="3" countDelta="0" countBase="1">
                  <node leaf="true" class="jason.asSyntax.Plan" methodName="isAtomic" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                </node>
                <node leaf="true" class="java.util.Deque" methodName="push" methodSignature="(Ljava/lang/Object;)V" timeDelta="1" timeBase="6" countDelta="0" countBase="1"/>
              </node>
              <node leaf="true" class="jason.asSyntax.Trigger" methodName="isAchvGoal" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="1"/>
              <node leaf="true" class="jason.asSemantics.Event" methodName="getTrigger" methodSignature="()Ljason/asSyntax/Trigger;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
            </node>
            <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applyRelPl" methodSignature="()V" timeDelta="25" timeBase="251" countDelta="0" countBase="1">
              <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="relevantPlans" methodSignature="(Ljason/asSyntax/Trigger;)Ljava/util/List;" timeDelta="25" timeBase="247" countDelta="0" countBase="1">
                <node leaf="false" class="jason.asSyntax.Plan" methodName="isRelevant" methodSignature="(Ljason/asSyntax/Trigger;Ljason/asSemantics/Unifier;)Ljason/asSemantics/Unifier;" timeDelta="9" timeBase="81" countDelta="0" countBase="2">
                  <node leaf="false" class="jason.asSemantics.Unifier" methodName="unifiesNoUndo" methodSignature="(Ljason/asSyntax/Trigger;Ljason/asSyntax/Trigger;)Z" timeDelta="12" timeBase="69" countDelta="0" countBase="2">
                    <node leaf="false" class="jason.asSemantics.Unifier" methodName="unifiesNoUndo" methodSignature="(Ljason/asSyntax/Term;Ljason/asSyntax/Term;)Z" timeDelta="11" timeBase="61" countDelta="0" countBase="2">
                      <node leaf="false" class="jason.asSemantics.Unifier" methodName="unifyTerms" methodSignature="(Ljason/asSyntax/Term;Ljason/asSyntax/Term;)Z" timeDelta="4" timeBase="45" countDelta="0" countBase="2">
                        <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
                        <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="4" countDelta="0" countBase="2"/>
                        <node leaf="false" class="jason.asSemantics.Unifier" methodName="unifiesNamespace" methodSignature="(Ljason/asSyntax/Literal;Ljason/asSyntax/Literal;)Z" timeDelta="-1" timeBase="9" countDelta="0" countBase="2">
                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                          <node leaf="true" class="java.lang.Object" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="2"/>
                        </node>
                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                        <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                      </node>
                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isCyclicTerm" methodSignature="()Z" timeDelta="2" timeBase="1" countDelta="0" countBase="6"/>
                    </node>
                    <node leaf="true" class="jason.asSyntax.Trigger" methodName="getLiteral" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="2" countDelta="0" countBase="4"/>
                  </node>
                </node>
                <node leaf="false" class="jason.asSyntax.Trigger" methodName="clone" methodSignature="()Ljason/asSyntax/Trigger;" timeDelta="4" timeBase="25" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.asSyntax.Literal" methodName="copy" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="2" timeBase="18" countDelta="0" countBase="1">
                    <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="1" timeBase="17" countDelta="0" countBase="1">
                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="2" timeBase="16" countDelta="0" countBase="1">
                        <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="15" countDelta="0" countBase="1">
                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                          <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="14" countDelta="0" countBase="1">
                            <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
                          </node>
                        </node>
                        <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                      </node>
                    </node>
                  </node>
                </node>
                <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="getCandidatePlans" methodSignature="(Ljason/asSyntax/Trigger;)Ljava/util/List;" timeDelta="2" timeBase="18" countDelta="0" countBase="1">
                  <node leaf="false" class="jason.asSyntax.Trigger" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="1" timeBase="9" countDelta="0" countBase="1">
                    <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                    <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                    <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                  </node>
                  <node leaf="true" class="java.util.List" methodName="isEmpty" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                  <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="5" countDelta="0" countBase="1">
                    <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="3" countDelta="0" countBase="1">
                      <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                    </node>
                  </node>
                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-2" countBase="2"/>
                </node>
                <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="2" timeBase="0" countDelta="3" countBase="0"/>
                <node leaf="true" class="jason.asSemantics.Option" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Plan;Ljason/asSemantics/Unifier;)V" timeDelta="1" timeBase="6" countDelta="0" countBase="2"/>
                <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="6" countDelta="0" countBase="2"/>
                <node leaf="true" class="java.util.List" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                <node leaf="true" class="java.util.LinkedList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="4" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-2" timeBase="2" countDelta="-2" countBase="2"/>
              </node>
            </node>
            <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applyApplPl" methodSignature="()V" timeDelta="10" timeBase="64" countDelta="0" countBase="1">
              <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applicablePlans" methodSignature="(Ljava/util/List;)Ljava/util/List;" timeDelta="9" timeBase="59" countDelta="0" countBase="1">
                <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="5" timeBase="2" countDelta="0" countBase="4"/>
                <node leaf="false" class="jason.asSyntax.Literal" methodName="logicalConsequence" methodSignature="(Ljason/asSemantics/Agent;Ljason/asSemantics/Unifier;)Ljava/util/Iterator;" timeDelta="3" timeBase="29" countDelta="0" countBase="1">
                  <node leaf="true" class="java.util.logging.Logger" methodName="isLoggable" methodSignature="(Ljava/util/logging/Level;)Z" timeDelta="2" timeBase="2" countDelta="0" countBase="1"/>
                  <node leaf="true" class="jason.asSemantics.Agent" methodName="getBB" methodSignature="()Ljason/bb/BeliefBase;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                </node>
                <node leaf="true" class="java.util.List" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="1" timeBase="3" countDelta="0" countBase="1"/>
                <node leaf="true" class="jason.asSemantics.Option" methodName="getPlan" methodSignature="()Ljason/asSyntax/Plan;" timeDelta="-1" timeBase="2" countDelta="0" countBase="3"/>
                <node leaf="true" class="jason.asSemantics.Option" methodName="getUnifier" methodSignature="()Ljason/asSemantics/Unifier;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                <node leaf="true" class="jason.asSemantics.TransitionSystem" methodName="getLogger" methodSignature="()Ljava/util/logging/Logger;" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
                <node leaf="true" class="jason.asSyntax.Plan" methodName="getContext" methodSignature="()Ljason/asSyntax/LogicalFormula;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
                <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
              </node>
            </node>
            <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applySelEv" methodSignature="()V" timeDelta="4" timeBase="34" countDelta="0" countBase="2">
              <node leaf="false" class="SaviAgentBrain" methodName="selectEvent" methodSignature="(Ljava/util/Queue;)Ljason/asSemantics/Event;" timeDelta="2" timeBase="15" countDelta="0" countBase="1">
                <node leaf="true" class="java.util.Queue" methodName="size" methodSignature="()I" timeDelta="1" timeBase="5" countDelta="0" countBase="1"/>
              </node>
              <node leaf="true" class="jason.asSemantics.Agent" methodName="hasCustomSelectOption" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
              <node leaf="true" class="jason.asSemantics.Circumstance" methodName="hasEvent" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
              <node leaf="true" class="java.util.logging.Logger" methodName="isLoggable" methodSignature="(Ljava/util/logging/Level;)Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
            </node>
            <node leaf="true" class="jason.asSemantics.TransitionSystem" methodName="applySelAppl" methodSignature="()V" timeDelta="-1" timeBase="28" countDelta="0" countBase="1"/>
          </node>
          <node leaf="true" class="java.util.Queue" methodName="poll" methodSignature="()Ljava/lang/Object;" timeDelta="2" timeBase="4" countDelta="0" countBase="2"/>
          <node leaf="true" class="jason.asSemantics.Circumstance" methodName="resetDeliberate" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
          <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="isRunning" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-4" countBase="4"/>
        </node>
        <node leaf="true" class="jason.architecture.AgArch" methodName="getTS" methodSignature="()Ljason/asSemantics/TransitionSystem;" timeDelta="12" timeBase="15" countDelta="0" countBase="51"/>
        <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="canSleepDeliberate" methodSignature="()Z" timeDelta="-10" timeBase="342" countDelta="0" countBase="51">
          <node leaf="false" class="jason.asSemantics.Circumstance" methodName="hasEvent" methodSignature="()Z" timeDelta="1" timeBase="86" countDelta="0" countBase="51">
            <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="13" timeBase="36" countDelta="0" countBase="51"/>
          </node>
          <node leaf="true" class="jason.asSemantics.Circumstance" methodName="getSelectedEvent" methodSignature="()Ljason/asSemantics/Event;" timeDelta="-2" timeBase="13" countDelta="0" countBase="50"/>
          <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="-2" timeBase="26" countDelta="0" countBase="50"/>
          <node leaf="true" class="jason.asSemantics.TransitionSystem" methodName="getAgArch" methodSignature="()Ljason/architecture/AgArch;" timeDelta="-3" timeBase="26" countDelta="0" countBase="49"/>
          <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="canSleep" methodSignature="()Z" timeDelta="-9" timeBase="73" countDelta="0" countBase="49">
            <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="isRunning" methodSignature="()Z" timeDelta="1" timeBase="5" countDelta="0" countBase="49"/>
            <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="-8" timeBase="20" countDelta="0" countBase="49"/>
          </node>
        </node>
      </node>
      <node leaf="true" class="jason.architecture.AgArch" methodName="getFirstAgArch" methodSignature="()Ljason/architecture/AgArch;" timeDelta="26" timeBase="51" countDelta="0" countBase="102"/>
      <node leaf="true" class="jason.architecture.AgArch" methodName="reasoningCycleStarting" methodSignature="()V" timeDelta="3" timeBase="9" countDelta="0" countBase="51"/>
      <node leaf="true" class="jason.architecture.AgArch" methodName="reasoningCycleFinished" methodSignature="()V" timeDelta="-2" timeBase="7" countDelta="0" countBase="51"/>
      <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="act" methodSignature="()V" timeDelta="-57" timeBase="2053" countDelta="0" countBase="51">
        <node leaf="true" class="jason.architecture.AgArch" methodName="getTS" methodSignature="()Ljason/asSemantics/TransitionSystem;" timeDelta="-3" timeBase="20" countDelta="0" countBase="51"/>
        <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="canSleepAct" methodSignature="()Z" timeDelta="-22" timeBase="603" countDelta="0" countBase="51">
          <node leaf="true" class="jason.asSemantics.Circumstance" methodName="getSelectedIntention" methodSignature="()Ljason/asSemantics/Intention;" timeDelta="-2" timeBase="13" countDelta="0" countBase="49"/>
          <node leaf="true" class="jason.asSemantics.Circumstance" methodName="hasRunningIntention" methodSignature="()Z" timeDelta="-7" timeBase="74" countDelta="0" countBase="51"/>
          <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="canSleep" methodSignature="()Z" timeDelta="-7" timeBase="52" countDelta="0" countBase="49">
            <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="-2" timeBase="19" countDelta="0" countBase="49"/>
            <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="isRunning" methodSignature="()Z" timeDelta="-3" timeBase="14" countDelta="0" countBase="49"/>
          </node>
          <node leaf="false" class="jason.asSemantics.Circumstance" methodName="hasFeedbackAction" methodSignature="()Z" timeDelta="-9" timeBase="318" countDelta="0" countBase="50">
            <node leaf="true" class="jason.asSemantics.ActionExec" methodName="getIntention" methodSignature="()Ljason/asSemantics/Intention;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
            <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="5" countDelta="0" countBase="1"/>
            <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="-6" timeBase="47" countDelta="0" countBase="50"/>
            <node leaf="true" class="java.util.Queue" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-10" timeBase="244" countDelta="0" countBase="1"/>
          </node>
        </node>
        <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="act" methodSignature="()V" timeDelta="-29" timeBase="1373" countDelta="0" countBase="2">
          <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applySemanticRuleAct" methodSignature="()V" timeDelta="14" timeBase="345" countDelta="0" countBase="6">
            <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applyExecInt" methodSignature="()V" timeDelta="12" timeBase="213" countDelta="0" countBase="1">
              <node leaf="false" class="jason.asSemantics.Intention" methodName="isFinished" methodSignature="()Z" timeDelta="11" timeBase="4" countDelta="0" countBase="1">
                <node leaf="true" class="java.util.Deque" methodName="isEmpty" methodSignature="()Z" timeDelta="13" timeBase="2" countDelta="0" countBase="1"/>
              </node>
              <node leaf="true" class="jason.asSemantics.IntendedMeans" methodName="getCurrentStep" methodSignature="()Ljason/asSyntax/PlanBody;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
              <node leaf="true" class="jason.asSemantics.IntendedMeans" methodName="isFinished" methodSignature="()Z" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isPlanBody" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
              <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="capply" methodSignature="(Ljason/asSemantics/Unifier;)Ljason/asSyntax/Term;" timeDelta="1" timeBase="13" countDelta="0" countBase="1"/>
              <node leaf="false" class="jason.asSemantics.Intention" methodName="peek" methodSignature="()Ljason/asSemantics/IntendedMeans;" timeDelta="-10" timeBase="16" countDelta="0" countBase="1">
                <node leaf="true" class="java.util.Deque" methodName="peek" methodSignature="()Ljava/lang/Object;" timeDelta="-10" timeBase="16" countDelta="0" countBase="1"/>
              </node>
            </node>
            <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applyProcAct" methodSignature="()V" timeDelta="2" timeBase="104" countDelta="0" countBase="2">
              <node leaf="false" class="jason.asSemantics.Circumstance" methodName="hasFeedbackAction" methodSignature="()Z" timeDelta="1" timeBase="5" countDelta="0" countBase="2">
                <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
                <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
              </node>
              <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applyClrInt" methodSignature="(Ljason/asSemantics/Intention;)V" timeDelta="1" timeBase="40" countDelta="0" countBase="1">
                <node leaf="true" class="jason.asSemantics.Intention" methodName="isFinished" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="3"/>
                <node leaf="true" class="jason.asSemantics.Intention" methodName="pop" methodSignature="()Ljason/asSemantics/IntendedMeans;" timeDelta="1" timeBase="7" countDelta="0" countBase="1"/>
                <node leaf="true" class="jason.asSyntax.Trigger" methodName="isGoal" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
                <node leaf="true" class="jason.asSemantics.IntendedMeans" methodName="getTrigger" methodSignature="()Ljason/asSyntax/Trigger;" timeDelta="-1" timeBase="1" countDelta="-3" countBase="3"/>
                <node leaf="true" class="jason.asSyntax.Trigger" methodName="isAddition" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
              </node>
              <node leaf="false" class="jason.asSemantics.Agent" methodName="selectAction" methodSignature="(Ljava/util/Queue;)Ljason/asSemantics/ActionExec;" timeDelta="-1" timeBase="6" countDelta="0" countBase="1">
                <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="1"/>
              </node>
              <node leaf="false" class="jason.asSemantics.Circumstance" methodName="removePendingAction" methodSignature="(I)Ljason/asSemantics/ActionExec;" timeDelta="-1" timeBase="10" countDelta="0" countBase="1">
                <node leaf="true" class="java.util.Map" methodName="remove" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-1" timeBase="8" countDelta="0" countBase="1"/>
              </node>
              <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="removeActionReQueue" methodSignature="(Ljason/asSemantics/Intention;)V" timeDelta="-2" timeBase="23" countDelta="0" countBase="1">
                <node leaf="false" class="jason.asSemantics.IntendedMeans" methodName="removeCurrentStep" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="9" countDelta="0" countBase="1">
                  <node leaf="true" class="jason.asSyntax.PlanBodyImpl" methodName="getBodyTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
                </node>
              </node>
            </node>
            <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applySelInt" methodSignature="()V" timeDelta="-1" timeBase="15" countDelta="0" countBase="2">
              <node leaf="true" class="jason.asSemantics.Circumstance" methodName="hasRunningIntention" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="2"/>
            </node>
          </node>
          <node leaf="false" class="jason.asSemantics.Circumstance" methodName="addPendingAction" methodSignature="(Ljason/asSemantics/ActionExec;)V" timeDelta="3" timeBase="25" countDelta="0" countBase="1">
            <node leaf="true" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="2" timeBase="7" countDelta="0" countBase="1"/>
            <node leaf="true" class="jason.asSemantics.Intention" methodName="getId" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
            <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="1" timeBase="4" countDelta="0" countBase="1"/>
            <node leaf="true" class="jason.asSemantics.Intention" methodName="isAtomic" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-1" countBase="1"/>
          </node>
          <node leaf="true" class="jason.asSemantics.Circumstance" methodName="resetAct" methodSignature="()V" timeDelta="1" timeBase="0" countDelta="2" countBase="0"/>
          <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="isRunning" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="4"/>
          <node leaf="true" class="jason.asSemantics.TransitionSystem" methodName="getAgArch" methodSignature="()Ljason/architecture/AgArch;" timeDelta="-1" timeBase="3" countDelta="0" countBase="5"/>
          <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="act" methodSignature="(Ljason/asSemantics/ActionExec;)V" timeDelta="-45" timeBase="980" countDelta="0" countBase="1">
            <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="isRunning" methodSignature="()Z" timeDelta="1" timeBase="0" countDelta="1" countBase="0"/>
            <node leaf="false" class="jason.infra.centralised.CentralisedEnvironment" methodName="act" methodSignature="(Ljava/lang/String;Ljason/asSemantics/ActionExec;)V" timeDelta="-46" timeBase="975" countDelta="0" countBase="1">
              <node leaf="false" class="jason.environment.Environment" methodName="scheduleAction" methodSignature="(Ljava/lang/String;Ljason/asSyntax/Structure;Ljava/lang/Object;)V" timeDelta="-47" timeBase="970" countDelta="0" countBase="1">
                <node leaf="true" class="jason.environment.Environment$1" methodName="&lt;init&gt;" methodSignature="(Ljason/environment/Environment;Ljava/lang/String;Ljason/asSyntax/Structure;Ljava/lang/Object;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="1"/>
                <node leaf="true" class="java.util.concurrent.ExecutorService" methodName="execute" methodSignature="(Ljava/lang/Runnable;)V" timeDelta="-61" timeBase="455" countDelta="0" countBase="1"/>
              </node>
            </node>
          </node>
        </node>
      </node>
      <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="sense" methodSignature="()V" timeDelta="-2985" timeBase="177383" countDelta="0" countBase="51">
        <node leaf="true" class="jason.architecture.AgArch" methodName="getTS" methodSignature="()Ljason/asSemantics/TransitionSystem;" timeDelta="8" timeBase="29" countDelta="0" countBase="51"/>
        <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="sense" methodSignature="()V" timeDelta="-3003" timeBase="177219" countDelta="0" countBase="51">
          <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applySemanticRuleSense" methodSignature="()V" timeDelta="2086" timeBase="1244" countDelta="0" countBase="51">
            <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="applyProcMsg" methodSignature="()V" timeDelta="6" timeBase="165" countDelta="0" countBase="51">
              <node leaf="false" class="jason.asSemantics.Circumstance" methodName="hasMsg" methodSignature="()Z" timeDelta="1" timeBase="100" countDelta="0" countBase="51">
                <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="5" timeBase="72" countDelta="0" countBase="51"/>
              </node>
            </node>
            <node leaf="true" class="jason.asSemantics.TransitionSystem$3" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-9" timeBase="64" countDelta="0" countBase="1"/>
          </node>
          <node leaf="false" class="jason.asSemantics.Agent" methodName="buf" methodSignature="(Ljava/util/Collection;)I" timeDelta="336" timeBase="9097" countDelta="0" countBase="51">
            <node leaf="false" class="java.util.Set" methodName="remove" methodSignature="(Ljava/lang/Object;)Z" timeDelta="516" timeBase="4815" countDelta="0" countBase="250">
              <node leaf="false" class="jason.bb.StructureWrapperForLiteral" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="538" timeBase="4310" countDelta="0" countBase="245">
                <node leaf="false" class="jason.asSyntax.Pred" methodName="equalsAsStructure" methodSignature="(Ljava/lang/Object;)Z" timeDelta="526" timeBase="4174" countDelta="0" countBase="245">
                  <node leaf="false" class="jason.asSyntax.Structure" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="462" timeBase="4051" countDelta="0" countBase="245">
                    <node leaf="false" class="jason.asSyntax.ArithFunctionTerm" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="115" timeBase="1082" countDelta="0" countBase="147">
                      <node leaf="false" class="jason.asSyntax.Structure" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="118" timeBase="1016" countDelta="0" countBase="147">
                        <node leaf="false" class="jason.asSyntax.NumberTermImpl" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="34" timeBase="203" countDelta="0" countBase="147">
                          <node leaf="true" class="jason.asSyntax.NumberTermImpl" methodName="isNumeric" methodSignature="()Z" timeDelta="11" timeBase="21" countDelta="0" countBase="147"/>
                          <node leaf="true" class="jason.asSyntax.NumberTermImpl" methodName="solve" methodSignature="()D" timeDelta="7" timeBase="33" countDelta="0" countBase="294"/>
                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isArithExpr" methodSignature="()Z" timeDelta="-3" timeBase="21" countDelta="0" countBase="147"/>
                        </node>
                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="21" timeBase="49" countDelta="0" countBase="147"/>
                        <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="16" timeBase="12" countDelta="0" countBase="147"/>
                        <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="16" timeBase="105" countDelta="0" countBase="294">
                          <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="20" timeBase="31" countDelta="0" countBase="294"/>
                        </node>
                        <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="4" timeBase="26" countDelta="0" countBase="147"/>
                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="32" countDelta="0" countBase="294"/>
                        <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-3" timeBase="35" countDelta="0" countBase="294"/>
                      </node>
                    </node>
                    <node leaf="true" class="java.lang.String" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="21" timeBase="112" countDelta="0" countBase="245"/>
                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="16" timeBase="62" countDelta="0" countBase="245"/>
                    <node leaf="false" class="jason.asSyntax.NumberTermImpl" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="14" timeBase="624" countDelta="0" countBase="343">
                      <node leaf="true" class="jason.asSyntax.NumberTermImpl" methodName="solve" methodSignature="()D" timeDelta="21" timeBase="77" countDelta="0" countBase="686"/>
                      <node leaf="true" class="jason.asSyntax.NumberTermImpl" methodName="isNumeric" methodSignature="()Z" timeDelta="4" timeBase="50" countDelta="0" countBase="343"/>
                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isArithExpr" methodSignature="()Z" timeDelta="-10" timeBase="54" countDelta="0" countBase="343"/>
                    </node>
                    <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="8" timeBase="38" countDelta="0" countBase="245"/>
                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="3" timeBase="44" countDelta="0" countBase="490"/>
                    <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-2" timeBase="184" countDelta="0" countBase="490">
                      <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-5" timeBase="53" countDelta="0" countBase="490"/>
                    </node>
                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-7" timeBase="46" countDelta="0" countBase="490"/>
                    <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-34" timeBase="369" countDelta="0" countBase="980">
                      <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-11" timeBase="105" countDelta="0" countBase="980"/>
                    </node>
                  </node>
                </node>
              </node>
              <node leaf="false" class="jason.bb.StructureWrapperForLiteral" methodName="hashCode" methodSignature="()I" timeDelta="-21" timeBase="178" countDelta="0" countBase="250">
                <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-12" timeBase="102" countDelta="0" countBase="250">
                  <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-10" timeBase="49" countDelta="0" countBase="250"/>
                </node>
              </node>
            </node>
            <node leaf="false" class="java.util.Iterator" methodName="remove" methodSignature="()V" timeDelta="36" timeBase="249" countDelta="0" countBase="5">
              <node leaf="false" class="jason.bb.DefaultBeliefBase$1" methodName="remove" methodSignature="()V" timeDelta="36" timeBase="236" countDelta="0" countBase="5">
                <node leaf="false" class="jason.asSyntax.Pred" methodName="delAnnot" methodSignature="(Ljason/asSyntax/Term;)Z" timeDelta="18" timeBase="46" countDelta="0" countBase="5">
                  <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="remove" methodSignature="(Ljava/lang/Object;)Z" timeDelta="18" timeBase="36" countDelta="0" countBase="5">
                    <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="setValuesFrom" methodSignature="(Ljason/asSyntax/ListTerm;)V" timeDelta="1" timeBase="10" countDelta="0" countBase="5">
                      <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="2" timeBase="1" countDelta="0" countBase="5"/>
                      <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getNext" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                    </node>
                    <node leaf="true" class="jason.asSyntax.Pred" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="1" timeBase="2" countDelta="0" countBase="5"/>
                  </node>
                </node>
                <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="removeFromEntry" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="16" timeBase="147" countDelta="0" countBase="5">
                  <node leaf="false" class="jason.asSyntax.Pred" methodName="hasSource" methodSignature="()Z" timeDelta="6" timeBase="22" countDelta="0" countBase="5">
                    <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="6" timeBase="9" countDelta="0" countBase="5">
                      <node leaf="false" class="jason.asSyntax.ListTermImpl$3" methodName="hasNext" methodSignature="()Z" timeDelta="3" timeBase="8" countDelta="0" countBase="5">
                        <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-1" timeBase="2" countDelta="0" countBase="5"/>
                      </node>
                    </node>
                    <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="2" timeBase="6" countDelta="0" countBase="5">
                      <node leaf="true" class="jason.asSyntax.ListTermImpl$3" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/ListTermImpl;Ljason/asSyntax/ListTerm;)V" timeDelta="1" timeBase="4" countDelta="0" countBase="5"/>
                    </node>
                  </node>
                  <node leaf="true" class="jason.bb.DefaultBeliefBase$BelEntry" methodName="isEmpty" methodSignature="()Z" timeDelta="2" timeBase="9" countDelta="0" countBase="5"/>
                  <node leaf="false" class="java.util.Map" methodName="remove" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="2" timeBase="7" countDelta="0" countBase="5">
                    <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                  </node>
                  <node leaf="false" class="jason.bb.DefaultBeliefBase$BelEntry" methodName="remove" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="84" countDelta="0" countBase="5">
                    <node leaf="false" class="java.util.Deque" methodName="remove" methodSignature="(Ljava/lang/Object;)Z" timeDelta="6" timeBase="26" countDelta="0" countBase="5">
                      <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="3" countDelta="0" countBase="5"/>
                    </node>
                    <node leaf="false" class="java.util.Map" methodName="remove" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="5" timeBase="40" countDelta="0" countBase="5">
                      <node leaf="false" class="jason.bb.StructureWrapperForLiteral" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="4" timeBase="11" countDelta="0" countBase="5">
                        <node leaf="false" class="jason.asSyntax.Pred" methodName="equalsAsStructure" methodSignature="(Ljava/lang/Object;)Z" timeDelta="4" timeBase="9" countDelta="0" countBase="5">
                          <node leaf="true" class="jason.asSyntax.Structure" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="3" timeBase="6" countDelta="0" countBase="5"/>
                        </node>
                      </node>
                      <node leaf="false" class="jason.bb.StructureWrapperForLiteral" methodName="hashCode" methodSignature="()I" timeDelta="-2" timeBase="4" countDelta="0" countBase="5">
                        <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-3" timeBase="4" countDelta="0" countBase="5">
                          <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="5"/>
                        </node>
                      </node>
                    </node>
                    <node leaf="true" class="jason.bb.StructureWrapperForLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-12" timeBase="13" countDelta="0" countBase="5"/>
                  </node>
                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                  <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-1" timeBase="2" countDelta="0" countBase="5"/>
                </node>
                <node leaf="false" class="java.util.Iterator" methodName="remove" methodSignature="()V" timeDelta="-2" timeBase="16" countDelta="0" countBase="5">
                  <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="3" countDelta="0" countBase="5"/>
                </node>
              </node>
            </node>
            <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="hasCandidatePlan" methodSignature="(Ljason/asSyntax/Trigger;)Z" timeDelta="22" timeBase="56" countDelta="0" countBase="5">
              <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="getCandidatePlans" methodSignature="(Ljason/asSyntax/Trigger;)Ljava/util/List;" timeDelta="23" timeBase="53" countDelta="0" countBase="5">
                <node leaf="false" class="jason.asSyntax.Trigger" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="15" timeBase="37" countDelta="0" countBase="5">
                  <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="8" timeBase="1" countDelta="0" countBase="5"/>
                  <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="3" timeBase="1" countDelta="0" countBase="5"/>
                  <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="3" timeBase="4" countDelta="0" countBase="10"/>
                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                  <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="1" timeBase="8" countDelta="0" countBase="5">
                    <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="3" timeBase="4" countDelta="0" countBase="5">
                      <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="0" countDelta="5" countBase="0"/>
                      <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="5">
                        <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                      </node>
                    </node>
                  </node>
                  <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/Object;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="5" countDelta="0" countBase="5"/>
                </node>
                <node leaf="true" class="jason.asSyntax.Trigger" methodName="getLiteral" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="2" timeBase="0" countDelta="5" countBase="0"/>
                <node leaf="true" class="java.util.List" methodName="isEmpty" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="5"/>
                <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="2" countDelta="0" countBase="5">
                  <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                </node>
                <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-2" timeBase="2" countDelta="-5" countBase="5"/>
              </node>
            </node>
            <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="17" timeBase="425" countDelta="0" countBase="658">
              <node leaf="false" class="jason.bb.DefaultBeliefBase$1" methodName="hasNext" methodSignature="()Z" timeDelta="-7" timeBase="201" countDelta="0" countBase="301">
                <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-15" timeBase="114" countDelta="0" countBase="301"/>
              </node>
            </node>
            <node leaf="true" class="jason.asSyntax.Literal" methodName="subjectToBUF" methodSignature="()Z" timeDelta="15" timeBase="23" countDelta="0" countBase="250"/>
            <node leaf="false" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="9" timeBase="476" countDelta="0" countBase="505">
              <node leaf="false" class="jason.bb.DefaultBeliefBase$1" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="10" timeBase="302" countDelta="0" countBase="250">
                <node leaf="false" class="jason.bb.DefaultBeliefBase$1" methodName="next" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="224" countDelta="0" countBase="250">
                  <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-21" timeBase="112" countDelta="0" countBase="250"/>
                </node>
              </node>
            </node>
            <node leaf="true" class="jason.asSemantics.Agent" methodName="getBB" methodSignature="()Ljason/bb/BeliefBase;" timeDelta="6" timeBase="8" countDelta="0" countBase="56"/>
            <node leaf="false" class="jason.asSyntax.Trigger" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Trigger$TEOperator;Ljason/asSyntax/Trigger$TEType;Ljason/asSyntax/Literal;)V" timeDelta="4" timeBase="36" countDelta="0" countBase="10">
              <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="2" timeBase="14" countDelta="0" countBase="10">
                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-2" timeBase="10" countDelta="0" countBase="10">
                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-2" timeBase="8" countDelta="0" countBase="10">
                    <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="4" countDelta="0" countBase="10"/>
                  </node>
                </node>
              </node>
              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="-3" timeBase="4" countDelta="0" countBase="10"/>
              <node leaf="true" class="jason.asSyntax.Trigger" methodName="setTrigOp" methodSignature="(Ljason/asSyntax/Trigger$TEOperator;)V" timeDelta="-3" timeBase="4" countDelta="0" countBase="10"/>
            </node>
            <node leaf="false" class="jason.asSyntax.Literal" methodName="forceFullLiteralImpl" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="1" timeBase="12" countDelta="0" countBase="5">
              <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="isAtom" methodSignature="()Z" timeDelta="3" timeBase="9" countDelta="0" countBase="5">
                <node leaf="false" class="jason.asSyntax.Pred" methodName="isAtom" methodSignature="()Z" timeDelta="3" timeBase="7" countDelta="0" countBase="5">
                  <node leaf="false" class="jason.asSyntax.Structure" methodName="isAtom" methodSignature="()Z" timeDelta="1" timeBase="5" countDelta="0" countBase="5">
                    <node leaf="false" class="jason.asSyntax.Structure" methodName="hasTerm" methodSignature="()Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="5">
                      <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="5"/>
                    </node>
                  </node>
                </node>
              </node>
            </node>
            <node leaf="false" class="jason.asSemantics.Circumstance" methodName="hasListener" methodSignature="()Z" timeDelta="-1" timeBase="6" countDelta="0" countBase="5">
              <node leaf="true" class="java.util.Queue" methodName="isEmpty" methodSignature="()Z" timeDelta="2" timeBase="2" countDelta="0" countBase="5"/>
            </node>
            <node leaf="true" class="jason.bb.StructureWrapperForLiteral" methodName="getLiteral" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
            <node leaf="true" class="java.util.Collection" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-1" timeBase="35" countDelta="0" countBase="51"/>
            <node leaf="true" class="jason.asSemantics.Event" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Trigger;Ljason/asSemantics/Intention;)V" timeDelta="-2" timeBase="4" countDelta="0" countBase="5"/>
            <node leaf="false" class="jason.asSyntax.Pred" methodName="addAnnot" methodSignature="(Ljason/asSyntax/Term;)Z" timeDelta="-3" timeBase="51" countDelta="0" countBase="5">
              <node leaf="false" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="1" timeBase="8" countDelta="0" countBase="5">
                <node leaf="false" class="jason.asSyntax.ListTermImpl$2" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-1" timeBase="6" countDelta="0" countBase="5">
                  <node leaf="false" class="jason.asSyntax.ListTermImpl$2" methodName="next" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-2" timeBase="6" countDelta="0" countBase="5">
                    <node leaf="false" class="jason.asSyntax.ListTermImpl$ListTermIterator" methodName="moveNext" methodSignature="()V" timeDelta="1" timeBase="3" countDelta="0" countBase="5">
                      <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getNext" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="1" timeBase="1" countDelta="0" countBase="5"/>
                    </node>
                  </node>
                </node>
              </node>
              <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljava/lang/Object;)I" timeDelta="-1" timeBase="3" countDelta="0" countBase="5">
                <node leaf="true" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljason/asSyntax/Term;)I" timeDelta="-2" timeBase="2" countDelta="-5" countBase="5"/>
              </node>
              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="10" countDelta="0" countBase="5">
                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-2" timeBase="7" countDelta="0" countBase="5">
                  <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="5">
                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="1" timeBase="4" countDelta="0" countBase="5">
                      <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="2" countDelta="0" countBase="5">
                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                      </node>
                    </node>
                  </node>
                </node>
              </node>
              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="insert" methodSignature="(Ljason/asSyntax/Term;)Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="10" countDelta="0" countBase="5">
                <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Term;Ljason/asSyntax/Term;)V" timeDelta="-1" timeBase="8" countDelta="0" countBase="5">
                  <node leaf="true" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-1" timeBase="6" countDelta="0" countBase="5"/>
                </node>
              </node>
              <node leaf="false" class="jason.asSyntax.ListTermImpl" methodName="listTermIterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-1" timeBase="6" countDelta="0" countBase="5">
                <node leaf="true" class="jason.asSyntax.ListTermImpl$2" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/ListTermImpl;Ljason/asSyntax/ListTerm;)V" timeDelta="-1" timeBase="4" countDelta="0" countBase="5"/>
              </node>
              <node leaf="false" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="4" countDelta="0" countBase="5">
                <node leaf="true" class="jason.asSyntax.ListTermImpl$ListTermIterator" methodName="hasNext" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
              </node>
            </node>
            <node leaf="true" class="java.util.Set" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-3" timeBase="34" countDelta="0" countBase="51"/>
            <node leaf="false" class="jason.asSyntax.Literal" methodName="copy" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-4" timeBase="70" countDelta="0" countBase="5">
              <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-5" timeBase="68" countDelta="0" countBase="5">
                <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="65" countDelta="0" countBase="5">
                  <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-5" timeBase="61" countDelta="0" countBase="5">
                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                    <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-3" timeBase="55" countDelta="0" countBase="5">
                      <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-4" timeBase="52" countDelta="0" countBase="5">
                        <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="5" timeBase="2" countDelta="0" countBase="10">
                          <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="2" timeBase="0" countDelta="10" countBase="0"/>
                        </node>
                        <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="1" timeBase="3" countDelta="0" countBase="5"/>
                        <node leaf="true" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="5"/>
                        <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-2" timeBase="6" countDelta="0" countBase="5">
                          <node leaf="true" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="2" countDelta="0" countBase="5"/>
                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                        </node>
                        <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-3" timeBase="4" countDelta="0" countBase="10"/>
                        <node leaf="false" class="jason.asSyntax.NumberTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-4" timeBase="6" countDelta="0" countBase="7">
                          <node leaf="true" class="jason.asSyntax.NumberTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/NumberTerm;" timeDelta="-4" timeBase="4" countDelta="-7" countBase="7"/>
                        </node>
                      </node>
                    </node>
                  </node>
                </node>
              </node>
            </node>
            <node leaf="false" class="jason.asSemantics.TransitionSystem" methodName="updateEvents" methodSignature="(Ljason/asSemantics/Event;)V" timeDelta="-5" timeBase="71" countDelta="0" countBase="5">
              <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="hasCandidatePlan" methodSignature="(Ljason/asSyntax/Trigger;)Z" timeDelta="-4" timeBase="56" countDelta="0" countBase="5">
                <node leaf="false" class="jason.asSyntax.PlanLibrary" methodName="getCandidatePlans" methodSignature="(Ljason/asSyntax/Trigger;)Ljava/util/List;" timeDelta="-3" timeBase="52" countDelta="0" countBase="5">
                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                  <node leaf="true" class="jason.asSyntax.Trigger" methodName="getLiteral" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                  <node leaf="false" class="jason.asSyntax.Trigger" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-1" timeBase="35" countDelta="0" countBase="5">
                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                    <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="1" timeBase="8" countDelta="0" countBase="5">
                      <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="1" timeBase="5" countDelta="0" countBase="5">
                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="3" timeBase="0" countDelta="5" countBase="0"/>
                        <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="5"/>
                      </node>
                    </node>
                    <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="1" timeBase="1" countDelta="0" countBase="5">
                      <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                    </node>
                    <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                    <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/Object;)Ljava/lang/StringBuilder;" timeDelta="-1" timeBase="6" countDelta="0" countBase="5"/>
                    <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-2" timeBase="2" countDelta="-5" countBase="5"/>
                  </node>
                  <node leaf="true" class="java.util.List" methodName="isEmpty" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="5"/>
                </node>
              </node>
            </node>
            <node leaf="true" class="java.util.HashSet" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-5" timeBase="142" countDelta="0" countBase="51"/>
            <node leaf="false" class="java.util.Set" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-10" timeBase="344" countDelta="0" countBase="250">
              <node leaf="false" class="jason.bb.StructureWrapperForLiteral" methodName="hashCode" methodSignature="()I" timeDelta="10" timeBase="163" countDelta="0" countBase="250">
                <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-4" timeBase="86" countDelta="0" countBase="250">
                  <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="8" timeBase="26" countDelta="0" countBase="250"/>
                </node>
              </node>
            </node>
            <node leaf="true" class="jason.bb.StructureWrapperForLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-21" timeBase="161" countDelta="0" countBase="500"/>
            <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="add" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="-38" timeBase="371" countDelta="0" countBase="5">
              <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="add" methodSignature="(Ljason/asSyntax/Literal;Z)Z" timeDelta="-37" timeBase="369" countDelta="0" countBase="5">
                <node leaf="false" class="jason.asSyntax.Literal" methodName="copy" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="3" timeBase="95" countDelta="0" countBase="5">
                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="3" timeBase="95" countDelta="0" countBase="5">
                    <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="2" timeBase="93" countDelta="0" countBase="5">
                      <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="2" timeBase="1" countDelta="0" countBase="5"/>
                    </node>
                  </node>
                </node>
                <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="canBeAddedInBB" methodSignature="()Z" timeDelta="1" timeBase="1" countDelta="0" countBase="5"/>
                <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="contains" methodSignature="(Ljason/asSyntax/Literal;)Ljason/asSyntax/Literal;" timeDelta="1" timeBase="23" countDelta="0" countBase="5">
                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="1" timeBase="16" countDelta="0" countBase="5">
                    <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="3" timeBase="8" countDelta="0" countBase="5">
                      <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="2" timeBase="5" countDelta="0" countBase="5">
                        <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                      </node>
                    </node>
                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="1" countDelta="0" countBase="5"/>
                    <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-3" timeBase="4" countDelta="0" countBase="5">
                      <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-2" timeBase="3" countDelta="0" countBase="5"/>
                    </node>
                  </node>
                </node>
                <node leaf="false" class="jason.bb.DefaultBeliefBase$BelEntry" methodName="add" methodSignature="(Ljason/asSyntax/Literal;Z)V" timeDelta="-2" timeBase="27" countDelta="0" countBase="5">
                  <node leaf="true" class="jason.bb.StructureWrapperForLiteral" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                  <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="1" timeBase="10" countDelta="0" countBase="5">
                    <node leaf="true" class="jason.bb.StructureWrapperForLiteral" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="3" countDelta="0" countBase="5"/>
                  </node>
                  <node leaf="true" class="java.util.Deque" methodName="addFirst" methodSignature="(Ljava/lang/Object;)V" timeDelta="-1" timeBase="12" countDelta="0" countBase="5"/>
                </node>
                <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="provideBelEntry" methodSignature="(Ljason/asSyntax/Literal;)Ljason/bb/DefaultBeliefBase$BelEntry;" timeDelta="-9" timeBase="53" countDelta="0" countBase="5">
                  <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="3" timeBase="1" countDelta="0" countBase="5">
                    <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                  </node>
                  <node leaf="false" class="java.util.Map" methodName="put" methodSignature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-2" timeBase="8" countDelta="0" countBase="5">
                    <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="4" timeBase="0" countDelta="5" countBase="0"/>
                  </node>
                  <node leaf="false" class="jason.bb.DefaultBeliefBase$BelEntry" methodName="&lt;init&gt;" methodSignature="(Ljason/bb/DefaultBeliefBase;)V" timeDelta="-3" timeBase="15" countDelta="0" countBase="5">
                    <node leaf="true" class="java.util.concurrent.LinkedBlockingDeque" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-1" timeBase="8" countDelta="0" countBase="5"/>
                    <node leaf="true" class="java.util.concurrent.ConcurrentHashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-2" timeBase="3" countDelta="0" countBase="5"/>
                  </node>
                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-4" timeBase="5" countDelta="0" countBase="5"/>
                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="-4" timeBase="17" countDelta="0" countBase="10">
                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="0" countDelta="5" countBase="0"/>
                    <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                    <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="2" countDelta="0" countBase="5">
                      <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                    </node>
                  </node>
                </node>
                <node leaf="false" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="(Ljason/asSyntax/Term;)Z" timeDelta="-29" timeBase="145" countDelta="0" countBase="5">
                  <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getTerm" methodSignature="()Ljason/asSyntax/Term;" timeDelta="2" timeBase="1" countDelta="0" countBase="10"/>
                  <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-2" timeBase="3" countDelta="0" countBase="5"/>
                  <node leaf="false" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-7" timeBase="13" countDelta="0" countBase="5">
                    <node leaf="false" class="jason.asSyntax.ListTermImpl$2" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="-2" timeBase="7" countDelta="0" countBase="5">
                      <node leaf="false" class="jason.asSyntax.ListTermImpl$2" methodName="next" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="6" countDelta="0" countBase="5">
                        <node leaf="false" class="jason.asSyntax.ListTermImpl$ListTermIterator" methodName="moveNext" methodSignature="()V" timeDelta="2" timeBase="3" countDelta="0" countBase="5">
                          <node leaf="true" class="jason.asSyntax.ListTermImpl" methodName="getNext" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="2" timeBase="2" countDelta="0" countBase="5"/>
                        </node>
                      </node>
                    </node>
                  </node>
                  <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljava/lang/Object;)I" timeDelta="-22" timeBase="100" countDelta="0" countBase="5">
                    <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljason/asSyntax/Term;)I" timeDelta="-20" timeBase="98" countDelta="0" countBase="5">
                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="0" countDelta="10" countBase="0"/>
                      <node leaf="true" class="jason.asSyntax.Literal" methodName="negated" methodSignature="()Z" timeDelta="1" timeBase="2" countDelta="0" countBase="15"/>
                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="1" countDelta="-10" countBase="10"/>
                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="-1" timeBase="2" countDelta="0" countBase="5"/>
                      <node leaf="true" class="java.lang.String" methodName="compareTo" methodSignature="(Ljava/lang/String;)I" timeDelta="-1" timeBase="3" countDelta="0" countBase="5"/>
                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isNumeric" methodSignature="()Z" timeDelta="-3" timeBase="5" countDelta="0" countBase="5"/>
                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-5" timeBase="7" countDelta="0" countBase="10">
                        <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-3" timeBase="3" countDelta="-10" countBase="10"/>
                      </node>
                      <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljava/lang/Object;)I" timeDelta="-9" timeBase="44" countDelta="0" countBase="5">
                        <node leaf="false" class="jason.asSyntax.Atom" methodName="compareTo" methodSignature="(Ljason/asSyntax/Term;)I" timeDelta="-8" timeBase="42" countDelta="0" countBase="5">
                          <node leaf="true" class="jason.asSyntax.Literal" methodName="negated" methodSignature="()Z" timeDelta="3" timeBase="0" countDelta="15" countBase="0"/>
                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isList" methodSignature="()Z" timeDelta="2" timeBase="2" countDelta="0" countBase="15"/>
                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isVar" methodSignature="()Z" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                          <node leaf="true" class="jason.asSyntax.Literal" methodName="getAnnots" methodSignature="()Ljason/asSyntax/ListTerm;" timeDelta="-1" timeBase="3" countDelta="0" countBase="10"/>
                          <node leaf="true" class="jason.asSyntax.Literal$DefaultNameSpace" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-1" timeBase="1" countDelta="-5" countBase="5"/>
                        </node>
                      </node>
                    </node>
                  </node>
                </node>
              </node>
            </node>
            <node leaf="false" class="jason.bb.DefaultBeliefBase" methodName="getPercepts" methodSignature="()Ljava/util/Iterator;" timeDelta="-135" timeBase="974" countDelta="0" countBase="51">
              <node leaf="true" class="jason.bb.DefaultBeliefBase$1" methodName="&lt;init&gt;" methodSignature="(Ljason/bb/DefaultBeliefBase;Ljava/util/Iterator;)V" timeDelta="10" timeBase="43" countDelta="0" countBase="51"/>
              <node leaf="true" class="java.util.Set" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="-11" timeBase="106" countDelta="0" countBase="51"/>
            </node>
          </node>
          <node leaf="true" class="jason.asSemantics.Circumstance" methodName="resetSense" methodSignature="()V" timeDelta="3" timeBase="13" countDelta="0" countBase="51"/>
          <node leaf="true" class="jason.asSyntax.PlanLibrary" methodName="hasJagPlans" methodSignature="()Z" timeDelta="2" timeBase="12" countDelta="0" countBase="51"/>
          <node leaf="true" class="java.util.logging.Logger" methodName="isLoggable" methodSignature="(Ljava/util/logging/Level;)Z" timeDelta="-1" timeBase="108" countDelta="0" countBase="51"/>
          <node leaf="true" class="jason.runtime.Settings" methodName="nrcbp" methodSignature="()I" timeDelta="-2" timeBase="15" countDelta="0" countBase="51"/>
          <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="checkMail" methodSignature="()V" timeDelta="-7" timeBase="236" countDelta="0" countBase="51">
            <node leaf="true" class="jason.architecture.AgArch" methodName="getTS" methodSignature="()Ljason/asSemantics/TransitionSystem;" timeDelta="3" timeBase="26" countDelta="0" countBase="51"/>
            <node leaf="true" class="java.util.Queue" methodName="poll" methodSignature="()Ljava/lang/Object;" timeDelta="-6" timeBase="111" countDelta="0" countBase="51"/>
          </node>
          <node leaf="true" class="jason.asSemantics.TransitionSystem" methodName="getAgArch" methodSignature="()Ljason/architecture/AgArch;" timeDelta="-20" timeBase="136" countDelta="0" countBase="102"/>
          <node leaf="false" class="jason.infra.centralised.CentralisedAgArch" methodName="perceive" methodSignature="()Ljava/util/Collection;" timeDelta="-5354" timeBase="165706" countDelta="0" countBase="51">
            <node leaf="true" class="jason.architecture.AgArch" methodName="perceive" methodSignature="()Ljava/util/Collection;" timeDelta="12" timeBase="32" countDelta="0" countBase="51"/>
            <node leaf="true" class="jason.infra.centralised.CentralisedAgArch" methodName="getAgName" methodSignature="()Ljava/lang/String;" timeDelta="6" timeBase="14" countDelta="0" countBase="51"/>
            <node leaf="true" class="java.util.logging.Logger" methodName="isLoggable" methodSignature="(Ljava/util/logging/Level;)Z" timeDelta="4" timeBase="30" countDelta="0" countBase="51"/>
            <node leaf="true" class="jason.infra.centralised.CentralisedEnvironment" methodName="getUserEnvironment" methodSignature="()Ljason/environment/Environment;" timeDelta="-21" timeBase="34" countDelta="0" countBase="51"/>
            <node leaf="false" class="DebugEnvironment" methodName="getPercepts" methodSignature="(Ljava/lang/String;)Ljava/util/Collection;" timeDelta="-5330" timeBase="165282" countDelta="0" countBase="51">
              <node leaf="false" class="jason.asSyntax.Literal" methodName="parseLiteral" methodSignature="(Ljava/lang/String;)Ljason/asSyntax/Literal;" timeDelta="454" timeBase="76538" countDelta="0" countBase="250">
                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="&lt;init&gt;" methodSignature="(Ljava/io/Reader;)V" timeDelta="366" timeBase="14930" countDelta="0" countBase="250">
                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/Reader;II)V" timeDelta="259" timeBase="5788" countDelta="0" countBase="250">
                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="&lt;init&gt;" methodSignature="(Ljava/io/Reader;III)V" timeDelta="251" timeBase="5654" countDelta="0" countBase="250"/>
                  </node>
                  <node leaf="false" class="jason.asSyntax.parser.as2j$LookaheadSuccess" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/parser/as2j$1;)V" timeDelta="73" timeBase="1684" countDelta="0" countBase="250">
                    <node leaf="false" class="jason.asSyntax.parser.as2j$LookaheadSuccess" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="62" timeBase="1544" countDelta="0" countBase="250">
                      <node leaf="true" class="java.lang.Error" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="74" timeBase="1358" countDelta="0" countBase="250"/>
                    </node>
                  </node>
                  <node leaf="false" class="jason.asSyntax.directives.DirectiveProcessor" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="51" timeBase="417" countDelta="0" countBase="250">
                    <node leaf="true" class="java.util.HashMap" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="4" timeBase="99" countDelta="0" countBase="250"/>
                  </node>
                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/parser/SimpleCharStream;)V" timeDelta="23" timeBase="240" countDelta="0" countBase="250"/>
                  <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="16" timeBase="67" countDelta="0" countBase="250"/>
                  <node leaf="true" class="jason.asSyntax.parser.as2j$JJCalls" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-4" timeBase="164" countDelta="0" countBase="1000"/>
                  <node leaf="false" class="jason.asSyntax.directives.DirectiveProcessor" methodName="getInstance" methodSignature="(Ljava/lang/String;)Ljason/asSyntax/directives/Directive;" timeDelta="-52" timeBase="4964" countDelta="0" countBase="250">
                    <node leaf="true" class="java.lang.Class" methodName="getConstructor" methodSignature="([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;" timeDelta="-8" timeBase="1825" countDelta="0" countBase="250"/>
                    <node leaf="true" class="jason.asSyntax.directives.NameSpace" methodName="isSingleton" methodSignature="()Z" timeDelta="-24" timeBase="67" countDelta="0" countBase="250"/>
                    <node leaf="true" class="java.lang.reflect.Constructor" methodName="newInstance" methodSignature="([Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-27" timeBase="1585" countDelta="0" countBase="250"/>
                    <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-47" timeBase="319" countDelta="0" countBase="750"/>
                  </node>
                </node>
                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="literal" methodSignature="()Ljason/asSyntax/Literal;" timeDelta="66" timeBase="60815" countDelta="0" countBase="250">
                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="pred" methodSignature="()Ljason/asSyntax/Pred;" timeDelta="174" timeBase="47665" countDelta="0" countBase="250">
                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="479" timeBase="20173" countDelta="0" countBase="500">
                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="500" timeBase="20032" countDelta="0" countBase="250">
                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="405" timeBase="16481" countDelta="0" countBase="250">
                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="291" timeBase="13724" countDelta="0" countBase="250">
                            <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="FillBuff" methodSignature="()V" timeDelta="-110" timeBase="9007" countDelta="0" countBase="250">
                              <node leaf="true" class="java.io.IOException" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="14" timeBase="1507" countDelta="0" countBase="250"/>
                              <node leaf="true" class="java.io.Reader" methodName="close" methodSignature="()V" timeDelta="9" timeBase="91" countDelta="0" countBase="250"/>
                              <node leaf="true" class="java.io.Reader" methodName="read" methodSignature="([CII)I" timeDelta="1" timeBase="179" countDelta="0" countBase="250"/>
                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-13" timeBase="85" countDelta="0" countBase="250"/>
                            </node>
                          </node>
                        </node>
                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="14" timeBase="579" countDelta="0" countBase="250">
                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="12" timeBase="29" countDelta="0" countBase="250"/>
                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="6" timeBase="66" countDelta="0" countBase="250"/>
                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-6" timeBase="39" countDelta="0" countBase="250"/>
                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-9" timeBase="37" countDelta="0" countBase="250"/>
                          <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-20" timeBase="132" countDelta="0" countBase="250">
                            <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-5" timeBase="51" countDelta="0" countBase="250"/>
                          </node>
                        </node>
                      </node>
                    </node>
                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="40" timeBase="125" countDelta="0" countBase="750"/>
                    <node leaf="false" class="jason.asSyntax.Structure" methodName="setTerms" methodSignature="(Ljava/util/List;)Ljason/asSyntax/Literal;" timeDelta="5" timeBase="164" countDelta="0" countBase="250">
                      <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="8" timeBase="32" countDelta="0" countBase="250"/>
                    </node>
                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-6" timeBase="32" countDelta="0" countBase="250"/>
                    <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-24" timeBase="126" countDelta="0" countBase="250"/>
                    <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-34" timeBase="722" countDelta="0" countBase="250">
                      <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-13" timeBase="515" countDelta="0" countBase="250">
                        <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="-8" timeBase="405" countDelta="0" countBase="250">
                          <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="8" timeBase="263" countDelta="0" countBase="250">
                            <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="6" timeBase="145" countDelta="0" countBase="250">
                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="50" countDelta="0" countBase="250"/>
                            </node>
                          </node>
                        </node>
                      </node>
                    </node>
                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="terms" methodSignature="()Ljava/util/List;" timeDelta="-280" timeBase="25135" countDelta="0" countBase="250">
                      <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="10" timeBase="102" countDelta="0" countBase="250"/>
                      <node leaf="true" class="java.util.ArrayList" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="8" timeBase="195" countDelta="0" countBase="500"/>
                      <node leaf="true" class="java.util.ArrayList" methodName="trimToSize" methodSignature="()V" timeDelta="2" timeBase="247" countDelta="0" countBase="250"/>
                      <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-2" timeBase="35" countDelta="0" countBase="250"/>
                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="term" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-275" timeBase="23980" countDelta="0" countBase="500">
                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="changeToAtom" methodSignature="(Ljava/lang/Object;)Ljason/asSyntax/Term;" timeDelta="6" timeBase="532" countDelta="0" countBase="500">
                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="isAtom" methodSignature="()Z" timeDelta="12" timeBase="45" countDelta="0" countBase="350"/>
                          <node leaf="true" class="jason.asSyntax.ArithFunctionTerm" methodName="isAtom" methodSignature="()Z" timeDelta="5" timeBase="22" countDelta="0" countBase="150"/>
                        </node>
                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-296" timeBase="23084" countDelta="0" countBase="500">
                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-251" timeBase="22827" countDelta="0" countBase="500">
                            <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="log_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="-225" timeBase="22583" countDelta="0" countBase="500">
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="rel_expr" methodSignature="()Ljava/lang/Object;" timeDelta="-19" timeBase="17053" countDelta="0" countBase="500">
                                <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr" methodSignature="()Ljava/lang/Object;" timeDelta="29" timeBase="16773" countDelta="0" countBase="500">
                                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_trm" methodSignature="()Ljava/lang/Object;" timeDelta="-1" timeBase="16544" countDelta="0" countBase="500">
                                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_factor" methodSignature="()Ljava/lang/Object;" timeDelta="9" timeBase="16292" countDelta="0" countBase="500">
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="95" timeBase="1914" countDelta="0" countBase="500">
                                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="101" timeBase="1764" countDelta="0" countBase="500">
                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="38" timeBase="873" countDelta="0" countBase="500">
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="19" timeBase="94" countDelta="0" countBase="500"/>
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-5" timeBase="59" countDelta="0" countBase="500"/>
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="-7" timeBase="62" countDelta="0" countBase="500"/>
                                            <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-12" timeBase="207" countDelta="0" countBase="500">
                                              <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-6" timeBase="78" countDelta="0" countBase="500"/>
                                            </node>
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-18" timeBase="77" countDelta="0" countBase="500"/>
                                          </node>
                                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="22" timeBase="215" countDelta="0" countBase="500">
                                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-4" timeBase="73" countDelta="0" countBase="500"/>
                                          </node>
                                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="13" timeBase="242" countDelta="0" countBase="500">
                                            <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="14" timeBase="69" countDelta="0" countBase="500"/>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="4" timeBase="66" countDelta="0" countBase="500"/>
                                        </node>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-132" timeBase="14049" countDelta="0" countBase="500">
                                        <node leaf="false" class="jason.asSyntax.ArithExpr" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/ArithExpr$ArithmeticOp;Ljason/asSyntax/NumberTerm;)V" timeDelta="48" timeBase="1454" countDelta="0" countBase="150">
                                          <node leaf="false" class="jason.asSyntax.ArithFunctionTerm" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="36" timeBase="534" countDelta="0" countBase="150">
                                            <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="37" timeBase="407" countDelta="0" countBase="150">
                                              <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="19" timeBase="177" countDelta="0" countBase="150">
                                                <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;)V" timeDelta="17" timeBase="130" countDelta="0" countBase="150">
                                                  <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="26" timeBase="71" countDelta="0" countBase="150">
                                                    <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="24" timeBase="24" countDelta="0" countBase="150"/>
                                                  </node>
                                                </node>
                                              </node>
                                              <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-7" timeBase="70" countDelta="0" countBase="150"/>
                                            </node>
                                          </node>
                                          <node leaf="false" class="jason.asSyntax.Structure" methodName="addTerm" methodSignature="(Ljason/asSyntax/Term;)V" timeDelta="12" timeBase="296" countDelta="0" countBase="150">
                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="resetHashCodeCache" methodSignature="()V" timeDelta="-5" timeBase="23" countDelta="0" countBase="150"/>
                                            <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-10" timeBase="95" countDelta="0" countBase="150"/>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.ArithExpr$ArithmeticOp$3" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="5" timeBase="47" countDelta="0" countBase="150"/>
                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="getSrcInfo" methodSignature="()Ljason/asSyntax/SourceInfo;" timeDelta="-6" timeBase="52" countDelta="0" countBase="150"/>
                                        </node>
                                        <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="17" timeBase="106" countDelta="0" countBase="500"/>
                                        <node leaf="false" class="jason.asSyntax.ArithExpr" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="12" timeBase="34" countDelta="0" countBase="1">
                                          <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="12" timeBase="24" countDelta="0" countBase="1"/>
                                        </node>
                                        <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="7" timeBase="64" countDelta="0" countBase="350"/>
                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-10" timeBase="38" countDelta="0" countBase="350"/>
                                        <node leaf="false" class="jason.asSyntax.ArithFunctionTerm" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-22" timeBase="75" countDelta="0" countBase="1">
                                          <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-21" timeBase="61" countDelta="0" countBase="1"/>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="arithm_expr_simple" methodSignature="()Ljava/lang/Object;" timeDelta="-74" timeBase="6251" countDelta="0" countBase="150">
                                          <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="setSrcInfo" methodSignature="(Ljason/asSyntax/SourceInfo;)V" timeDelta="-2" timeBase="26" countDelta="0" countBase="150"/>
                                          <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="parseNumber" methodSignature="(Ljava/lang/String;)Ljason/asSyntax/NumberTerm;" timeDelta="-4" timeBase="1757" countDelta="0" countBase="150">
                                            <node leaf="false" class="jason.asSyntax.NumberTermImpl" methodName="&lt;init&gt;" methodSignature="(D)V" timeDelta="5" timeBase="123" countDelta="0" countBase="150">
                                              <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-5" timeBase="43" countDelta="0" countBase="150"/>
                                            </node>
                                            <node leaf="true" class="java.lang.Double" methodName="parseDouble" methodSignature="(Ljava/lang/String;)D" timeDelta="-16" timeBase="1511" countDelta="0" countBase="150"/>
                                          </node>
                                          <node leaf="true" class="jason.asSyntax.SourceInfo" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;I)V" timeDelta="-11" timeBase="26" countDelta="0" countBase="150"/>
                                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_consume_token" methodSignature="(I)Ljason/asSyntax/parser/Token;" timeDelta="-21" timeBase="32" countDelta="0" countBase="150"/>
                                          <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-79" timeBase="4215" countDelta="0" countBase="150">
                                            <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-78" timeBase="4135" countDelta="0" countBase="150">
                                              <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="10" timeBase="136" countDelta="0" countBase="150">
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="4" timeBase="64" countDelta="0" countBase="150"/>
                                              </node>
                                              <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-1" timeBase="39" countDelta="0" countBase="300"/>
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-16" timeBase="454" countDelta="0" countBase="150">
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="8" timeBase="18" countDelta="0" countBase="150"/>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="6" timeBase="21" countDelta="0" countBase="150"/>
                                                <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="2" timeBase="69" countDelta="0" countBase="150">
                                                  <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="2" timeBase="27" countDelta="0" countBase="150"/>
                                                </node>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-2" timeBase="18" countDelta="0" countBase="150"/>
                                                <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-4" timeBase="25" countDelta="0" countBase="150"/>
                                                <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-19" timeBase="148" countDelta="0" countBase="150">
                                                  <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="-2" timeBase="41" countDelta="0" countBase="150"/>
                                                </node>
                                              </node>
                                              <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-67" timeBase="3360" countDelta="0" countBase="150">
                                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-54" timeBase="3301" countDelta="0" countBase="150">
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddStates" methodSignature="(II)V" timeDelta="20" timeBase="260" countDelta="0" countBase="150">
                                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-10" timeBase="90" countDelta="0" countBase="750"/>
                                                  </node>
                                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-1" timeBase="61" countDelta="0" countBase="450"/>
                                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-2" timeBase="829" countDelta="0" countBase="2400">
                                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-24" timeBase="283" countDelta="0" countBase="2400"/>
                                                  </node>
                                                  <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjAddStates" methodSignature="(II)V" timeDelta="-7" timeBase="18" countDelta="0" countBase="50"/>
                                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-19" timeBase="1194" countDelta="0" countBase="2050">
                                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-46" timeBase="469" countDelta="0" countBase="4100"/>
                                                  </node>
                                                </node>
                                              </node>
                                            </node>
                                          </node>
                                        </node>
                                        <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="parseNumber" methodSignature="(Ljava/lang/String;)Ljason/asSyntax/NumberTerm;" timeDelta="-176" timeBase="3649" countDelta="0" countBase="350">
                                          <node leaf="false" class="jason.asSyntax.NumberTermImpl" methodName="&lt;clinit&gt;" methodSignature="()V" timeDelta="-9" timeBase="59" countDelta="0" countBase="1">
                                            <node leaf="true" class="java.util.logging.Logger" methodName="getLogger" methodSignature="(Ljava/lang/String;)Ljava/util/logging/Logger;" timeDelta="-8" timeBase="45" countDelta="0" countBase="1"/>
                                          </node>
                                          <node leaf="false" class="jason.asSyntax.NumberTermImpl" methodName="&lt;init&gt;" methodSignature="(D)V" timeDelta="-9" timeBase="251" countDelta="0" countBase="350">
                                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-16" timeBase="96" countDelta="0" countBase="350"/>
                                          </node>
                                          <node leaf="true" class="java.lang.Double" methodName="parseDouble" methodSignature="(Ljava/lang/String;)D" timeDelta="-69" timeBase="2049" countDelta="0" countBase="350"/>
                                        </node>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                              <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-219" timeBase="5244" countDelta="0" countBase="500">
                                <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-237" timeBase="5116" countDelta="0" countBase="500">
                                  <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-8" timeBase="330" countDelta="0" countBase="500">
                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-8" timeBase="185" countDelta="0" countBase="500">
                                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="8" timeBase="56" countDelta="0" countBase="500"/>
                                    </node>
                                  </node>
                                  <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-8" timeBase="102" countDelta="0" countBase="850"/>
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-85" timeBase="1126" countDelta="0" countBase="500">
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="9" timeBase="62" countDelta="0" countBase="500"/>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="1" timeBase="54" countDelta="0" countBase="500"/>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-1" timeBase="56" countDelta="0" countBase="500"/>
                                    <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-11" timeBase="207" countDelta="0" countBase="350">
                                      <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="-8" timeBase="69" countDelta="0" countBase="350"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="-18" timeBase="204" countDelta="0" countBase="500">
                                      <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-43" timeBase="90" countDelta="0" countBase="500"/>
                                    </node>
                                    <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-29" timeBase="71" countDelta="0" countBase="500"/>
                                  </node>
                                  <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-153" timeBase="3203" countDelta="0" countBase="500">
                                    <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="10" timeBase="21" countDelta="0" countBase="150"/>
                                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-166" timeBase="3030" countDelta="0" countBase="350">
                                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="12" timeBase="640" countDelta="0" countBase="2250">
                                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-6" timeBase="212" countDelta="0" countBase="2250"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-8" timeBase="51" countDelta="0" countBase="400"/>
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddStates" methodSignature="(II)V" timeDelta="-56" timeBase="514" countDelta="0" countBase="350">
                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-18" timeBase="194" countDelta="0" countBase="1750"/>
                                      </node>
                                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-67" timeBase="972" countDelta="0" countBase="1600">
                                        <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="-56" timeBase="420" countDelta="0" countBase="3200"/>
                                      </node>
                                    </node>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                        </node>
                      </node>
                    </node>
                  </node>
                  <node leaf="false" class="jason.asSyntax.ASSyntax" methodName="isKeyword" methodSignature="(Ljason/asSyntax/Literal;)Z" timeDelta="59" timeBase="2077" countDelta="0" countBase="250">
                    <node leaf="false" class="jason.asSyntax.Literal" methodName="getPredicateIndicator" methodSignature="()Ljason/asSyntax/PredicateIndicator;" timeDelta="55" timeBase="1340" countDelta="0" countBase="250">
                      <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljava/lang/String;I)V" timeDelta="60" timeBase="642" countDelta="0" countBase="250">
                        <node leaf="false" class="jason.asSyntax.PredicateIndicator" methodName="calcHash" methodSignature="()I" timeDelta="67" timeBase="430" countDelta="0" countBase="250">
                          <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="3" timeBase="83" countDelta="0" countBase="250"/>
                          <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-16" timeBase="149" countDelta="0" countBase="250">
                            <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-14" timeBase="46" countDelta="0" countBase="250"/>
                          </node>
                        </node>
                      </node>
                      <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="6" timeBase="165" countDelta="0" countBase="250">
                        <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="6" timeBase="61" countDelta="0" countBase="250"/>
                      </node>
                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="1" timeBase="60" countDelta="0" countBase="250"/>
                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-7" timeBase="42" countDelta="0" countBase="250"/>
                    </node>
                    <node leaf="false" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="30" timeBase="408" countDelta="0" countBase="250">
                      <node leaf="true" class="jason.asSyntax.PredicateIndicator" methodName="hashCode" methodSignature="()I" timeDelta="-7" timeBase="39" countDelta="0" countBase="250"/>
                    </node>
                  </node>
                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_2_4" methodSignature="(I)Z" timeDelta="35" timeBase="1881" countDelta="0" countBase="250">
                    <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3_4" methodSignature="()Z" timeDelta="36" timeBase="1444" countDelta="0" countBase="250">
                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="46" timeBase="923" countDelta="0" countBase="250">
                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="47" timeBase="849" countDelta="0" countBase="250">
                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="39" timeBase="388" countDelta="0" countBase="250">
                            <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="18" timeBase="87" countDelta="0" countBase="250">
                              <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-4" timeBase="32" countDelta="0" countBase="250"/>
                            </node>
                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="12" timeBase="37" countDelta="0" countBase="250"/>
                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndLine" methodSignature="()I" timeDelta="6" timeBase="30" countDelta="0" countBase="250"/>
                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="2" timeBase="25" countDelta="0" countBase="250"/>
                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-4" timeBase="32" countDelta="0" countBase="250"/>
                          </node>
                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="8" timeBase="111" countDelta="0" countBase="250">
                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-16" timeBase="46" countDelta="0" countBase="250"/>
                          </node>
                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-9" timeBase="30" countDelta="0" countBase="250"/>
                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-11" timeBase="161" countDelta="0" countBase="250">
                            <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjStopAtPos" methodSignature="(II)I" timeDelta="-21" timeBase="48" countDelta="0" countBase="250"/>
                          </node>
                        </node>
                      </node>
                      <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_17" methodSignature="()Z" timeDelta="-2" timeBase="342" countDelta="0" countBase="250">
                        <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_3R_35" methodSignature="()Z" timeDelta="-5" timeBase="200" countDelta="0" countBase="250">
                          <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_scan_token" methodSignature="(I)Z" timeDelta="3" timeBase="71" countDelta="0" countBase="250"/>
                        </node>
                      </node>
                    </node>
                    <node leaf="true" class="jason.asSyntax.parser.as2j" methodName="jj_save" methodSignature="(II)V" timeDelta="3" timeBase="81" countDelta="0" countBase="250"/>
                  </node>
                  <node leaf="true" class="java.lang.String" methodName="indexOf" methodSignature="(Ljava/lang/String;)I" timeDelta="16" timeBase="116" countDelta="0" countBase="250"/>
                  <node leaf="true" class="java.lang.String" methodName="charAt" methodSignature="(I)C" timeDelta="-2" timeBase="54" countDelta="0" countBase="250"/>
                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-13" timeBase="67" countDelta="0" countBase="500"/>
                  <node leaf="false" class="jason.asSyntax.directives.NameSpace" methodName="map" methodSignature="(Ljason/asSyntax/Atom;)Ljason/asSyntax/Atom;" timeDelta="-22" timeBase="416" countDelta="0" countBase="250">
                    <node leaf="false" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="-43" timeBase="285" countDelta="0" countBase="250">
                      <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-26" timeBase="95" countDelta="0" countBase="250">
                        <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-7" timeBase="26" countDelta="0" countBase="250"/>
                      </node>
                    </node>
                  </node>
                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;ZLjason/asSyntax/Literal;)V" timeDelta="-26" timeBase="3201" countDelta="0" countBase="250">
                    <node leaf="false" class="jason.asSyntax.Pred" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-44" timeBase="3082" countDelta="0" countBase="250">
                      <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="8" timeBase="36" countDelta="0" countBase="250"/>
                      <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-44" timeBase="2843" countDelta="0" countBase="250">
                        <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="25" timeBase="93" countDelta="0" countBase="500"/>
                        <node leaf="false" class="jason.asSyntax.NumberTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="10" timeBase="159" countDelta="0" countBase="350">
                          <node leaf="true" class="jason.asSyntax.NumberTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/NumberTerm;" timeDelta="2" timeBase="41" countDelta="0" countBase="350"/>
                        </node>
                        <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="6" timeBase="207" countDelta="0" countBase="500">
                          <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="7" timeBase="59" countDelta="0" countBase="500"/>
                        </node>
                        <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-13" timeBase="95" countDelta="0" countBase="250">
                          <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-7" timeBase="28" countDelta="0" countBase="250"/>
                        </node>
                        <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-16" timeBase="311" countDelta="0" countBase="250">
                          <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="10" timeBase="106" countDelta="0" countBase="250">
                            <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="7" timeBase="48" countDelta="0" countBase="250"/>
                          </node>
                          <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-4" timeBase="27" countDelta="0" countBase="250"/>
                        </node>
                        <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-26" timeBase="124" countDelta="0" countBase="250"/>
                        <node leaf="false" class="jason.asSyntax.ArithExpr" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-52" timeBase="1255" countDelta="0" countBase="150">
                          <node leaf="false" class="jason.asSyntax.ArithExpr" methodName="clone" methodSignature="()Ljason/asSyntax/NumberTerm;" timeDelta="-48" timeBase="1162" countDelta="0" countBase="150">
                            <node leaf="false" class="jason.asSyntax.ArithExpr" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/ArithExpr;)V" timeDelta="-38" timeBase="1066" countDelta="0" countBase="150">
                              <node leaf="false" class="jason.asSyntax.ArithFunctionTerm" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/ArithFunctionTerm;)V" timeDelta="-52" timeBase="963" countDelta="0" countBase="150">
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Literal;)V" timeDelta="-24" timeBase="838" countDelta="0" countBase="150">
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="5" timeBase="21" countDelta="0" countBase="150"/>
                                  <node leaf="false" class="jason.asSyntax.Structure" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-15" timeBase="658" countDelta="0" countBase="150">
                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="13" timeBase="64" countDelta="0" countBase="150">
                                      <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="7" timeBase="15" countDelta="0" countBase="150"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="2" timeBase="64" countDelta="0" countBase="150">
                                      <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="10" timeBase="15" countDelta="0" countBase="150"/>
                                    </node>
                                    <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-2" timeBase="34" countDelta="0" countBase="150"/>
                                    <node leaf="false" class="jason.asSyntax.Atom" methodName="&lt;init&gt;" methodSignature="(Ljason/asSyntax/Atom;Ljason/asSyntax/Literal;)V" timeDelta="-4" timeBase="176" countDelta="0" countBase="150">
                                      <node leaf="false" class="jason.asSyntax.Literal" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="65" countDelta="0" countBase="150">
                                        <node leaf="true" class="jason.asSyntax.DefaultTerm" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="1" timeBase="22" countDelta="0" countBase="150"/>
                                      </node>
                                      <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="16" countDelta="0" countBase="150"/>
                                    </node>
                                    <node leaf="false" class="jason.asSyntax.NumberTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/Term;" timeDelta="-4" timeBase="76" countDelta="0" countBase="150">
                                      <node leaf="true" class="jason.asSyntax.NumberTermImpl" methodName="clone" methodSignature="()Ljason/asSyntax/NumberTerm;" timeDelta="4" timeBase="19" countDelta="0" countBase="150"/>
                                    </node>
                                    <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="-8" timeBase="32" countDelta="0" countBase="150"/>
                                  </node>
                                </node>
                              </node>
                            </node>
                          </node>
                        </node>
                      </node>
                    </node>
                  </node>
                  <node leaf="false" class="jason.asSyntax.parser.as2j" methodName="jj_ntk_f" methodSignature="()I" timeDelta="-148" timeBase="4167" countDelta="0" countBase="250">
                    <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="getNextToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-134" timeBase="3998" countDelta="0" countBase="250">
                      <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="backup" methodSignature="(I)V" timeDelta="-12" timeBase="77" countDelta="0" countBase="500"/>
                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjFillToken" methodSignature="()Ljason/asSyntax/parser/Token;" timeDelta="-12" timeBase="886" countDelta="0" countBase="250">
                        <node leaf="false" class="jason.asSyntax.parser.Token" methodName="newToken" methodSignature="(ILjava/lang/String;)Ljason/asSyntax/parser/Token;" timeDelta="4" timeBase="128" countDelta="0" countBase="250">
                          <node leaf="true" class="jason.asSyntax.parser.Token" methodName="&lt;init&gt;" methodSignature="(ILjava/lang/String;)V" timeDelta="-2" timeBase="46" countDelta="0" countBase="250"/>
                        </node>
                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getEndColumn" methodSignature="()I" timeDelta="-6" timeBase="29" countDelta="0" countBase="250"/>
                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginLine" methodSignature="()I" timeDelta="-7" timeBase="36" countDelta="0" countBase="250"/>
                        <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="getBeginColumn" methodSignature="()I" timeDelta="-16" timeBase="41" countDelta="0" countBase="250"/>
                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="GetImage" methodSignature="()Ljava/lang/String;" timeDelta="-39" timeBase="232" countDelta="0" countBase="250">
                          <node leaf="true" class="java.lang.String" methodName="&lt;init&gt;" methodSignature="([CII)V" timeDelta="-19" timeBase="78" countDelta="0" countBase="250"/>
                        </node>
                      </node>
                      <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="BeginToken" methodSignature="()C" timeDelta="-32" timeBase="915" countDelta="0" countBase="250">
                        <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-45" timeBase="797" countDelta="0" countBase="250">
                          <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="13" timeBase="27" countDelta="0" countBase="250"/>
                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="FillBuff" methodSignature="()V" timeDelta="-59" timeBase="579" countDelta="0" countBase="250">
                            <node leaf="true" class="java.io.Reader" methodName="read" methodSignature="([CII)I" timeDelta="-20" timeBase="361" countDelta="0" countBase="250"/>
                          </node>
                        </node>
                      </node>
                      <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveStringLiteralDfa0_0" methodSignature="()I" timeDelta="-60" timeBase="1754" countDelta="0" countBase="250">
                        <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjMoveNfa_0" methodSignature="(II)I" timeDelta="-73" timeBase="1632" countDelta="0" countBase="250">
                          <node leaf="false" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAddTwoStates" methodSignature="(II)V" timeDelta="-39" timeBase="694" countDelta="0" countBase="1350">
                            <node leaf="true" class="jason.asSyntax.parser.as2jTokenManager" methodName="jjCheckNAdd" methodSignature="(I)V" timeDelta="1" timeBase="226" countDelta="0" countBase="2700"/>
                          </node>
                          <node leaf="false" class="jason.asSyntax.parser.SimpleCharStream" methodName="readChar" methodSignature="()C" timeDelta="-53" timeBase="403" countDelta="0" countBase="1350">
                            <node leaf="true" class="jason.asSyntax.parser.SimpleCharStream" methodName="UpdateLineColumn" methodSignature="(C)V" timeDelta="-38" timeBase="139" countDelta="0" countBase="1350"/>
                          </node>
                        </node>
                      </node>
                    </node>
                  </node>
                </node>
                <node leaf="true" class="java.io.StringReader" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-4" timeBase="298" countDelta="0" countBase="250"/>
              </node>
              <node leaf="false" class="jason.environment.Environment" methodName="addPercept" methodSignature="([Ljason/asSyntax/Literal;)V" timeDelta="126" timeBase="5561" countDelta="0" countBase="250">
                <node leaf="false" class="java.util.List" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="71" timeBase="4719" countDelta="0" countBase="250">
                  <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="equals" methodSignature="(Ljava/lang/Object;)Z" timeDelta="54" timeBase="4127" countDelta="0" countBase="500">
                    <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-94" timeBase="3756" countDelta="0" countBase="1000">
                      <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="10" timeBase="37" countDelta="0" countBase="250"/>
                      <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-7" timeBase="101" countDelta="0" countBase="1000"/>
                      <node leaf="false" class="jason.asSyntax.LiteralImpl" methodName="calcHashCode" methodSignature="()I" timeDelta="-51" timeBase="3253" countDelta="0" countBase="250">
                        <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-7" timeBase="41" countDelta="0" countBase="250"/>
                        <node leaf="false" class="jason.asSyntax.Structure" methodName="calcHashCode" methodSignature="()I" timeDelta="-19" timeBase="2890" countDelta="0" countBase="250">
                          <node leaf="false" class="java.lang.Object" methodName="hashCode" methodSignature="()I" timeDelta="-13" timeBase="1490" countDelta="0" countBase="500">
                            <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-6" timeBase="1349" countDelta="0" countBase="500">
                              <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="7" timeBase="75" countDelta="0" countBase="500"/>
                              <node leaf="true" class="jason.asSyntax.NumberTermImpl" methodName="calcHashCode" methodSignature="()I" timeDelta="4" timeBase="66" countDelta="0" countBase="350"/>
                              <node leaf="false" class="jason.asSyntax.Structure" methodName="calcHashCode" methodSignature="()I" timeDelta="-3" timeBase="861" countDelta="0" countBase="150">
                                <node leaf="false" class="jason.asSyntax.Atom" methodName="calcHashCode" methodSignature="()I" timeDelta="13" timeBase="248" countDelta="0" countBase="150">
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="21" timeBase="18" countDelta="0" countBase="150"/>
                                  <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="20" timeBase="42" countDelta="0" countBase="150">
                                    <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="5" timeBase="19" countDelta="0" countBase="150"/>
                                  </node>
                                  <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="1" timeBase="25" countDelta="0" countBase="150"/>
                                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="-9" timeBase="23" countDelta="0" countBase="150"/>
                                </node>
                                <node leaf="false" class="java.lang.Object" methodName="hashCode" methodSignature="()I" timeDelta="2" timeBase="325" countDelta="0" countBase="150">
                                  <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="25" timeBase="263" countDelta="0" countBase="150">
                                    <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="7" timeBase="25" countDelta="0" countBase="150"/>
                                    <node leaf="true" class="java.lang.Integer" methodName="valueOf" methodSignature="(I)Ljava/lang/Integer;" timeDelta="-2" timeBase="49" countDelta="0" countBase="150"/>
                                    <node leaf="true" class="jason.asSyntax.NumberTermImpl" methodName="calcHashCode" methodSignature="()I" timeDelta="-7" timeBase="48" countDelta="0" countBase="150"/>
                                  </node>
                                </node>
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-3" timeBase="59" countDelta="0" countBase="150">
                                  <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="1" timeBase="19" countDelta="0" countBase="150"/>
                                </node>
                                <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-6" timeBase="61" countDelta="0" countBase="150">
                                  <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-2" timeBase="24" countDelta="0" countBase="150"/>
                                </node>
                              </node>
                              <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-11" timeBase="62" countDelta="0" countBase="500"/>
                            </node>
                          </node>
                          <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-17" timeBase="137" countDelta="0" countBase="250">
                            <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-9" timeBase="53" countDelta="0" countBase="250"/>
                          </node>
                          <node leaf="false" class="jason.asSyntax.Structure" methodName="getTerm" methodSignature="(I)Ljason/asSyntax/Term;" timeDelta="-22" timeBase="224" countDelta="0" countBase="500">
                            <node leaf="true" class="java.util.List" methodName="get" methodSignature="(I)Ljava/lang/Object;" timeDelta="-7" timeBase="78" countDelta="0" countBase="500"/>
                          </node>
                          <node leaf="false" class="jason.asSyntax.Atom" methodName="calcHashCode" methodSignature="()I" timeDelta="-51" timeBase="651" countDelta="0" countBase="250">
                            <node leaf="false" class="jason.asSyntax.DefaultTerm" methodName="hashCode" methodSignature="()I" timeDelta="-1" timeBase="125" countDelta="0" countBase="250">
                              <node leaf="true" class="java.lang.Integer" methodName="intValue" methodSignature="()I" timeDelta="-12" timeBase="50" countDelta="0" countBase="250"/>
                            </node>
                            <node leaf="true" class="java.lang.String" methodName="hashCode" methodSignature="()I" timeDelta="-9" timeBase="70" countDelta="0" countBase="250"/>
                            <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-13" timeBase="61" countDelta="0" countBase="250"/>
                          </node>
                        </node>
                      </node>
                    </node>
                  </node>
                </node>
                <node leaf="true" class="java.util.Set" methodName="clear" methodSignature="()V" timeDelta="21" timeBase="327" countDelta="0" countBase="250"/>
                <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="-14" timeBase="171" countDelta="0" countBase="250"/>
              </node>
              <node leaf="true" class="java.util.Iterator" methodName="next" methodSignature="()Ljava/lang/Object;" timeDelta="15" timeBase="93" countDelta="0" countBase="250"/>
              <node leaf="true" class="java.util.List" methodName="add" methodSignature="(Ljava/lang/Object;)Z" timeDelta="11" timeBase="178" countDelta="0" countBase="250"/>
              <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="10" timeBase="144" countDelta="0" countBase="51"/>
              <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="8" timeBase="113" countDelta="0" countBase="250"/>
              <node leaf="false" class="jason.environment.Environment" methodName="getPercepts" methodSignature="(Ljava/lang/String;)Ljava/util/Collection;" timeDelta="4" timeBase="702" countDelta="0" countBase="51">
                <node leaf="true" class="java.util.ArrayList" methodName="&lt;init&gt;" methodSignature="(I)V" timeDelta="10" timeBase="27" countDelta="0" countBase="51"/>
                <node leaf="true" class="java.util.Set" methodName="contains" methodSignature="(Ljava/lang/Object;)Z" timeDelta="7" timeBase="107" countDelta="0" countBase="51"/>
                <node leaf="true" class="java.util.Map" methodName="get" methodSignature="(Ljava/lang/Object;)Ljava/lang/Object;" timeDelta="4" timeBase="52" countDelta="0" countBase="51"/>
                <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="2" timeBase="55" countDelta="0" countBase="51"/>
                <node leaf="true" class="java.util.Collection" methodName="addAll" methodSignature="(Ljava/util/Collection;)Z" timeDelta="1" timeBase="189" countDelta="0" countBase="50"/>
              </node>
              <node leaf="true" class="java.util.List" methodName="iterator" methodSignature="()Ljava/util/Iterator;" timeDelta="4" timeBase="48" countDelta="0" countBase="51"/>
              <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="3" timeBase="84" countDelta="0" countBase="250"/>
              <node leaf="false" class="jason.environment.Environment" methodName="clearPercepts" methodSignature="()V" timeDelta="-3" timeBase="156" countDelta="0" countBase="51">
                <node leaf="true" class="java.util.List" methodName="isEmpty" methodSignature="()Z" timeDelta="6" timeBase="13" countDelta="0" countBase="51"/>
                <node leaf="true" class="java.util.Set" methodName="clear" methodSignature="()V" timeDelta="2" timeBase="51" countDelta="0" countBase="50"/>
                <node leaf="true" class="java.util.List" methodName="clear" methodSignature="()V" timeDelta="-1" timeBase="49" countDelta="0" countBase="50"/>
              </node>
              <node leaf="true" class="java.util.Iterator" methodName="hasNext" methodSignature="()Z" timeDelta="-19" timeBase="240" countDelta="0" countBase="301"/>
              <node leaf="true" class="java.util.Queue" methodName="poll" methodSignature="()Ljava/lang/Object;" timeDelta="-21" timeBase="197" countDelta="0" countBase="51"/>
              <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-38" timeBase="218" countDelta="0" countBase="500"/>
              <node leaf="true" class="java.lang.String" methodName="split" methodSignature="(Ljava/lang/String;)[Ljava/lang/String;" timeDelta="-153" timeBase="7022" countDelta="0" countBase="50"/>
              <node leaf="false" class="java.lang.Object" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-2661" timeBase="22237" countDelta="0" countBase="250">
                <node leaf="false" class="jason.asSyntax.Structure" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-2674" timeBase="22101" countDelta="0" countBase="250">
                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getNS" methodSignature="()Ljason/asSyntax/Atom;" timeDelta="4" timeBase="27" countDelta="0" countBase="250"/>
                  <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="87" countDelta="0" countBase="250">
                    <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-2" timeBase="34" countDelta="0" countBase="250"/>
                  </node>
                  <node leaf="true" class="jason.asSyntax.LiteralImpl" methodName="negated" methodSignature="()Z" timeDelta="-6" timeBase="43" countDelta="0" countBase="250"/>
                  <node leaf="true" class="jason.asSyntax.Atom" methodName="getFunctor" methodSignature="()Ljava/lang/String;" timeDelta="-8" timeBase="64" countDelta="0" countBase="500"/>
                  <node leaf="true" class="java.util.stream.Collectors" methodName="joining" methodSignature="(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;" timeDelta="-8" timeBase="827" countDelta="0" countBase="250"/>
                  <node leaf="true" class="jason.asSyntax.Pred" methodName="hasAnnot" methodSignature="()Z" timeDelta="-12" timeBase="44" countDelta="0" countBase="250"/>
                  <node leaf="true" class="java.util.List" methodName="stream" methodSignature="()Ljava/util/stream/Stream;" timeDelta="-18" timeBase="1044" countDelta="0" countBase="250"/>
                  <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(C)Ljava/lang/StringBuilder;" timeDelta="-19" timeBase="147" countDelta="0" countBase="500"/>
                  <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-25" timeBase="97" countDelta="0" countBase="250"/>
                  <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-26" timeBase="159" countDelta="0" countBase="250"/>
                  <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-33" timeBase="162" countDelta="0" countBase="500"/>
                  <node leaf="true" class="java.util.stream.Stream" methodName="map" methodSignature="(Ljava/util/function/Function;)Ljava/util/stream/Stream;" timeDelta="-38" timeBase="758" countDelta="0" countBase="250"/>
                  <node leaf="false" class="java.util.stream.Stream" methodName="collect" methodSignature="(Ljava/util/stream/Collector;)Ljava/lang/Object;" timeDelta="-2428" timeBase="17253" countDelta="0" countBase="250">
                    <node leaf="false" class="jason.asSyntax.NumberTermImpl" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-10" timeBase="2301" countDelta="0" countBase="350">
                      <node leaf="true" class="java.lang.Math" methodName="round" methodSignature="(D)J" timeDelta="9" timeBase="201" countDelta="0" countBase="350"/>
                      <node leaf="true" class="java.lang.String" methodName="valueOf" methodSignature="(J)Ljava/lang/String;" timeDelta="4" timeBase="359" countDelta="0" countBase="250"/>
                      <node leaf="true" class="java.lang.String" methodName="valueOf" methodSignature="(D)Ljava/lang/String;" timeDelta="-22" timeBase="1448" countDelta="0" countBase="100"/>
                    </node>
                    <node leaf="false" class="jason.asSyntax.ArithExpr" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-2397" timeBase="8712" countDelta="0" countBase="150">
                      <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="17" timeBase="98" countDelta="0" countBase="300"/>
                      <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-2" timeBase="45" countDelta="0" countBase="150"/>
                      <node leaf="false" class="jason.asSyntax.Structure" methodName="isUnary" methodSignature="()Z" timeDelta="-3" timeBase="199" countDelta="0" countBase="150">
                        <node leaf="false" class="jason.asSyntax.Structure" methodName="getArity" methodSignature="()I" timeDelta="-1" timeBase="73" countDelta="0" countBase="150">
                          <node leaf="true" class="java.util.List" methodName="size" methodSignature="()I" timeDelta="-3" timeBase="29" countDelta="0" countBase="150"/>
                        </node>
                      </node>
                      <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="()V" timeDelta="-11" timeBase="43" countDelta="0" countBase="150"/>
                      <node leaf="false" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/Object;)Ljava/lang/StringBuilder;" timeDelta="-2369" timeBase="7838" countDelta="0" countBase="300">
                        <node leaf="true" class="jason.asSyntax.ArithExpr$ArithmeticOp$3" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="22" timeBase="25" countDelta="0" countBase="150"/>
                        <node leaf="false" class="jason.asSyntax.NumberTermImpl" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="-2390" timeBase="7440" countDelta="0" countBase="150">
                          <node leaf="true" class="java.lang.Math" methodName="round" methodSignature="(D)J" timeDelta="-10" timeBase="104" countDelta="0" countBase="150"/>
                          <node leaf="true" class="java.lang.String" methodName="valueOf" methodSignature="(D)Ljava/lang/String;" timeDelta="-2386" timeBase="7210" countDelta="0" countBase="150"/>
                        </node>
                      </node>
                    </node>
                  </node>
                </node>
              </node>
              <node leaf="false" class="java.util.logging.Logger" methodName="info" methodSignature="(Ljava/lang/String;)V" timeDelta="-3015" timeBase="50013" countDelta="0" countBase="251">
                <node leaf="false" class="jason.runtime.MASConsoleLogFormatter" methodName="format" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="-47" timeBase="1755" countDelta="0" countBase="251">
                  <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="28" timeBase="90" countDelta="0" countBase="251"/>
                  <node leaf="true" class="java.util.logging.LogRecord" methodName="getMessage" methodSignature="()Ljava/lang/String;" timeDelta="9" timeBase="67" countDelta="0" countBase="251"/>
                  <node leaf="true" class="java.util.logging.LogRecord" methodName="getThrown" methodSignature="()Ljava/lang/Throwable;" timeDelta="-7" timeBase="52" countDelta="0" countBase="251"/>
                  <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(C)Ljava/lang/StringBuilder;" timeDelta="-11" timeBase="93" countDelta="0" countBase="251"/>
                  <node leaf="false" class="jason.runtime.MASConsoleLogFormatter" methodName="getAgName" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="-18" timeBase="276" countDelta="0" countBase="251">
                    <node leaf="true" class="java.util.logging.LogRecord" methodName="getLoggerName" methodSignature="()Ljava/lang/String;" timeDelta="-1" timeBase="48" countDelta="0" countBase="251"/>
                  </node>
                  <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="-20" timeBase="263" countDelta="0" countBase="753"/>
                  <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="-37" timeBase="249" countDelta="0" countBase="251"/>
                </node>
                <node leaf="false" class="jason.runtime.MASConsoleLogHandler" methodName="publish" methodSignature="(Ljava/util/logging/LogRecord;)V" timeDelta="-2732" timeBase="35898" countDelta="0" countBase="251">
                  <node leaf="false" class="java.util.logging.Formatter" methodName="format" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="55" timeBase="1593" countDelta="0" countBase="251">
                    <node leaf="false" class="jason.runtime.MASConsoleLogFormatter" methodName="format" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="47" timeBase="1446" countDelta="0" countBase="251">
                      <node leaf="true" class="java.lang.StringBuilder" methodName="toString" methodSignature="()Ljava/lang/String;" timeDelta="23" timeBase="76" countDelta="0" countBase="251"/>
                      <node leaf="true" class="java.lang.StringBuilder" methodName="&lt;init&gt;" methodSignature="(Ljava/lang/String;)V" timeDelta="20" timeBase="173" countDelta="0" countBase="251"/>
                      <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(Ljava/lang/String;)Ljava/lang/StringBuilder;" timeDelta="20" timeBase="241" countDelta="0" countBase="753"/>
                      <node leaf="true" class="java.util.logging.LogRecord" methodName="getThrown" methodSignature="()Ljava/lang/Throwable;" timeDelta="1" timeBase="56" countDelta="0" countBase="251"/>
                      <node leaf="true" class="java.lang.StringBuilder" methodName="append" methodSignature="(C)Ljava/lang/StringBuilder;" timeDelta="-16" timeBase="86" countDelta="0" countBase="251"/>
                      <node leaf="true" class="java.util.logging.LogRecord" methodName="getMessage" methodSignature="()Ljava/lang/String;" timeDelta="-17" timeBase="97" countDelta="0" countBase="251"/>
                    </node>
                  </node>
                  <node leaf="false" class="jason.runtime.MASConsoleLogFormatter" methodName="getAgName" methodSignature="(Ljava/util/logging/LogRecord;)Ljava/lang/String;" timeDelta="-21" timeBase="339" countDelta="0" countBase="251">
                    <node leaf="true" class="java.util.logging.LogRecord" methodName="getLoggerName" methodSignature="()Ljava/lang/String;" timeDelta="-6" timeBase="55" countDelta="0" countBase="251"/>
                    <node leaf="true" class="java.lang.String" methodName="lastIndexOf" methodSignature="(I)I" timeDelta="-18" timeBase="106" countDelta="0" countBase="251"/>
                  </node>
                  <node leaf="false" class="jason.runtime.MASConsoleGUI" methodName="append" methodSignature="(Ljava/lang/String;Ljava/lang/String;)V" timeDelta="-2747" timeBase="33447" countDelta="0" countBase="251">
                    <node leaf="true" class="javax.swing.JFrame" methodName="isVisible" methodSignature="()Z" timeDelta="26" timeBase="143" countDelta="0" countBase="251"/>
                    <node leaf="true" class="javax.swing.JTextArea" methodName="getDocument" methodSignature="()Ljavax/swing/text/Document;" timeDelta="-1" timeBase="106" countDelta="0" countBase="251"/>
                    <node leaf="true" class="javax.swing.text.Document" methodName="getLength" methodSignature="()I" timeDelta="-3" timeBase="199" countDelta="0" countBase="251"/>
                    <node leaf="true" class="javax.swing.JTextArea" methodName="append" methodSignature="(Ljava/lang/String;)V" timeDelta="-2759" timeBase="32424" countDelta="0" countBase="251"/>
                  </node>
                </node>
              </node>
            </node>
          </node>
        </node>
      </node>
    </node>
  </node>
</tree>