/**
 * Perceptions expected by this program:
 * gps(Lat,Lon).	 	The location detected by the GPS sensor
 * compass(Bearing). 	The compass bearing to the magnetic north pole.
 * speed(Speed).		Speedometer measurement -> Not actually using this.
 *
 * Actions generated by this program:
 * steering(Setting).		Set a steering setting; a value between -1 and 1.
 * setSpeed(TargetSpeed).	Set a target speed for the car. Setting to 0 stops the car.
 *
 * Messages that this agent expects to receive:
 *
 * Messages that this agent sends:
 * 
 */

// Trigger the plan to drive to post3.
!navigate(post3).

// Expected compass declination. TODO: make this tunable.
declanation(7.5).

// Initial speed of the car.
speedSetting(0).

/**
 * Rule used for calculating the steering angles based on compass angle and
 * target bearing.
 */ 
 
courseCorrection(TargetBearing, Correction)
	:-	compass(CurrentBearing)
		& declanation(Declanation)
		& Correction = TargetBearing - (CurrentBearing + Declanation).

destinationRangeBearing(Location,Range,Bearing) 
	:- 	locationName(Location,[DestLat,DestLon])
		& gps(CurLat,CurLon)
		& savi_ros_java.savi_ros_bdi.navigation.range(CurLat,CurLon,DestLat,DestLon,Range)
		& savi_ros_java.savi_ros_bdi.navigation.bearing(CurLat,CurLon,DestLat,DestLon,Bearing).
										
/**
 * A* Rules and Beliefs
 */
 
// Map of locations that the agent can visit.
{ include("D:/Local Documents/ROS_Workspaces/AirSimNavigatingCar/asl/map.asl") }

// A* Nav Rules
{ include("D:/Local Documents/ROS_Workspaces/AirSimNavigatingCar/asl/a_star.asl") }

// sucessor definition: suc(CurrentState,NewState,Cost,Operation)
suc(Current,Next,Range,drive) 
	:-	possible(Current,Next) 
		& locationName(Current,[CurLat,CurLon])
		& locationName(Next,[NextLat,NextLon])
		& savi_ros_java.savi_ros_bdi.navigation.range(CurLat,CurLon,NextLat,NextLon,Range).
		
// heutistic definition: h(CurrentState,Goal,H)
h(Current,Goal,Range) 
	:-	locationName(Current,[CurLat,CurLon])
		& locationName(Goal,[GoalLat,GoalLon])
		& savi_ros_java.savi_ros_bdi.navigation.range(CurLat,CurLon,GoalLat,GoalLon,Range).

// Rule for determining if the location is nearby.
nearLocation(CurLat,CurLon, Location, Range)
	:-	nearestLocation(CurLat,CurLon,Location,Range)
		& Range < 40.
		
// Rule for determining if the location is nearby.
atLocation(CurLat,CurLon, Location, Range)
	:-	nearestLocation(CurLat,CurLon,Location,Range)
		& Range < 4.

// Rule for determining the name, range and bearing to the nearest location
nearestLocation(CurLat,CurLon,Location,Range)
	:-	locationName(Location,[Lat,Lon])
		& locationName(OtherLocation,[OtherLat,OtherLon])
		& OtherLocation \== Location
		& savi_ros_java.savi_ros_bdi.navigation.range(CurLat,CurLon,Lat,Lon,Range)
		& savi_ros_java.savi_ros_bdi.navigation.range(CurLat,CurLon,OtherLat,OtherLon,OtherRange)
		& Range < OtherRange.
		
/**
 * !navigate(Destination)
 * Used for setting up the navigation path to get from the current location to 
 * the destination.
 * Beliefs: Relevant map definitions in map.asl
 * Actions: None
 * Goals Adopted: !driveToward(Location)
 */
 
 // Case where we are already at the destination
+!navigate(Destination)
	:	gps(CurLat,CurLon) 
		& atLocation(CurLat,CurLon, Destination, Range)
	<-	.broadcast(tell, navigate(arrived(Destination,Range)));
		-destinaton(Destination).

// We don't have a route plan, get one and set the waypoints.
+!navigate(Destination)
	:	gps(CurLat,CurLon) 
		& (not atLocation(CurLat,CurLon,Destination,_))
		& locationName(Destination,[DestLat,DestLon])
		& nearestLocation(CurLat,CurLon,Current,Range)
	<-	.broadcast(tell, navigate(gettingRoute(Destination), Range));
		.broadcast(tell, navigate(current(Current), CurrentRange));
		+destination(Destination);
		?a_star(Current,Destination,Solution,Cost);
		.broadcast(tell, navigate(route(Solution,Cost), Destination, Range));
		for (.member( op(drive,NextPosition), Solution)) {
			!driveToward(NextPosition);
		}
		!navigate(Destination).	
		
/**
 * !driveToward(Location)
 * Plans for driving the car toward a location called Location
 * Beliefs: gps(curLat,curtLon) - received by perception
 * 			locationName(Location,[destLat,destLon]) - should be in knowledge base
 * Actions: None
 * Goals Adopted: !drive(_), !steer(_), !driveToward(_)
 */
 
// Close enough to the location, stop.
+!driveToward(Location)
	: 	destinationRangeBearing(Location,Range,Bearing)
	 	& Range < 10
	<-	.broadcast(tell, driveToward(arrived, Location, Range,Bearing));
		!steer(Bearing);
		!drive(0).

// Approaching the location, slow down
+!driveToward(Location)
	: 	destinationRangeBearing(Location,Range,Bearing)
	 	& Range < 20 
		& Range >= 10
	<-	.broadcast(tell, driveToward(near, Location, Range,Bearing));
		!steer(Bearing);
		!drive(3);
		//!drive(1);
		!driveToward(Location).
		
// Drive toward the location.
+!driveToward(Location)
	: 	destinationRangeBearing(Location,Range,Bearing)
	 	& Range >= 20
	<-	.broadcast(tell, driveToward(main, Location, Range, Bearing));
		!steer(Bearing);	
		!drive(8);
		//!drive(1);
		!driveToward(Location).

/**
 * Steering controller plans, based on compass angles for target bearing and
 * compass 
 * measurement.
 *
 * Beliefs:		declanation(Declanation)
 				compass(CurrentBearing)[percept]
 * Actions:		steering(steeringSetting)
 */
+!steer(Bearing)
	:	courseCorrection(Bearing, Correction) &
		math.abs(Correction) >= 20 &
		Correction > 0
	<-	.broadcast(tell, steer(1, Bearing, Correction));
		steering(1).
	
+!steer(Bearing)
	:	courseCorrection(Bearing, Correction) &
		math.abs(Correction) >= 20 &
		Correction < 0
	<-	.broadcast(tell, steer(2, Bearing, Correction));
		steering(-1).
 
+!steer(Bearing)
	:	courseCorrection(Bearing, Correction) &
		math.abs(Correction) < 20
	<-	.broadcast(tell, steer(3, Bearing, Correction));
		steering(Correction/180).
	
/**
 * !drive(Speed)plans - used for setting speed.
 * Maintain knowledge of the speed setting, avoids needlessly setting it over
 * and over again.
 */
 
// Speed is out of date, update
+!drive(Speed)
	:	speedSetting(Old)
		& (Old \== Speed)
	<-	.broadcast(tell, drive(1, Speed));
		-speedSetting(_);
		+speedSetting(Speed);
		setSpeed(Speed).
 
// No speed setting in the knowledge base
+!drive(Speed)
	:	not speedSetting(_)
	<-	.broadcast(tell, drive(2, Speed));
		+speedSetting(Speed);
		setSpeed(Speed).
		
// Nothing to do, speed already set
+!drive(Speed)
	:	speedSetting(Speed)
	<-	.broadcast(tell, drive(3, Speed)).
	

/**
 * Default plans
 */
 
 // !navigate(Destination) - should be impossible
 +!navigate(Destination)
 	<-	.broadcast(tell, navigate(default, Destination)).
 
// !driveToward(Location) default
+!driveToward(Location)
	<-	.broadcast(tell, driveToward(default, Location));
		!driveToward(Location).
 
// !steer(Bearing), don't drop.
+!steer(Bearing) 
	<- 	.broadcast(tell, steer(default, Bearing));
		!steer(Bearing).
	
// !drive(Speed), should be impossible to reach.
+!drive(Speed) 
	<-	.broadcast(tell, drive(default, Speed)).
 
